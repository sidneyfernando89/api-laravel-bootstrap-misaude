/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/account/settings/signin-methods.js":
/*!********************************************************************!*\
  !*** ./resources/src/js/custom/account/settings/signin-methods.js ***!
  \********************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/extended/js/custom/account/settings/signin-methods.js\":\n    /*!********************************************************************************!*\\\r\n      !*** ./resources/assets/extended/js/custom/account/settings/signin-methods.js ***!\r\n      \\********************************************************************************/\n\n    /***/\n    function resourcesAssetsExtendedJsCustomAccountSettingsSigninMethodsJs() {\n      eval(\" // Class definition\\n\\nvar KTAccountSettingsSigninMethods = function () {\\n  // Private functions\\n  var initSettings = function initSettings() {\\n    // UI elements\\n    var signInMainEl = document.getElementById('kt_signin_email');\\n    var signInEditEl = document.getElementById('kt_signin_email_edit');\\n    var passwordMainEl = document.getElementById('kt_signin_password');\\n    var passwordEditEl = document.getElementById('kt_signin_password_edit'); // button elements\\n\\n    var signInChangeEmail = document.getElementById('kt_signin_email_button');\\n    var signInCancelEmail = document.getElementById('kt_signin_cancel');\\n    var passwordChange = document.getElementById('kt_signin_password_button');\\n    var passwordCancel = document.getElementById('kt_password_cancel'); // toggle UI\\n\\n    signInChangeEmail.querySelector('button').addEventListener('click', function () {\\n      toggleChangeEmail();\\n    });\\n    signInCancelEmail.addEventListener('click', function () {\\n      toggleChangeEmail();\\n    });\\n    passwordChange.querySelector('button').addEventListener('click', function () {\\n      toggleChangePassword();\\n    });\\n    passwordCancel.addEventListener('click', function () {\\n      toggleChangePassword();\\n    });\\n\\n    var toggleChangeEmail = function toggleChangeEmail() {\\n      signInMainEl.classList.toggle('d-none');\\n      signInChangeEmail.classList.toggle('d-none');\\n      signInEditEl.classList.toggle('d-none');\\n    };\\n\\n    var toggleChangePassword = function toggleChangePassword() {\\n      passwordMainEl.classList.toggle('d-none');\\n      passwordChange.classList.toggle('d-none');\\n      passwordEditEl.classList.toggle('d-none');\\n    };\\n  };\\n\\n  var handleChangeEmail = function handleChangeEmail(e) {\\n    var validation; // form elements\\n\\n    var form = document.getElementById('kt_signin_change_email');\\n    var submitButton = form.querySelector('#kt_signin_submit');\\n    validation = FormValidation.formValidation(form, {\\n      fields: {\\n        email: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Email is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        },\\n        password: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Password is required'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        //Learn more: https://formvalidation.io/guide/plugins\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row'\\n        })\\n      }\\n    });\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      validation.validate().then(function (status) {\\n        if (status === 'Valid') {\\n          // Show loading indication\\n          submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click\\n\\n          submitButton.disabled = true; // Send ajax request\\n\\n          axios.post(form.getAttribute('action'), new FormData(form)).then(function (response) {\\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Your email has been successfully changed.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn font-weight-bold btn-light-primary\\\"\\n              }\\n            });\\n          })[\\\"catch\\\"](function (error) {\\n            var dataMessage = error.response.data.message;\\n            var dataErrors = error.response.data.errors;\\n\\n            for (var errorsKey in dataErrors) {\\n              if (!dataErrors.hasOwnProperty(errorsKey)) continue;\\n              dataMessage += \\\"\\\\r\\\\n\\\" + dataErrors[errorsKey];\\n            }\\n\\n            if (error.response) {\\n              Swal.fire({\\n                text: dataMessage,\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"OK!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              });\\n            }\\n          }).then(function () {\\n            // always executed\\n            // Hide loading indication\\n            submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            submitButton.disabled = false;\\n          });\\n        } else {\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"OK!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn font-weight-bold btn-light-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  };\\n\\n  var handleChangePassword = function handleChangePassword(e) {\\n    var validation; // form elements\\n\\n    var form = document.getElementById('kt_signin_change_password');\\n    var submitButton = form.querySelector('#kt_password_submit');\\n    validation = FormValidation.formValidation(form, {\\n      fields: {\\n        current_password: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Current Password is required'\\n            }\\n          }\\n        },\\n        password: {\\n          validators: {\\n            notEmpty: {\\n              message: 'New Password is required'\\n            }\\n          }\\n        },\\n        password_confirmation: {\\n          validators: {\\n            notEmpty: {\\n              message: 'Confirm Password is required'\\n            },\\n            identical: {\\n              compare: function compare() {\\n                return form.querySelector('[name=\\\"password\\\"]').value;\\n              },\\n              message: 'The password and its confirm are not the same'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        //Learn more: https://formvalidation.io/guide/plugins\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row'\\n        })\\n      }\\n    });\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      validation.validate().then(function (status) {\\n        if (status == 'Valid') {\\n          // Show loading indication\\n          submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click\\n\\n          submitButton.disabled = true; // Send ajax request\\n\\n          axios.post(form.getAttribute('action'), new FormData(form)).then(function (response) {\\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Your password has been successfully reset.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn font-weight-bold btn-light-primary\\\"\\n              }\\n            });\\n          })[\\\"catch\\\"](function (error) {\\n            var dataMessage = error.response.data.message;\\n            var dataErrors = error.response.data.errors;\\n\\n            for (var errorsKey in dataErrors) {\\n              if (!dataErrors.hasOwnProperty(errorsKey)) continue;\\n              dataMessage += \\\"\\\\r\\\\n\\\" + dataErrors[errorsKey];\\n            }\\n\\n            if (error.response) {\\n              Swal.fire({\\n                text: dataMessage,\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"OK!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              });\\n            }\\n          }).then(function () {\\n            // always executed\\n            // Hide loading indication\\n            submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            submitButton.disabled = false;\\n          });\\n        } else {\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"OK!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn font-weight-bold btn-light-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Public methods\\n\\n\\n  return {\\n    init: function init() {\\n      initSettings();\\n      handleChangeEmail();\\n      handleChangePassword();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTAccountSettingsSigninMethods.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/custom/account/settings/signin-methods.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/extended/js/custom/account/settings/signin-methods.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS9hY2NvdW50L3NldHRpbmdzL3NpZ25pbi1tZXRob2RzLmpzPzc1MzAiXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZXNfXyIsImV2YWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQVMsQ0FBQyxZQUFNO0FBQUU7O0FBQ2xCO0FBQVU7QUFDVjs7QUFBVSxNQUFJQSxtQkFBbUIsR0FBSTtBQUVyQztBQUFNO0FBQ047QUFDQTtBQUNBOztBQUNBO0FBQU8sNkVBQU07QUFFYkMsTUFBQUEsSUFBSSxDQUFDLHl2bkNBQUQsQ0FBSjtBQUVBO0FBQU87QUFFUDs7QUFacUMsR0FBM0I7QUFhVjs7QUFDQTs7QUFDQTtBQUFVOztBQUNWO0FBQVU7O0FBQ1Y7QUFBVTs7QUFDVjs7QUFBVSxNQUFJQyxtQkFBbUIsR0FBRyxFQUExQjtBQUNWOztBQUFVRixFQUFBQSxtQkFBbUIsQ0FBQywwRUFBRCxDQUFuQjtBQUNWOztBQUNBOztBQUFVLENBdkJEIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQVRURU5USU9OOiBBbiBcImV2YWwtc291cmNlLW1hcFwiIGRldnRvb2wgaGFzIGJlZW4gdXNlZC5cclxuICogVGhpcyBkZXZ0b29sIGlzIG5laXRoZXIgbWFkZSBmb3IgcHJvZHVjdGlvbiBub3IgZm9yIHJlYWRhYmxlIG91dHB1dCBmaWxlcy5cclxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cclxuICogSWYgeW91IGFyZSB0cnlpbmcgdG8gcmVhZCB0aGUgb3V0cHV0IGZpbGUsIHNlbGVjdCBhIGRpZmZlcmVudCBkZXZ0b29sIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8pXHJcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cclxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxyXG4gKi9cclxuLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxyXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xyXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcclxuXHJcbi8qKiovIFwiLi9yZXNvdXJjZXMvYXNzZXRzL2V4dGVuZGVkL2pzL2N1c3RvbS9hY2NvdW50L3NldHRpbmdzL3NpZ25pbi1tZXRob2RzLmpzXCI6XHJcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxyXG4gICEqKiogLi9yZXNvdXJjZXMvYXNzZXRzL2V4dGVuZGVkL2pzL2N1c3RvbS9hY2NvdW50L3NldHRpbmdzL3NpZ25pbi1tZXRob2RzLmpzICoqKiFcclxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4vKioqLyAoKCkgPT4ge1xyXG5cclxuZXZhbChcIiAvLyBDbGFzcyBkZWZpbml0aW9uXFxuXFxudmFyIEtUQWNjb3VudFNldHRpbmdzU2lnbmluTWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcXG4gIC8vIFByaXZhdGUgZnVuY3Rpb25zXFxuICB2YXIgaW5pdFNldHRpbmdzID0gZnVuY3Rpb24gaW5pdFNldHRpbmdzKCkge1xcbiAgICAvLyBVSSBlbGVtZW50c1xcbiAgICB2YXIgc2lnbkluTWFpbkVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X3NpZ25pbl9lbWFpbCcpO1xcbiAgICB2YXIgc2lnbkluRWRpdEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X3NpZ25pbl9lbWFpbF9lZGl0Jyk7XFxuICAgIHZhciBwYXNzd29yZE1haW5FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9zaWduaW5fcGFzc3dvcmQnKTtcXG4gICAgdmFyIHBhc3N3b3JkRWRpdEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X3NpZ25pbl9wYXNzd29yZF9lZGl0Jyk7IC8vIGJ1dHRvbiBlbGVtZW50c1xcblxcbiAgICB2YXIgc2lnbkluQ2hhbmdlRW1haWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3Rfc2lnbmluX2VtYWlsX2J1dHRvbicpO1xcbiAgICB2YXIgc2lnbkluQ2FuY2VsRW1haWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3Rfc2lnbmluX2NhbmNlbCcpO1xcbiAgICB2YXIgcGFzc3dvcmRDaGFuZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3Rfc2lnbmluX3Bhc3N3b3JkX2J1dHRvbicpO1xcbiAgICB2YXIgcGFzc3dvcmRDYW5jZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfcGFzc3dvcmRfY2FuY2VsJyk7IC8vIHRvZ2dsZSBVSVxcblxcbiAgICBzaWduSW5DaGFuZ2VFbWFpbC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcXG4gICAgICB0b2dnbGVDaGFuZ2VFbWFpbCgpO1xcbiAgICB9KTtcXG4gICAgc2lnbkluQ2FuY2VsRW1haWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgdG9nZ2xlQ2hhbmdlRW1haWwoKTtcXG4gICAgfSk7XFxuICAgIHBhc3N3b3JkQ2hhbmdlLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHRvZ2dsZUNoYW5nZVBhc3N3b3JkKCk7XFxuICAgIH0pO1xcbiAgICBwYXNzd29yZENhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcXG4gICAgICB0b2dnbGVDaGFuZ2VQYXNzd29yZCgpO1xcbiAgICB9KTtcXG5cXG4gICAgdmFyIHRvZ2dsZUNoYW5nZUVtYWlsID0gZnVuY3Rpb24gdG9nZ2xlQ2hhbmdlRW1haWwoKSB7XFxuICAgICAgc2lnbkluTWFpbkVsLmNsYXNzTGlzdC50b2dnbGUoJ2Qtbm9uZScpO1xcbiAgICAgIHNpZ25JbkNoYW5nZUVtYWlsLmNsYXNzTGlzdC50b2dnbGUoJ2Qtbm9uZScpO1xcbiAgICAgIHNpZ25JbkVkaXRFbC5jbGFzc0xpc3QudG9nZ2xlKCdkLW5vbmUnKTtcXG4gICAgfTtcXG5cXG4gICAgdmFyIHRvZ2dsZUNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gdG9nZ2xlQ2hhbmdlUGFzc3dvcmQoKSB7XFxuICAgICAgcGFzc3dvcmRNYWluRWwuY2xhc3NMaXN0LnRvZ2dsZSgnZC1ub25lJyk7XFxuICAgICAgcGFzc3dvcmRDaGFuZ2UuY2xhc3NMaXN0LnRvZ2dsZSgnZC1ub25lJyk7XFxuICAgICAgcGFzc3dvcmRFZGl0RWwuY2xhc3NMaXN0LnRvZ2dsZSgnZC1ub25lJyk7XFxuICAgIH07XFxuICB9O1xcblxcbiAgdmFyIGhhbmRsZUNoYW5nZUVtYWlsID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlRW1haWwoZSkge1xcbiAgICB2YXIgdmFsaWRhdGlvbjsgLy8gZm9ybSBlbGVtZW50c1xcblxcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9zaWduaW5fY2hhbmdlX2VtYWlsJyk7XFxuICAgIHZhciBzdWJtaXRCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9zaWduaW5fc3VibWl0Jyk7XFxuICAgIHZhbGlkYXRpb24gPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihmb3JtLCB7XFxuICAgICAgZmllbGRzOiB7XFxuICAgICAgICBlbWFpbDoge1xcbiAgICAgICAgICB2YWxpZGF0b3JzOiB7XFxuICAgICAgICAgICAgbm90RW1wdHk6IHtcXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdFbWFpbCBpcyByZXF1aXJlZCdcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGVtYWlsQWRkcmVzczoge1xcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSB2YWx1ZSBpcyBub3QgYSB2YWxpZCBlbWFpbCBhZGRyZXNzJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIHBhc3N3b3JkOiB7XFxuICAgICAgICAgIHZhbGlkYXRvcnM6IHtcXG4gICAgICAgICAgICBub3RFbXB0eToge1xcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIGlzIHJlcXVpcmVkJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH0sXFxuICAgICAgcGx1Z2luczoge1xcbiAgICAgICAgLy9MZWFybiBtb3JlOiBodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL2d1aWRlL3BsdWdpbnNcXG4gICAgICAgIHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcXG4gICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XFxuICAgICAgICAgIHJvd1NlbGVjdG9yOiAnLmZ2LXJvdydcXG4gICAgICAgIH0pXFxuICAgICAgfVxcbiAgICB9KTtcXG4gICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgdmFsaWRhdGlvbi52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ1ZhbGlkJykge1xcbiAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicsICdvbicpOyAvLyBEaXNhYmxlIGJ1dHRvbiB0byBhdm9pZCBtdWx0aXBsZSBjbGlja1xcblxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlOyAvLyBTZW5kIGFqYXggcmVxdWVzdFxcblxcbiAgICAgICAgICBheGlvcy5wb3N0KGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSwgbmV3IEZvcm1EYXRhKGZvcm0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgIC8vIFNob3cgbWVzc2FnZSBwb3B1cC4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXFxuICAgICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICAgIHRleHQ6IFxcXCJZb3VyIGVtYWlsIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkLlxcXCIsXFxuICAgICAgICAgICAgICBpY29uOiBcXFwic3VjY2Vzc1xcXCIsXFxuICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXFxcIk9LIVxcXCIsXFxuICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH0pW1xcXCJjYXRjaFxcXCJdKGZ1bmN0aW9uIChlcnJvcikge1xcbiAgICAgICAgICAgIHZhciBkYXRhTWVzc2FnZSA9IGVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZTtcXG4gICAgICAgICAgICB2YXIgZGF0YUVycm9ycyA9IGVycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3JzO1xcblxcbiAgICAgICAgICAgIGZvciAodmFyIGVycm9yc0tleSBpbiBkYXRhRXJyb3JzKSB7XFxuICAgICAgICAgICAgICBpZiAoIWRhdGFFcnJvcnMuaGFzT3duUHJvcGVydHkoZXJyb3JzS2V5KSkgY29udGludWU7XFxuICAgICAgICAgICAgICBkYXRhTWVzc2FnZSArPSBcXFwiXFxcXHJcXFxcblxcXCIgKyBkYXRhRXJyb3JzW2Vycm9yc0tleV07XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xcbiAgICAgICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICAgICAgdGV4dDogZGF0YU1lc3NhZ2UsXFxuICAgICAgICAgICAgICAgIGljb246IFxcXCJlcnJvclxcXCIsXFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPSyFcXFwiLFxcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFxcXCJidG4gYnRuLXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgLy8gYWx3YXlzIGV4ZWN1dGVkXFxuICAgICAgICAgICAgLy8gSGlkZSBsb2FkaW5nIGluZGljYXRpb25cXG4gICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpOyAvLyBFbmFibGUgYnV0dG9uXFxuXFxuICAgICAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICB0ZXh0OiBcXFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlxcXCIsXFxuICAgICAgICAgICAgaWNvbjogXFxcImVycm9yXFxcIixcXG4gICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPSyFcXFwiLFxcbiAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XFxuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGZvbnQtd2VpZ2h0LWJvbGQgYnRuLWxpZ2h0LXByaW1hcnlcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgdmFyIGhhbmRsZUNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlUGFzc3dvcmQoZSkge1xcbiAgICB2YXIgdmFsaWRhdGlvbjsgLy8gZm9ybSBlbGVtZW50c1xcblxcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9zaWduaW5fY2hhbmdlX3Bhc3N3b3JkJyk7XFxuICAgIHZhciBzdWJtaXRCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9wYXNzd29yZF9zdWJtaXQnKTtcXG4gICAgdmFsaWRhdGlvbiA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKGZvcm0sIHtcXG4gICAgICBmaWVsZHM6IHtcXG4gICAgICAgIGN1cnJlbnRfcGFzc3dvcmQ6IHtcXG4gICAgICAgICAgdmFsaWRhdG9yczoge1xcbiAgICAgICAgICAgIG5vdEVtcHR5OiB7XFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnQ3VycmVudCBQYXNzd29yZCBpcyByZXF1aXJlZCdcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBwYXNzd29yZDoge1xcbiAgICAgICAgICB2YWxpZGF0b3JzOiB7XFxuICAgICAgICAgICAgbm90RW1wdHk6IHtcXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdOZXcgUGFzc3dvcmQgaXMgcmVxdWlyZWQnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgcGFzc3dvcmRfY29uZmlybWF0aW9uOiB7XFxuICAgICAgICAgIHZhbGlkYXRvcnM6IHtcXG4gICAgICAgICAgICBub3RFbXB0eToge1xcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0NvbmZpcm0gUGFzc3dvcmQgaXMgcmVxdWlyZWQnXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBpZGVudGljYWw6IHtcXG4gICAgICAgICAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uIGNvbXBhcmUoKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVxcXCJwYXNzd29yZFxcXCJdJykudmFsdWU7XFxuICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBwYXNzd29yZCBhbmQgaXRzIGNvbmZpcm0gYXJlIG5vdCB0aGUgc2FtZSdcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9LFxcbiAgICAgIHBsdWdpbnM6IHtcXG4gICAgICAgIC8vTGVhcm4gbW9yZTogaHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9ndWlkZS9wbHVnaW5zXFxuICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXFxuICAgICAgICBib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xcbiAgICAgICAgICByb3dTZWxlY3RvcjogJy5mdi1yb3cnXFxuICAgICAgICB9KVxcbiAgICAgIH1cXG4gICAgfSk7XFxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgIHZhbGlkYXRpb24udmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcXG4gICAgICAgIGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xcbiAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicsICdvbicpOyAvLyBEaXNhYmxlIGJ1dHRvbiB0byBhdm9pZCBtdWx0aXBsZSBjbGlja1xcblxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlOyAvLyBTZW5kIGFqYXggcmVxdWVzdFxcblxcbiAgICAgICAgICBheGlvcy5wb3N0KGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSwgbmV3IEZvcm1EYXRhKGZvcm0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xcbiAgICAgICAgICAgIC8vIFNob3cgbWVzc2FnZSBwb3B1cC4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXFxuICAgICAgICAgICAgU3dhbC5maXJlKHtcXG4gICAgICAgICAgICAgIHRleHQ6IFxcXCJZb3VyIHBhc3N3b3JkIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXNldC5cXFwiLFxcbiAgICAgICAgICAgICAgaWNvbjogXFxcInN1Y2Nlc3NcXFwiLFxcbiAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFxcXCJPSyFcXFwiLFxcbiAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXFxcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9KVtcXFwiY2F0Y2hcXFwiXShmdW5jdGlvbiAoZXJyb3IpIHtcXG4gICAgICAgICAgICB2YXIgZGF0YU1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2U7XFxuICAgICAgICAgICAgdmFyIGRhdGFFcnJvcnMgPSBlcnJvci5yZXNwb25zZS5kYXRhLmVycm9ycztcXG5cXG4gICAgICAgICAgICBmb3IgKHZhciBlcnJvcnNLZXkgaW4gZGF0YUVycm9ycykge1xcbiAgICAgICAgICAgICAgaWYgKCFkYXRhRXJyb3JzLmhhc093blByb3BlcnR5KGVycm9yc0tleSkpIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgZGF0YU1lc3NhZ2UgKz0gXFxcIlxcXFxyXFxcXG5cXFwiICsgZGF0YUVycm9yc1tlcnJvcnNLZXldO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcXG4gICAgICAgICAgICAgIFN3YWwuZmlyZSh7XFxuICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFNZXNzYWdlLFxcbiAgICAgICAgICAgICAgICBpY29uOiBcXFwiZXJyb3JcXFwiLFxcbiAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcXFwiT0shXFxcIixcXG4gICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcXG4gICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIC8vIGFsd2F5cyBleGVjdXRlZFxcbiAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZyBpbmRpY2F0aW9uXFxuICAgICAgICAgICAgc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InKTsgLy8gRW5hYmxlIGJ1dHRvblxcblxcbiAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIFN3YWwuZmlyZSh7XFxuICAgICAgICAgICAgdGV4dDogXFxcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cXFwiLFxcbiAgICAgICAgICAgIGljb246IFxcXCJlcnJvclxcXCIsXFxuICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcXFwiT0shXFxcIixcXG4gICAgICAgICAgICBjdXN0b21DbGFzczoge1xcbiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXFxcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgfTsgLy8gUHVibGljIG1ldGhvZHNcXG5cXG5cXG4gIHJldHVybiB7XFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgaW5pdFNldHRpbmdzKCk7XFxuICAgICAgaGFuZGxlQ2hhbmdlRW1haWwoKTtcXG4gICAgICBoYW5kbGVDaGFuZ2VQYXNzd29yZCgpO1xcbiAgICB9XFxuICB9O1xcbn0oKTsgLy8gT24gZG9jdW1lbnQgcmVhZHlcXG5cXG5cXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcXG4gIEtUQWNjb3VudFNldHRpbmdzU2lnbmluTWV0aG9kcy5pbml0KCk7XFxufSk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5eVpYTnZkWEpqWlhNdllYTnpaWFJ6TDJWNGRHVnVaR1ZrTDJwekwyTjFjM1J2YlM5aFkyTnZkVzUwTDNObGRIUnBibWR6TDNOcFoyNXBiaTF0WlhSb2IyUnpMbXB6TG1weklpd2liV0Z3Y0dsdVozTWlPaUpEUVVWQk96dEJRVU5CTEVsQlFVbEJMRGhDUVVFNFFpeEhRVUZITEZsQlFWazdRVUZETjBNN1FVRkRRU3hOUVVGSlF5eFpRVUZaTEVkQlFVY3NVMEZCWmtFc1dVRkJaU3hIUVVGWk8wRkJSVE5DTzBGQlEwRXNVVUZCU1VNc1dVRkJXU3hIUVVGSFF5eFJRVUZSTEVOQlFVTkRMR05CUVZRc1EwRkJkMElzYVVKQlFYaENMRU5CUVc1Q08wRkJRMEVzVVVGQlNVTXNXVUZCV1N4SFFVRkhSaXhSUVVGUkxFTkJRVU5ETEdOQlFWUXNRMEZCZDBJc2MwSkJRWGhDTEVOQlFXNUNPMEZCUTBFc1VVRkJTVVVzWTBGQll5eEhRVUZIU0N4UlFVRlJMRU5CUVVORExHTkJRVlFzUTBGQmQwSXNiMEpCUVhoQ0xFTkJRWEpDTzBGQlEwRXNVVUZCU1Vjc1kwRkJZeXhIUVVGSFNpeFJRVUZSTEVOQlFVTkRMR05CUVZRc1EwRkJkMElzZVVKQlFYaENMRU5CUVhKQ0xFTkJUakpDTEVOQlVUTkNPenRCUVVOQkxGRkJRVWxKTEdsQ1FVRnBRaXhIUVVGSFRDeFJRVUZSTEVOQlFVTkRMR05CUVZRc1EwRkJkMElzZDBKQlFYaENMRU5CUVhoQ08wRkJRMEVzVVVGQlNVc3NhVUpCUVdsQ0xFZEJRVWRPTEZGQlFWRXNRMEZCUTBNc1kwRkJWQ3hEUVVGM1FpeHJRa0ZCZUVJc1EwRkJlRUk3UVVGRFFTeFJRVUZKVFN4alFVRmpMRWRCUVVkUUxGRkJRVkVzUTBGQlEwTXNZMEZCVkN4RFFVRjNRaXd5UWtGQmVFSXNRMEZCY2tJN1FVRkRRU3hSUVVGSlR5eGpRVUZqTEVkQlFVZFNMRkZCUVZFc1EwRkJRME1zWTBGQlZDeERRVUYzUWl4dlFrRkJlRUlzUTBGQmNrSXNRMEZhTWtJc1EwRmpNMEk3TzBGQlEwRkpMRWxCUVVGQkxHbENRVUZwUWl4RFFVRkRTU3hoUVVGc1FpeERRVUZuUXl4UlFVRm9ReXhGUVVFd1EwTXNaMEpCUVRGRExFTkJRVEpFTEU5QlFUTkVMRVZCUVc5RkxGbEJRVms3UVVGRE5VVkRMRTFCUVVGQkxHbENRVUZwUWp0QlFVTndRaXhMUVVaRU8wRkJTVUZNTEVsQlFVRkJMR2xDUVVGcFFpeERRVUZEU1N4blFrRkJiRUlzUTBGQmJVTXNUMEZCYmtNc1JVRkJORU1zV1VGQldUdEJRVU53UkVNc1RVRkJRVUVzYVVKQlFXbENPMEZCUTNCQ0xFdEJSa1E3UVVGSlFVb3NTVUZCUVVFc1kwRkJZeXhEUVVGRFJTeGhRVUZtTEVOQlFUWkNMRkZCUVRkQ0xFVkJRWFZEUXl4blFrRkJka01zUTBGQmQwUXNUMEZCZUVRc1JVRkJhVVVzV1VGQldUdEJRVU42UlVVc1RVRkJRVUVzYjBKQlFXOUNPMEZCUTNaQ0xFdEJSa1E3UVVGSlFVb3NTVUZCUVVFc1kwRkJZeXhEUVVGRFJTeG5Ra0ZCWml4RFFVRm5ReXhQUVVGb1F5eEZRVUY1UXl4WlFVRlpPMEZCUTJwRVJTeE5RVUZCUVN4dlFrRkJiMEk3UVVGRGRrSXNTMEZHUkRzN1FVRkpRU3hSUVVGSlJDeHBRa0ZCYVVJc1IwRkJSeXhUUVVGd1FrRXNhVUpCUVc5Q0xFZEJRVms3UVVGRGFFTmFMRTFCUVVGQkxGbEJRVmtzUTBGQlEyTXNVMEZCWWl4RFFVRjFRa01zVFVGQmRrSXNRMEZCT0VJc1VVRkJPVUk3UVVGRFFWUXNUVUZCUVVFc2FVSkJRV2xDTEVOQlFVTlJMRk5CUVd4Q0xFTkJRVFJDUXl4TlFVRTFRaXhEUVVGdFF5eFJRVUZ1UXp0QlFVTkJXaXhOUVVGQlFTeFpRVUZaTEVOQlFVTlhMRk5CUVdJc1EwRkJkVUpETEUxQlFYWkNMRU5CUVRoQ0xGRkJRVGxDTzBGQlEwZ3NTMEZLUkRzN1FVRk5RU3hSUVVGSlJpeHZRa0ZCYjBJc1IwRkJSeXhUUVVGMlFrRXNiMEpCUVhWQ0xFZEJRVms3UVVGRGJrTlVMRTFCUVVGQkxHTkJRV01zUTBGQlExVXNVMEZCWml4RFFVRjVRa01zVFVGQmVrSXNRMEZCWjBNc1VVRkJhRU03UVVGRFFWQXNUVUZCUVVFc1kwRkJZeXhEUVVGRFRTeFRRVUZtTEVOQlFYbENReXhOUVVGNlFpeERRVUZuUXl4UlFVRm9RenRCUVVOQlZpeE5RVUZCUVN4alFVRmpMRU5CUVVOVExGTkJRV1lzUTBGQmVVSkRMRTFCUVhwQ0xFTkJRV2RETEZGQlFXaERPMEZCUTBnc1MwRktSRHRCUVV0SUxFZEJNVU5FT3p0QlFUUkRRU3hOUVVGSlF5eHBRa0ZCYVVJc1IwRkJSeXhUUVVGd1FrRXNhVUpCUVc5Q0xFTkJRVlZETEVOQlFWWXNSVUZCWVR0QlFVTnFReXhSUVVGSlF5eFZRVUZLTEVOQlJHbERMRU5CUjJwRE96dEJRVU5CTEZGQlFVbERMRWxCUVVrc1IwRkJSMnhDTEZGQlFWRXNRMEZCUTBNc1kwRkJWQ3hEUVVGM1FpeDNRa0ZCZUVJc1EwRkJXRHRCUVVOQkxGRkJRVWxyUWl4WlFVRlpMRWRCUVVkRUxFbEJRVWtzUTBGQlExUXNZVUZCVEN4RFFVRnRRaXh0UWtGQmJrSXNRMEZCYmtJN1FVRkZRVkVzU1VGQlFVRXNWVUZCVlN4SFFVRkhSeXhqUVVGakxFTkJRVU5ETEdOQlFXWXNRMEZEVkVnc1NVRkVVeXhGUVVWVU8wRkJRMGxKTEUxQlFVRkJMRTFCUVUwc1JVRkJSVHRCUVVOS1F5eFJRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRTRU1zVlVGQlFVRXNWVUZCVlN4RlFVRkZPMEZCUTFKRExGbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVTk9ReXhqUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFU0N4aFFVUkdPMEZCU1ZKRExGbEJRVUZCTEZsQlFWa3NSVUZCUlR0QlFVTldSQ3hqUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFUXp0QlFVcE9PMEZCUkZRc1UwRkVTRHRCUVZsS1JTeFJRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRkRUa29zVlVGQlFVRXNWVUZCVlN4RlFVRkZPMEZCUTFKRExGbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVTk9ReXhqUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFU0R0QlFVUkdPMEZCUkU0N1FVRmFUaXhQUVVSYU8wRkJjMEpKUnl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJUdEJRVU5RUXl4UlFVRkJRU3hQUVVGUExFVkJRVVVzU1VGQlNWWXNZMEZCWXl4RFFVRkRVeXhQUVVGbUxFTkJRWFZDUlN4UFFVRXpRaXhGUVVSS08wRkJSVXhETEZGQlFVRkJMRk5CUVZNc1JVRkJSU3hKUVVGSldpeGpRVUZqTEVOQlFVTlRMRTlCUVdZc1EwRkJkVUpKTEZWQlFUTkNMRU5CUVhORE8wRkJRemREUXl4VlFVRkJRU3hYUVVGWExFVkJRVVU3UVVGRVowTXNVMEZCZEVNN1FVRkdUanRCUVhSQ1lpeExRVVpUTEVOQlFXSTdRVUZwUTBGbUxFbEJRVUZCTEZsQlFWa3NRMEZCUTFRc1owSkJRV0lzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlZVMHNRMEZCVml4RlFVRmhPMEZCUTJoRVFTeE5RVUZCUVN4RFFVRkRMRU5CUVVOdFFpeGpRVUZHTzBGQlJVRnNRaXhOUVVGQlFTeFZRVUZWTEVOQlFVTnRRaXhSUVVGWUxFZEJRWE5DUXl4SlFVRjBRaXhEUVVFeVFpeFZRVUZWUXl4TlFVRldMRVZCUVd0Q08wRkJRM3BETEZsQlFVbEJMRTFCUVUwc1MwRkJTeXhQUVVGbUxFVkJRWGRDTzBGQlJYQkNPMEZCUTBGdVFpeFZRVUZCUVN4WlFVRlpMRU5CUVVOdlFpeFpRVUZpTEVOQlFUQkNMRzFDUVVFeFFpeEZRVUVyUXl4SlFVRXZReXhGUVVodlFpeERRVXR3UWpzN1FVRkRRWEJDTEZWQlFVRkJMRmxCUVZrc1EwRkJRM0ZDTEZGQlFXSXNSMEZCZDBJc1NVRkJlRUlzUTBGT2IwSXNRMEZSY0VJN08wRkJRMEZETEZWQlFVRkJMRXRCUVVzc1EwRkJRME1zU1VGQlRpeERRVUZYZUVJc1NVRkJTU3hEUVVGRGVVSXNXVUZCVEN4RFFVRnJRaXhSUVVGc1FpeERRVUZZTEVWQlFYZERMRWxCUVVsRExGRkJRVW9zUTBGQllURkNMRWxCUVdJc1EwRkJlRU1zUlVGRFMyMUNMRWxCUkV3c1EwRkRWU3hWUVVGVlVTeFJRVUZXTEVWQlFXOUNPMEZCUTNSQ08wRkJRMEZETEZsQlFVRkJMRWxCUVVrc1EwRkJRME1zU1VGQlRDeERRVUZWTzBGQlEwNURMR05CUVVGQkxFbEJRVWtzUlVGQlJTd3lRMEZFUVR0QlFVVk9ReXhqUVVGQlFTeEpRVUZKTEVWQlFVVXNVMEZHUVR0QlFVZE9ReXhqUVVGQlFTeGpRVUZqTEVWQlFVVXNTMEZJVmp0QlFVbE9ReXhqUVVGQlFTeHBRa0ZCYVVJc1JVRkJSU3hoUVVwaU8wRkJTMDVETEdOQlFVRkJMRmRCUVZjc1JVRkJSVHRCUVVOVVF5eG5Ra0ZCUVVFc1lVRkJZU3hGUVVGRk8wRkJSRTQ3UVVGTVVDeGhRVUZXTzBGQlUwZ3NWMEZhVEN4WFFXRlhMRlZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEY0VJc1owSkJRVWxETEZkQlFWY3NSMEZCUjBRc1MwRkJTeXhEUVVGRFZDeFJRVUZPTEVOQlFXVlhMRWxCUVdZc1EwRkJiMEk1UWl4UFFVRjBRenRCUVVOQkxHZENRVUZKSzBJc1ZVRkJWU3hIUVVGSFNDeExRVUZMTEVOQlFVTlVMRkZCUVU0c1EwRkJaVmNzU1VGQlppeERRVUZ2UWtVc1RVRkJja003TzBGQlJVRXNhVUpCUVVzc1NVRkJUVU1zVTBGQldDeEpRVUYzUWtZc1ZVRkJlRUlzUlVGQmIwTTdRVUZEYUVNc2EwSkJRVWtzUTBGQlEwRXNWVUZCVlN4RFFVRkRSeXhqUVVGWUxFTkJRVEJDUkN4VFFVRXhRaXhEUVVGTUxFVkJRVEpETzBGQlF6TkRTaXhqUVVGQlFTeFhRVUZYTEVsQlFVa3NVMEZCVTBVc1ZVRkJWU3hEUVVGRFJTeFRRVUZFTEVOQlFXeERPMEZCUTBnN08wRkJSVVFzWjBKQlFVbE1MRXRCUVVzc1EwRkJRMVFzVVVGQlZpeEZRVUZ2UWp0QlFVTm9Ra01zWTBGQlFVRXNTVUZCU1N4RFFVRkRReXhKUVVGTUxFTkJRVlU3UVVGRFRrTXNaMEpCUVVGQkxFbEJRVWtzUlVGQlJVOHNWMEZFUVR0QlFVVk9UaXhuUWtGQlFVRXNTVUZCU1N4RlFVRkZMRTlCUmtFN1FVRkhUa01zWjBKQlFVRkJMR05CUVdNc1JVRkJSU3hMUVVoV08wRkJTVTVETEdkQ1FVRkJRU3hwUWtGQmFVSXNSVUZCUlN4aFFVcGlPMEZCUzA1RExHZENRVUZCUVN4WFFVRlhMRVZCUVVVN1FVRkRWRU1zYTBKQlFVRkJMR0ZCUVdFc1JVRkJSVHRCUVVST08wRkJURkFzWlVGQlZqdEJRVk5JTzBGQlEwb3NWMEZxUTB3c1JVRnJRMHRvUWl4SlFXeERUQ3hEUVd0RFZTeFpRVUZaTzBGQlEyUTdRVUZEUVR0QlFVTkJiRUlzV1VGQlFVRXNXVUZCV1N4RFFVRkRNRU1zWlVGQllpeERRVUUyUWl4dFFrRkJOMElzUlVGSVl5eERRVXRrT3p0QlFVTkJNVU1zV1VGQlFVRXNXVUZCV1N4RFFVRkRjVUlzVVVGQllpeEhRVUYzUWl4TFFVRjRRanRCUVVOSUxGZEJla05NTzBGQk1rTklMRk5CY0VSRUxFMUJiMFJQTzBGQlEwaE5MRlZCUVVGQkxFbEJRVWtzUTBGQlEwTXNTVUZCVEN4RFFVRlZPMEZCUTA1RExGbEJRVUZCTEVsQlFVa3NSVUZCUlN4eFJVRkVRVHRCUVVWT1F5eFpRVUZCUVN4SlFVRkpMRVZCUVVVc1QwRkdRVHRCUVVkT1F5eFpRVUZCUVN4alFVRmpMRVZCUVVVc1MwRklWanRCUVVsT1F5eFpRVUZCUVN4cFFrRkJhVUlzUlVGQlJTeGhRVXBpTzBGQlMwNURMRmxCUVVGQkxGZEJRVmNzUlVGQlJUdEJRVU5VUXl4alFVRkJRU3hoUVVGaExFVkJRVVU3UVVGRVRqdEJRVXhRTEZkQlFWWTdRVUZUU0R0QlFVTktMRTlCYUVWRU8wRkJhVVZJTEV0QmNFVkVPMEZCY1VWSUxFZEJOMGRFT3p0QlFTdEhRU3hOUVVGSlV5eHZRa0ZCYjBJc1IwRkJSeXhUUVVGMlFrRXNiMEpCUVhWQ0xFTkJRVlU1UXl4RFFVRldMRVZCUVdFN1FVRkRjRU1zVVVGQlNVTXNWVUZCU2l4RFFVUnZReXhEUVVkd1F6czdRVUZEUVN4UlFVRkpReXhKUVVGSkxFZEJRVWRzUWl4UlFVRlJMRU5CUVVORExHTkJRVlFzUTBGQmQwSXNNa0pCUVhoQ0xFTkJRVmc3UVVGRFFTeFJRVUZKYTBJc1dVRkJXU3hIUVVGSFJDeEpRVUZKTEVOQlFVTlVMR0ZCUVV3c1EwRkJiVUlzY1VKQlFXNUNMRU5CUVc1Q08wRkJSVUZSTEVsQlFVRkJMRlZCUVZVc1IwRkJSMGNzWTBGQll5eERRVUZEUXl4alFVRm1MRU5CUTFSSUxFbEJSRk1zUlVGRlZEdEJRVU5KU1N4TlFVRkJRU3hOUVVGTkxFVkJRVVU3UVVGRFNubERMRkZCUVVGQkxHZENRVUZuUWl4RlFVRkZPMEZCUTJSMlF5eFZRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRkRVa01zV1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUTA1RExHTkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVUklPMEZCUkVZN1FVRkVSU3hUUVVSa08wRkJVMHBGTEZGQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVOT1NpeFZRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRkRVa01zV1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUTA1RExHTkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVUklPMEZCUkVZN1FVRkVUaXhUUVZST08wRkJhVUpLYzBNc1VVRkJRVUVzY1VKQlFYRkNMRVZCUVVVN1FVRkRia0o0UXl4VlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGRFVrTXNXVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRMDVETEdOQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVSSUxHRkJSRVk3UVVGSlVuVkRMRmxCUVVGQkxGTkJRVk1zUlVGQlJUdEJRVU5RUXl4alFVRkJRU3hQUVVGUExFVkJRVVVzYlVKQlFWazdRVUZEYWtJc2RVSkJRVTlvUkN4SlFVRkpMRU5CUVVOVUxHRkJRVXdzUTBGQmJVSXNiVUpCUVc1Q0xFVkJRWGRETUVRc1MwRkJMME03UVVGRFNDeGxRVWhOTzBGQlNWQjZReXhqUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZLUmp0QlFVcElPMEZCUkU4N1FVRnFRbTVDTEU5QlJGbzdRVUZwUTBsSExFMUJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRkZPMEZCUTFCRExGRkJRVUZCTEU5QlFVOHNSVUZCUlN4SlFVRkpWaXhqUVVGakxFTkJRVU5UTEU5QlFXWXNRMEZCZFVKRkxFOUJRVE5DTEVWQlJFbzdRVUZGVEVNc1VVRkJRVUVzVTBGQlV5eEZRVUZGTEVsQlFVbGFMR05CUVdNc1EwRkJRMU1zVDBGQlppeERRVUYxUWtrc1ZVRkJNMElzUTBGQmMwTTdRVUZETjBORExGVkJRVUZCTEZkQlFWY3NSVUZCUlR0QlFVUm5ReXhUUVVGMFF6dEJRVVpPTzBGQmFrTmlMRXRCUmxNc1EwRkJZanRCUVRSRFFXWXNTVUZCUVVFc1dVRkJXU3hEUVVGRFZDeG5Ra0ZCWWl4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VlFVRlZUU3hEUVVGV0xFVkJRV0U3UVVGRGFFUkJMRTFCUVVGQkxFTkJRVU1zUTBGQlEyMUNMR05CUVVZN1FVRkZRV3hDTEUxQlFVRkJMRlZCUVZVc1EwRkJRMjFDTEZGQlFWZ3NSMEZCYzBKRExFbEJRWFJDTEVOQlFUSkNMRlZCUVZWRExFMUJRVllzUlVGQmEwSTdRVUZEZWtNc1dVRkJTVUVzVFVGQlRTeEpRVUZKTEU5QlFXUXNSVUZCZFVJN1FVRkZia0k3UVVGRFFXNUNMRlZCUVVGQkxGbEJRVmtzUTBGQlEyOUNMRmxCUVdJc1EwRkJNRUlzYlVKQlFURkNMRVZCUVN0RExFbEJRUzlETEVWQlNHMUNMRU5CUzI1Q096dEJRVU5CY0VJc1ZVRkJRVUVzV1VGQldTeERRVUZEY1VJc1VVRkJZaXhIUVVGM1FpeEpRVUY0UWl4RFFVNXRRaXhEUVZGdVFqczdRVUZEUVVNc1ZVRkJRVUVzUzBGQlN5eERRVUZEUXl4SlFVRk9MRU5CUVZkNFFpeEpRVUZKTEVOQlFVTjVRaXhaUVVGTUxFTkJRV3RDTEZGQlFXeENMRU5CUVZnc1JVRkJkME1zU1VGQlNVTXNVVUZCU2l4RFFVRmhNVUlzU1VGQllpeERRVUY0UXl4RlFVTkxiVUlzU1VGRVRDeERRVU5WTEZWQlFWVlJMRkZCUVZZc1JVRkJiMEk3UVVGRGRFSTdRVUZEUVVNc1dVRkJRVUVzU1VGQlNTeERRVUZEUXl4SlFVRk1MRU5CUVZVN1FVRkRUa01zWTBGQlFVRXNTVUZCU1N4RlFVRkZMRFJEUVVSQk8wRkJSVTVETEdOQlFVRkJMRWxCUVVrc1JVRkJSU3hUUVVaQk8wRkJSMDVETEdOQlFVRkJMR05CUVdNc1JVRkJSU3hMUVVoV08wRkJTVTVETEdOQlFVRkJMR2xDUVVGcFFpeEZRVUZGTEdGQlNtSTdRVUZMVGtNc1kwRkJRVUVzVjBGQlZ5eEZRVUZGTzBGQlExUkRMR2RDUVVGQlFTeGhRVUZoTEVWQlFVVTdRVUZFVGp0QlFVeFFMR0ZCUVZZN1FVRlRTQ3hYUVZwTUxGZEJZVmNzVlVGQlZVTXNTMEZCVml4RlFVRnBRanRCUVVOd1FpeG5Ra0ZCU1VNc1YwRkJWeXhIUVVGSFJDeExRVUZMTEVOQlFVTlVMRkZCUVU0c1EwRkJaVmNzU1VGQlppeERRVUZ2UWpsQ0xFOUJRWFJETzBGQlEwRXNaMEpCUVVrclFpeFZRVUZWTEVkQlFVZElMRXRCUVVzc1EwRkJRMVFzVVVGQlRpeERRVUZsVnl4SlFVRm1MRU5CUVc5Q1JTeE5RVUZ5UXpzN1FVRkZRU3hwUWtGQlN5eEpRVUZOUXl4VFFVRllMRWxCUVhkQ1JpeFZRVUY0UWl4RlFVRnZRenRCUVVOb1F5eHJRa0ZCU1N4RFFVRkRRU3hWUVVGVkxFTkJRVU5ITEdOQlFWZ3NRMEZCTUVKRUxGTkJRVEZDTEVOQlFVd3NSVUZCTWtNN1FVRkRNME5LTEdOQlFVRkJMRmRCUVZjc1NVRkJTU3hUUVVGVFJTeFZRVUZWTEVOQlFVTkZMRk5CUVVRc1EwRkJiRU03UVVGRFNEczdRVUZGUkN4blFrRkJTVXdzUzBGQlN5eERRVUZEVkN4UlFVRldMRVZCUVc5Q08wRkJRMmhDUXl4alFVRkJRU3hKUVVGSkxFTkJRVU5ETEVsQlFVd3NRMEZCVlR0QlFVTk9ReXhuUWtGQlFVRXNTVUZCU1N4RlFVRkZUeXhYUVVSQk8wRkJSVTVPTEdkQ1FVRkJRU3hKUVVGSkxFVkJRVVVzVDBGR1FUdEJRVWRPUXl4blFrRkJRVUVzWTBGQll5eEZRVUZGTEV0QlNGWTdRVUZKVGtNc1owSkJRVUZCTEdsQ1FVRnBRaXhGUVVGRkxHRkJTbUk3UVVGTFRrTXNaMEpCUVVGQkxGZEJRVmNzUlVGQlJUdEJRVU5VUXl4clFrRkJRVUVzWVVGQllTeEZRVUZGTzBGQlJFNDdRVUZNVUN4bFFVRldPMEZCVTBnN1FVRkRTaXhYUVdwRFRDeEZRV3REUzJoQ0xFbEJiRU5NTEVOQmEwTlZMRmxCUVZrN1FVRkRaRHRCUVVOQk8wRkJRMEZzUWl4WlFVRkJRU3haUVVGWkxFTkJRVU13UXl4bFFVRmlMRU5CUVRaQ0xHMUNRVUUzUWl4RlFVaGpMRU5CUzJRN08wRkJRMEV4UXl4WlFVRkJRU3haUVVGWkxFTkJRVU54UWl4UlFVRmlMRWRCUVhkQ0xFdEJRWGhDTzBGQlEwZ3NWMEY2UTB3N1FVRXlRMGdzVTBGd1JFUXNUVUZ2UkU4N1FVRkRTRTBzVlVGQlFVRXNTVUZCU1N4RFFVRkRReXhKUVVGTUxFTkJRVlU3UVVGRFRrTXNXVUZCUVVFc1NVRkJTU3hGUVVGRkxIRkZRVVJCTzBGQlJVNURMRmxCUVVGQkxFbEJRVWtzUlVGQlJTeFBRVVpCTzBGQlIwNURMRmxCUVVGQkxHTkJRV01zUlVGQlJTeExRVWhXTzBGQlNVNURMRmxCUVVGQkxHbENRVUZwUWl4RlFVRkZMR0ZCU21JN1FVRkxUa01zV1VGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFSRExHTkJRVUZCTEdGQlFXRXNSVUZCUlR0QlFVUk9PMEZCVEZBc1YwRkJWanRCUVZOSU8wRkJRMG9zVDBGb1JVUTdRVUZwUlVnc1MwRndSVVE3UVVGeFJVZ3NSMEY0U0VRc1EwRTNTalpETEVOQmRWSTNRenM3TzBGQlEwRXNVMEZCVHp0QlFVTklaU3hKUVVGQlFTeEpRVUZKTEVWQlFVVXNaMEpCUVZrN1FVRkRaSFJGTEUxQlFVRkJMRmxCUVZrN1FVRkRXbWxDTEUxQlFVRkJMR2xDUVVGcFFqdEJRVU5xUWl0RExFMUJRVUZCTEc5Q1FVRnZRanRCUVVOMlFqdEJRVXhGTEVkQlFWQTdRVUZQU0N4RFFTOVNiME1zUlVGQmNrTXNReXhEUVdsVFFUczdPMEZCUTBGUExFMUJRVTBzUTBGQlEwTXNhMEpCUVZBc1EwRkJNRUlzV1VGQldUdEJRVU5zUTNwRkxFVkJRVUZCTERoQ1FVRTRRaXhEUVVGRGRVVXNTVUZCTDBJN1FVRkRTQ3hEUVVaRUlpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2THk0dmNtVnpiM1Z5WTJWekwyRnpjMlYwY3k5bGVIUmxibVJsWkM5cWN5OWpkWE4wYjIwdllXTmpiM1Z1ZEM5elpYUjBhVzVuY3k5emFXZHVhVzR0YldWMGFHOWtjeTVxY3o4NE1qbGpJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx3aWRYTmxJSE4wY21samRGd2lPMXh5WEc1Y2NseHVMeThnUTJ4aGMzTWdaR1ZtYVc1cGRHbHZibHh5WEc1MllYSWdTMVJCWTJOdmRXNTBVMlYwZEdsdVozTlRhV2R1YVc1TlpYUm9iMlJ6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdMeThnVUhKcGRtRjBaU0JtZFc1amRHbHZibk5jY2x4dUlDQWdJSFpoY2lCcGJtbDBVMlYwZEdsdVozTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklGVkpJR1ZzWlcxbGJuUnpYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITnBaMjVKYmsxaGFXNUZiQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RyZEY5emFXZHVhVzVmWlcxaGFXd25LVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMmxuYmtsdVJXUnBkRVZzSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJ0MFgzTnBaMjVwYmw5bGJXRnBiRjlsWkdsMEp5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjM04zYjNKa1RXRnBia1ZzSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJ0MFgzTnBaMjVwYmw5d1lYTnpkMjl5WkNjcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCd1lYTnpkMjl5WkVWa2FYUkZiQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RyZEY5emFXZHVhVzVmY0dGemMzZHZjbVJmWldScGRDY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJpZFhSMGIyNGdaV3hsYldWdWRITmNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MybG5ia2x1UTJoaGJtZGxSVzFoYVd3Z1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmEzUmZjMmxuYm1sdVgyVnRZV2xzWDJKMWRIUnZiaWNwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVdkdVNXNURZVzVqWld4RmJXRnBiQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RyZEY5emFXZHVhVzVmWTJGdVkyVnNKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEJoYzNOM2IzSmtRMmhoYm1kbElEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oydDBYM05wWjI1cGJsOXdZWE56ZDI5eVpGOWlkWFIwYjI0bktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnpjM2R2Y21SRFlXNWpaV3dnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYTNSZmNHRnpjM2R2Y21SZlkyRnVZMlZzSnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklIUnZaMmRzWlNCVlNWeHlYRzRnSUNBZ0lDQWdJSE5wWjI1SmJrTm9ZVzVuWlVWdFlXbHNMbkYxWlhKNVUyVnNaV04wYjNJb0oySjFkSFJ2YmljcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMmRuYkdWRGFHRnVaMlZGYldGcGJDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemFXZHVTVzVEWVc1alpXeEZiV0ZwYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOW5aMnhsUTJoaGJtZGxSVzFoYVd3b0tUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY0dGemMzZHZjbVJEYUdGdVoyVXVjWFZsY25sVFpXeGxZM1J2Y2lnblluVjBkRzl1SnlrdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZaMmRzWlVOb1lXNW5aVkJoYzNOM2IzSmtLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIQmhjM04zYjNKa1EyRnVZMlZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIyZG5iR1ZEYUdGdVoyVlFZWE56ZDI5eVpDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdkRzluWjJ4bFEyaGhibWRsUlcxaGFXd2dQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOcFoyNUpiazFoYVc1RmJDNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZGtMVzV2Ym1VbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MybG5ia2x1UTJoaGJtZGxSVzFoYVd3dVkyeGhjM05NYVhOMExuUnZaMmRzWlNnblpDMXViMjVsSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOcFoyNUpia1ZrYVhSRmJDNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZGtMVzV2Ym1VbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCMGIyZG5iR1ZEYUdGdVoyVlFZWE56ZDI5eVpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGemMzZHZjbVJOWVdsdVJXd3VZMnhoYzNOTWFYTjBMblJ2WjJkc1pTZ25aQzF1YjI1bEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjM04zYjNKa1EyaGhibWRsTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvSjJRdGJtOXVaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhOemQyOXlaRVZrYVhSRmJDNWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZGtMVzV2Ym1VbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnlJR2hoYm1Sc1pVTm9ZVzVuWlVWdFlXbHNJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEdsdmJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdabTl5YlNCbGJHVnRaVzUwYzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJtYjNKdElEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oydDBYM05wWjI1cGJsOWphR0Z1WjJWZlpXMWhhV3duS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYzNWaWJXbDBRblYwZEc5dUlEMGdabTl5YlM1eGRXVnllVk5sYkdWamRHOXlLQ2NqYTNSZmMybG5ibWx1WDNOMVltMXBkQ2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVd4cFpHRjBhVzl1SUQwZ1JtOXliVlpoYkdsa1lYUnBiMjR1Wm05eWJWWmhiR2xrWVhScGIyNG9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacFpXeGtjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z0WVdsc09pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkdsa1lYUnZjbk02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZEVWdGNIUjVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjBWdFlXbHNJR2x6SUhKbGNYVnBjbVZrSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnRZV2xzUVdSa2NtVnpjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUNkVWFHVWdkbUZzZFdVZ2FYTWdibTkwSUdFZ2RtRnNhV1FnWlcxaGFXd2dZV1JrY21WemN5ZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjM04zYjNKa09pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkdsa1lYUnZjbk02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2ZEVWdGNIUjVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nSjFCaGMzTjNiM0prSUdseklISmxjWFZwY21Wa0oxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JIVm5hVzV6T2lCN0lDOHZUR1ZoY200Z2JXOXlaVG9nYUhSMGNITTZMeTltYjNKdGRtRnNhV1JoZEdsdmJpNXBieTluZFdsa1pTOXdiSFZuYVc1elhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKcFoyZGxjam9nYm1WM0lFWnZjbTFXWVd4cFpHRjBhVzl1TG5Cc2RXZHBibk11VkhKcFoyZGxjaWdwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2YjNSemRISmhjRG9nYm1WM0lFWnZjbTFXWVd4cFpHRjBhVzl1TG5Cc2RXZHBibk11UW05dmRITjBjbUZ3TlNoN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZkMU5sYkdWamRHOXlPaUFuTG1aMkxYSnZkeWRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2MzVmliV2wwUW5WMGRHOXVMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNhV1JoZEdsdmJpNTJZV3hwWkdGMFpTZ3BMblJvWlc0b1puVnVZM1JwYjI0Z0tITjBZWFIxY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYUjFjeUE5UFQwZ0oxWmhiR2xrSnlrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYUc5M0lHeHZZV1JwYm1jZ2FXNWthV05oZEdsdmJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMVltMXBkRUoxZEhSdmJpNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRhM1F0YVc1a2FXTmhkRzl5Snl3Z0oyOXVKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFUnBjMkZpYkdVZ1luVjBkRzl1SUhSdklHRjJiMmxrSUcxMWJIUnBjR3hsSUdOc2FXTnJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmliV2wwUW5WMGRHOXVMbVJwYzJGaWJHVmtJRDBnZEhKMVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJWdVpDQmhhbUY0SUhKbGNYVmxjM1JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhlR2x2Y3k1d2IzTjBLR1p2Y20wdVoyVjBRWFIwY21saWRYUmxLQ2RoWTNScGIyNG5LU3dnYm1WM0lFWnZjbTFFWVhSaEtHWnZjbTBwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaUFvY21WemNHOXVjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOb2IzY2diV1Z6YzJGblpTQndiM0IxY0M0Z1JtOXlJRzF2Y21VZ2FXNW1ieUJqYUdWamF5QjBhR1VnY0d4MVoybHVKM01nYjJabWFXTnBZV3dnWkc5amRXMWxiblJoZEdsdmJqb2dhSFIwY0hNNkx5OXpkMlZsZEdGc1pYSjBNaTVuYVhSb2RXSXVhVzh2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRkMkZzTG1acGNtVW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUhRNklGd2lXVzkxY2lCbGJXRnBiQ0JvWVhNZ1ltVmxiaUJ6ZFdOalpYTnpablZzYkhrZ1kyaGhibWRsWkM1Y0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1T2lCY0luTjFZMk5sYzNOY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWFIwYjI1elUzUjViR2x1WnpvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJsUmxlSFE2SUZ3aVQyc3NJR2R2ZENCcGRDRmNJaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhOMGIyMURiR0Z6Y3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFYSnRRblYwZEc5dU9pQmNJbUowYmlCbWIyNTBMWGRsYVdkb2RDMWliMnhrSUdKMGJpMXNhV2RvZEMxd2NtbHRZWEo1WENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU5oZEdOb0tHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZOWlhOellXZGxJRDBnWlhKeWIzSXVjbVZ6Y0c5dWMyVXVaR0YwWVM1dFpYTnpZV2RsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdSaGRHRkZjbkp2Y25NZ1BTQmxjbkp2Y2k1eVpYTndiMjV6WlM1a1lYUmhMbVZ5Y205eWN6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR1Z5Y205eWMwdGxlU0JwYmlCa1lYUmhSWEp5YjNKektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGa1lYUmhSWEp5YjNKekxtaGhjMDkzYmxCeWIzQmxjblI1S0dWeWNtOXljMHRsZVNrcElHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZOWlhOellXZGxJQ3M5SUZ3aVhGeHlYRnh1WENJZ0t5QmtZWFJoUlhKeWIzSnpXMlZ5Y205eWMwdGxlVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNtOXlMbkpsYzNCdmJuTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVTNkaGJDNW1hWEpsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1pHRjBZVTFsYzNOaFoyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsamIyNDZJRndpWlhKeWIzSmNJaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1YzFOMGVXeHBibWM2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hWEp0UW5WMGRHOXVWR1Y0ZERvZ1hDSlBheXdnWjI5MElHbDBJVndpTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxRGJHRnpjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJqb2dYQ0ppZEc0Z1luUnVMWEJ5YVcxaGNubGNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0ZzZDJGNWN5QmxlR1ZqZFhSbFpGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NHbGtaU0JzYjJGa2FXNW5JR2x1WkdsallYUnBiMjVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFZbTFwZEVKMWRIUnZiaTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGEzUXRhVzVrYVdOaGRHOXlKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JXNWhZbXhsSUdKMWRIUnZibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmliV2wwUW5WMGRHOXVMbVJwYzJGaWJHVmtJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1UzZGhiQzVtYVhKbEtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1hDSlRiM0p5ZVN3Z2JHOXZhM01nYkdsclpTQjBhR1Z5WlNCaGNtVWdjMjl0WlNCbGNuSnZjbk1nWkdWMFpXTjBaV1FzSUhCc1pXRnpaU0IwY25rZ1lXZGhhVzR1WENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ2SUZ3aVpYSnliM0pjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1YzFOMGVXeHBibWM2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFYSnRRblYwZEc5dVZHVjRkRG9nWENKUGF5d2daMjkwSUdsMElWd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhOMGIyMURiR0Z6Y3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbHliVUoxZEhSdmJqb2dYQ0ppZEc0Z1ptOXVkQzEzWldsbmFIUXRZbTlzWkNCaWRHNHRiR2xuYUhRdGNISnBiV0Z5ZVZ3aVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZG1GeUlHaGhibVJzWlVOb1lXNW5aVkJoYzNOM2IzSmtJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEdsdmJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdabTl5YlNCbGJHVnRaVzUwYzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJtYjNKdElEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oydDBYM05wWjI1cGJsOWphR0Z1WjJWZmNHRnpjM2R2Y21RbktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MzVmliV2wwUW5WMGRHOXVJRDBnWm05eWJTNXhkV1Z5ZVZObGJHVmpkRzl5S0NjamEzUmZjR0Z6YzNkdmNtUmZjM1ZpYldsMEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhScGIyNGdQU0JHYjNKdFZtRnNhV1JoZEdsdmJpNW1iM0p0Vm1Gc2FXUmhkR2x2YmloY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxsYkdSek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEY5d1lYTnpkMjl5WkRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3hwWkdGMGIzSnpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM1JGYlhCMGVUb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJQ2REZFhKeVpXNTBJRkJoYzNOM2IzSmtJR2x6SUhKbGNYVnBjbVZrSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGemMzZHZjbVE2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNhV1JoZEc5eWN6b2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOTBSVzF3ZEhrNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQW5UbVYzSUZCaGMzTjNiM0prSUdseklISmxjWFZwY21Wa0oxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnpjM2R2Y21SZlkyOXVabWx5YldGMGFXOXVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJHbGtZWFJ2Y25NNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmRFVnRjSFI1T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ0owTnZibVpwY20wZ1VHRnpjM2R2Y21RZ2FYTWdjbVZ4ZFdseVpXUW5YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSbGJuUnBZMkZzT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjR0Z5WlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm05eWJTNXhkV1Z5ZVZObGJHVmpkRzl5S0NkYmJtRnRaVDFjSW5CaGMzTjNiM0prWENKZEp5a3VkbUZzZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQW5WR2hsSUhCaGMzTjNiM0prSUdGdVpDQnBkSE1nWTI5dVptbHliU0JoY21VZ2JtOTBJSFJvWlNCellXMWxKMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR3gxWjJsdWN6b2dleUF2TDB4bFlYSnVJRzF2Y21VNklHaDBkSEJ6T2k4dlptOXliWFpoYkdsa1lYUnBiMjR1YVc4dlozVnBaR1V2Y0d4MVoybHVjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlhV2RuWlhJNklHNWxkeUJHYjNKdFZtRnNhV1JoZEdsdmJpNXdiSFZuYVc1ekxsUnlhV2RuWlhJb0tTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyOTBjM1J5WVhBNklHNWxkeUJHYjNKdFZtRnNhV1JoZEdsdmJpNXdiSFZuYVc1ekxrSnZiM1J6ZEhKaGNEVW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNkVFpXeGxZM1J2Y2pvZ0p5NW1kaTF5YjNjblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSE4xWW0xcGRFSjFkSFJ2Ymk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkdsa1lYUnBiMjR1ZG1Gc2FXUmhkR1VvS1M1MGFHVnVLR1oxYm1OMGFXOXVJQ2h6ZEdGMGRYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwZFhNZ1BUMGdKMVpoYkdsa0p5a2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVGFHOTNJR3h2WVdScGJtY2dhVzVrYVdOaGRHbHZibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjFZbTFwZEVKMWRIUnZiaTV6WlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0YTNRdGFXNWthV05oZEc5eUp5d2dKMjl1SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVJwYzJGaWJHVWdZblYwZEc5dUlIUnZJR0YyYjJsa0lHMTFiSFJwY0d4bElHTnNhV05yWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1ZpYldsMFFuVjBkRzl1TG1ScGMyRmliR1ZrSUQwZ2RISjFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyVnVaQ0JoYW1GNElISmxjWFZsYzNSY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZUdsdmN5NXdiM04wS0dadmNtMHVaMlYwUVhSMGNtbGlkWFJsS0NkaFkzUnBiMjRuS1N3Z2JtVjNJRVp2Y20xRVlYUmhLR1p2Y20wcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2YmlBb2NtVnpjRzl1YzJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGTm9iM2NnYldWemMyRm5aU0J3YjNCMWNDNGdSbTl5SUcxdmNtVWdhVzVtYnlCamFHVmpheUIwYUdVZ2NHeDFaMmx1SjNNZ2IyWm1hV05wWVd3Z1pHOWpkVzFsYm5SaGRHbHZiam9nYUhSMGNITTZMeTl6ZDJWbGRHRnNaWEowTWk1bmFYUm9kV0l1YVc4dlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUZDJGc0xtWnBjbVVvZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJRndpV1c5MWNpQndZWE56ZDI5eVpDQm9ZWE1nWW1WbGJpQnpkV05qWlhOelpuVnNiSGtnY21WelpYUXVYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJqb2dYQ0p6ZFdOalpYTnpYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVjMU4wZVd4cGJtYzZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwY20xQ2RYUjBiMjVVWlhoME9pQmNJazlyTENCbmIzUWdhWFFoWENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0UTJ4aGMzTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlVKMWRIUnZiam9nWENKaWRHNGdabTl1ZEMxM1pXbG5hSFF0WW05c1pDQmlkRzR0YkdsbmFIUXRjSEpwYldGeWVWd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1allYUmphQ2htZFc1amRHbHZiaUFvWlhKeWIzSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFRXVnpjMkZuWlNBOUlHVnljbTl5TG5KbGMzQnZibk5sTG1SaGRHRXViV1Z6YzJGblpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoUlhKeWIzSnpJRDBnWlhKeWIzSXVjbVZ6Y0c5dWMyVXVaR0YwWVM1bGNuSnZjbk03WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCbGNuSnZjbk5MWlhrZ2FXNGdaR0YwWVVWeWNtOXljeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haR0YwWVVWeWNtOXljeTVvWVhOUGQyNVFjbTl3WlhKMGVTaGxjbkp2Y25OTFpYa3BLU0JqYjI1MGFXNTFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFRXVnpjMkZuWlNBclBTQmNJbHhjY2x4Y2Jsd2lJQ3NnWkdGMFlVVnljbTl5YzF0bGNuSnZjbk5MWlhsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2k1eVpYTndiMjV6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGTjNZV3d1Wm1seVpTaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJR1JoZEdGTlpYTnpZV2RsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1T2lCY0ltVnljbTl5WENJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJuTlRkSGxzYVc1bk9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1seWJVSjFkSFJ2YmxSbGVIUTZJRndpVDJzc0lHZHZkQ0JwZENGY0lpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWemRHOXRRMnhoYzNNNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwY20xQ2RYUjBiMjQ2SUZ3aVluUnVJR0owYmkxd2NtbHRZWEo1WENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGJIZGhlWE1nWlhobFkzVjBaV1JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWhwWkdVZ2JHOWhaR2x1WnlCcGJtUnBZMkYwYVc5dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZFdKdGFYUkNkWFIwYjI0dWNtVnRiM1psUVhSMGNtbGlkWFJsS0Nka1lYUmhMV3QwTFdsdVpHbGpZWFJ2Y2ljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVZ1WVdKc1pTQmlkWFIwYjI1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWW0xcGRFSjFkSFJ2Ymk1a2FYTmhZbXhsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk4zWVd3dVptbHlaU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJRndpVTI5eWNua3NJR3h2YjJ0eklHeHBhMlVnZEdobGNtVWdZWEpsSUhOdmJXVWdaWEp5YjNKeklHUmxkR1ZqZEdWa0xDQndiR1ZoYzJVZ2RISjVJR0ZuWVdsdUxsd2lMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWTI5dU9pQmNJbVZ5Y205eVhDSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJuTlRkSGxzYVc1bk9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWx5YlVKMWRIUnZibFJsZUhRNklGd2lUMnNzSUdkdmRDQnBkQ0ZjSWl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0UTJ4aGMzTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwY20xQ2RYUjBiMjQ2SUZ3aVluUnVJR1p2Ym5RdGQyVnBaMmgwTFdKdmJHUWdZblJ1TFd4cFoyaDBMWEJ5YVcxaGNubGNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRkIxWW14cFl5QnRaWFJvYjJSelhISmNiaUFnSUNCeVpYUjFjbTRnZTF4eVhHNGdJQ0FnSUNBZ0lHbHVhWFE2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkRk5sZEhScGJtZHpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVTm9ZVzVuWlVWdFlXbHNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVTm9ZVzVuWlZCaGMzTjNiM0prS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1OUtDazdYSEpjYmx4eVhHNHZMeUJQYmlCa2IyTjFiV1Z1ZENCeVpXRmtlVnh5WEc1TFZGVjBhV3d1YjI1RVQwMURiMjUwWlc1MFRHOWhaR1ZrS0daMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lFdFVRV05qYjNWdWRGTmxkSFJwYm1kelUybG5ibWx1VFdWMGFHOWtjeTVwYm1sMEtDazdYSEpjYm4wcE8xeHlYRzRpWFN3aWJtRnRaWE1pT2xzaVMxUkJZMk52ZFc1MFUyVjBkR2x1WjNOVGFXZHVhVzVOWlhSb2IyUnpJaXdpYVc1cGRGTmxkSFJwYm1keklpd2ljMmxuYmtsdVRXRnBia1ZzSWl3aVpHOWpkVzFsYm5RaUxDSm5aWFJGYkdWdFpXNTBRbmxKWkNJc0luTnBaMjVKYmtWa2FYUkZiQ0lzSW5CaGMzTjNiM0prVFdGcGJrVnNJaXdpY0dGemMzZHZjbVJGWkdsMFJXd2lMQ0p6YVdkdVNXNURhR0Z1WjJWRmJXRnBiQ0lzSW5OcFoyNUpia05oYm1ObGJFVnRZV2xzSWl3aWNHRnpjM2R2Y21SRGFHRnVaMlVpTENKd1lYTnpkMjl5WkVOaGJtTmxiQ0lzSW5GMVpYSjVVMlZzWldOMGIzSWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpZEc5bloyeGxRMmhoYm1kbFJXMWhhV3dpTENKMGIyZG5iR1ZEYUdGdVoyVlFZWE56ZDI5eVpDSXNJbU5zWVhOelRHbHpkQ0lzSW5SdloyZHNaU0lzSW1oaGJtUnNaVU5vWVc1blpVVnRZV2xzSWl3aVpTSXNJblpoYkdsa1lYUnBiMjRpTENKbWIzSnRJaXdpYzNWaWJXbDBRblYwZEc5dUlpd2lSbTl5YlZaaGJHbGtZWFJwYjI0aUxDSm1iM0p0Vm1Gc2FXUmhkR2x2YmlJc0ltWnBaV3hrY3lJc0ltVnRZV2xzSWl3aWRtRnNhV1JoZEc5eWN5SXNJbTV2ZEVWdGNIUjVJaXdpYldWemMyRm5aU0lzSW1WdFlXbHNRV1JrY21WemN5SXNJbkJoYzNOM2IzSmtJaXdpY0d4MVoybHVjeUlzSW5SeWFXZG5aWElpTENKVWNtbG5aMlZ5SWl3aVltOXZkSE4wY21Gd0lpd2lRbTl2ZEhOMGNtRndOU0lzSW5KdmQxTmxiR1ZqZEc5eUlpd2ljSEpsZG1WdWRFUmxabUYxYkhRaUxDSjJZV3hwWkdGMFpTSXNJblJvWlc0aUxDSnpkR0YwZFhNaUxDSnpaWFJCZEhSeWFXSjFkR1VpTENKa2FYTmhZbXhsWkNJc0ltRjRhVzl6SWl3aWNHOXpkQ0lzSW1kbGRFRjBkSEpwWW5WMFpTSXNJa1p2Y20xRVlYUmhJaXdpY21WemNHOXVjMlVpTENKVGQyRnNJaXdpWm1seVpTSXNJblJsZUhRaUxDSnBZMjl1SWl3aVluVjBkRzl1YzFOMGVXeHBibWNpTENKamIyNW1hWEp0UW5WMGRHOXVWR1Y0ZENJc0ltTjFjM1J2YlVOc1lYTnpJaXdpWTI5dVptbHliVUoxZEhSdmJpSXNJbVZ5Y205eUlpd2laR0YwWVUxbGMzTmhaMlVpTENKa1lYUmhJaXdpWkdGMFlVVnljbTl5Y3lJc0ltVnljbTl5Y3lJc0ltVnljbTl5YzB0bGVTSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2ljbVZ0YjNabFFYUjBjbWxpZFhSbElpd2lhR0Z1Wkd4bFEyaGhibWRsVUdGemMzZHZjbVFpTENKamRYSnlaVzUwWDNCaGMzTjNiM0prSWl3aWNHRnpjM2R2Y21SZlkyOXVabWx5YldGMGFXOXVJaXdpYVdSbGJuUnBZMkZzSWl3aVkyOXRjR0Z5WlNJc0luWmhiSFZsSWl3aWFXNXBkQ0lzSWt0VVZYUnBiQ0lzSW05dVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3Jlc291cmNlcy9hc3NldHMvZXh0ZW5kZWQvanMvY3VzdG9tL2FjY291bnQvc2V0dGluZ3Mvc2lnbmluLW1ldGhvZHMuanNcXG5cIik7XHJcblxyXG4vKioqLyB9KVxyXG5cclxuLyoqKioqKi8gXHR9KTtcclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyBzdGFydHVwXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgY2FuJ3QgYmUgaW5saW5lZCBiZWNhdXNlIHRoZSBldmFsLXNvdXJjZS1tYXAgZGV2dG9vbCBpcyB1c2VkLlxyXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XHJcbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1tcIi4vcmVzb3VyY2VzL2Fzc2V0cy9leHRlbmRlZC9qcy9jdXN0b20vYWNjb3VudC9zZXR0aW5ncy9zaWduaW4tbWV0aG9kcy5qc1wiXSgpO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyB9KSgpXHJcbjsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL3NyYy9qcy9jdXN0b20vYWNjb3VudC9zZXR0aW5ncy9zaWduaW4tbWV0aG9kcy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/src/js/custom/account/settings/signin-methods.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/account/settings/signin-methods.js"]();
/******/ 	
/******/ })()
;