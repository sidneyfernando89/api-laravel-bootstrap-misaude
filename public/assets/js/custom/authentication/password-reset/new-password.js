/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/authentication/password-reset/new-password.js":
/*!*******************************************************************************!*\
  !*** ./resources/src/js/custom/authentication/password-reset/new-password.js ***!
  \*******************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/extended/js/custom/authentication/password-reset/new-password.js\":\n    /*!*******************************************************************************************!*\\\r\n      !*** ./resources/assets/extended/js/custom/authentication/password-reset/new-password.js ***!\r\n      \\*******************************************************************************************/\n\n    /***/\n    function resourcesAssetsExtendedJsCustomAuthenticationPasswordResetNewPasswordJs() {\n      eval(\" // Class Definition\\n\\nvar KTPasswordResetNewPassword = function () {\\n  // Elements\\n  var form;\\n  var submitButton;\\n  var validator;\\n  var passwordMeter;\\n\\n  var handleForm = function handleForm(e) {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'password': {\\n          validators: {\\n            notEmpty: {\\n              message: 'The password is required'\\n            },\\n            callback: {\\n              message: 'Please enter valid password',\\n              callback: function callback(input) {\\n                if (input.value.length > 0) {\\n                  return validatePassword();\\n                }\\n              }\\n            }\\n          }\\n        },\\n        'confirm-password': {\\n          validators: {\\n            notEmpty: {\\n              message: 'The password confirmation is required'\\n            },\\n            identical: {\\n              compare: function compare() {\\n                return form.querySelector('[name=\\\"password\\\"]').value;\\n              },\\n              message: 'The password and its confirm are not the same'\\n            }\\n          }\\n        },\\n        'toc': {\\n          validators: {\\n            notEmpty: {\\n              message: 'You must accept the terms and conditions'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger({\\n          event: {\\n            password: false\\n          }\\n        }),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    });\\n    submitButton.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      validator.revalidateField('password');\\n      validator.validate().then(function (status) {\\n        if (status == 'Valid') {\\n          // Show loading indication\\n          submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click\\n\\n          submitButton.disabled = true; // Simulate ajax request\\n\\n          axios.post(submitButton.closest('form').getAttribute('action'), new FormData(form)).then(function (response) {\\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"You have successfully reset your password!\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            }).then(function (result) {\\n              if (result.isConfirmed) {\\n                window.location.href = '/login';\\n                form.querySelector('[name=\\\"email\\\"]').value = \\\"\\\";\\n                form.querySelector('[name=\\\"password\\\"]').value = \\\"\\\";\\n                form.querySelector('[name=\\\"confirm-password\\\"]').value = \\\"\\\";\\n                passwordMeter.reset(); // reset password meter\\n              }\\n            });\\n          })[\\\"catch\\\"](function (error) {\\n            var dataMessage = error.response.data.message;\\n            var dataErrors = error.response.data.errors;\\n\\n            for (var errorsKey in dataErrors) {\\n              if (!dataErrors.hasOwnProperty(errorsKey)) continue;\\n              dataMessage += \\\"\\\\r\\\\n\\\" + dataErrors[errorsKey];\\n            }\\n\\n            if (error.response) {\\n              Swal.fire({\\n                text: dataMessage,\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"OK!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              });\\n            }\\n          }).then(function () {\\n            // always executed\\n            // Hide loading indication\\n            submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            submitButton.disabled = false;\\n          });\\n        } else {\\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"OK!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n    form.querySelector('input[name=\\\"password\\\"]').addEventListener('input', function () {\\n      if (this.value.length > 0) {\\n        validator.updateFieldStatus('password', 'NotValidated');\\n      }\\n    });\\n  };\\n\\n  var validatePassword = function validatePassword() {\\n    return passwordMeter.getScore() > 50;\\n  }; // Public Functions\\n\\n\\n  return {\\n    // public functions\\n    init: function init() {\\n      form = document.querySelector('#kt_new_password_form');\\n      submitButton = document.querySelector('#kt_new_password_submit');\\n      passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\\\"true\\\"]'));\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTPasswordResetNewPassword.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/custom/authentication/password-reset/new-password.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/extended/js/custom/authentication/password-reset/new-password.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/authentication/password-reset/new-password.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/authentication/password-reset/new-password.js"]();
/******/ 	
/******/ })()
;