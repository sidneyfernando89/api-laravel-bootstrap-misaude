/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/authentication/password-reset/password-reset.js":
/*!*********************************************************************************!*\
  !*** ./resources/src/js/custom/authentication/password-reset/password-reset.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/extended/js/custom/authentication/password-reset/password-reset.js\":\n    /*!*********************************************************************************************!*\\\r\n      !*** ./resources/assets/extended/js/custom/authentication/password-reset/password-reset.js ***!\r\n      \\*********************************************************************************************/\n\n    /***/\n    function resourcesAssetsExtendedJsCustomAuthenticationPasswordResetPasswordResetJs() {\n      eval(\" // Class Definition\\n\\nvar KTPasswordResetGeneral = function () {\\n  // Elements\\n  var form;\\n  var submitButton;\\n  var validator; // Handle form\\n\\n  var handleForm = function handleForm(e) {\\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\\n    validator = FormValidation.formValidation(form, {\\n      fields: {\\n        'email': {\\n          validators: {\\n            notEmpty: {\\n              message: 'Email address is required'\\n            },\\n            emailAddress: {\\n              message: 'The value is not a valid email address'\\n            }\\n          }\\n        }\\n      },\\n      plugins: {\\n        trigger: new FormValidation.plugins.Trigger(),\\n        bootstrap: new FormValidation.plugins.Bootstrap5({\\n          rowSelector: '.fv-row',\\n          eleInvalidClass: '',\\n          eleValidClass: ''\\n        })\\n      }\\n    }); // Handle form submit\\n\\n    submitButton.addEventListener('click', function (e) {\\n      // Prevent button default action\\n      e.preventDefault(); // Validate form\\n\\n      validator.validate().then(function (status) {\\n        if (status === 'Valid') {\\n          // Show loading indication\\n          submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click\\n\\n          submitButton.disabled = true; // Simulate ajax request\\n\\n          axios.post(submitButton.closest('form').getAttribute('action'), new FormData(form)).then(function (response) {\\n            // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n            Swal.fire({\\n              text: \\\"Please check your email to proceed with the password reset.\\\",\\n              icon: \\\"success\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            }).then(function (result) {\\n              if (result.isConfirmed) {\\n                form.querySelector('[name=\\\"email\\\"]').value = \\\"\\\";\\n              }\\n            });\\n          })[\\\"catch\\\"](function (error) {\\n            var dataMessage = error.response.data.message;\\n            var dataErrors = error.response.data.errors;\\n\\n            for (var errorsKey in dataErrors) {\\n              if (!dataErrors.hasOwnProperty(errorsKey)) continue;\\n              dataMessage += \\\"\\\\r\\\\n\\\" + dataErrors[errorsKey];\\n            }\\n\\n            if (error.response) {\\n              Swal.fire({\\n                text: dataMessage,\\n                icon: \\\"error\\\",\\n                buttonsStyling: false,\\n                confirmButtonText: \\\"OK!\\\",\\n                customClass: {\\n                  confirmButton: \\\"btn btn-primary\\\"\\n                }\\n              });\\n            }\\n          }).then(function () {\\n            // always executed\\n            // Hide loading indication\\n            submitButton.removeAttribute('data-kt-indicator'); // Enable button\\n\\n            submitButton.disabled = false;\\n          });\\n        } else {\\n          // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\\n          Swal.fire({\\n            text: \\\"Sorry, looks like there are some errors detected, please try again.\\\",\\n            icon: \\\"error\\\",\\n            buttonsStyling: false,\\n            confirmButtonText: \\\"OK!\\\",\\n            customClass: {\\n              confirmButton: \\\"btn btn-primary\\\"\\n            }\\n          });\\n        }\\n      });\\n    });\\n  }; // Public functions\\n\\n\\n  return {\\n    // Initialization\\n    init: function init() {\\n      form = document.querySelector('#kt_password_reset_form');\\n      submitButton = document.querySelector('#kt_password_reset_submit');\\n      handleForm();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTPasswordResetGeneral.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2V4dGVuZGVkL2pzL2N1c3RvbS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1yZXNldC9wYXNzd29yZC1yZXNldC5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxzQkFBc0IsR0FBRyxZQUFZO0FBQ3JDO0FBQ0EsTUFBSUMsSUFBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxTQUFKLENBSnFDLENBTXJDOztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVVDLENBQVYsRUFBYTtBQUMxQjtBQUNBRixJQUFBQSxTQUFTLEdBQUdHLGNBQWMsQ0FBQ0MsY0FBZixDQUNSTixJQURRLEVBRVI7QUFDSU8sTUFBQUEsTUFBTSxFQUFFO0FBQ0osaUJBQVM7QUFDTEMsVUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFlBQUFBLFFBQVEsRUFBRTtBQUNOQyxjQUFBQSxPQUFPLEVBQUU7QUFESCxhQURGO0FBSVJDLFlBQUFBLFlBQVksRUFBRTtBQUNWRCxjQUFBQSxPQUFPLEVBQUU7QUFEQztBQUpOO0FBRFA7QUFETCxPQURaO0FBYUlFLE1BQUFBLE9BQU8sRUFBRTtBQUNMQyxRQUFBQSxPQUFPLEVBQUUsSUFBSVIsY0FBYyxDQUFDTyxPQUFmLENBQXVCRSxPQUEzQixFQURKO0FBRUxDLFFBQUFBLFNBQVMsRUFBRSxJQUFJVixjQUFjLENBQUNPLE9BQWYsQ0FBdUJJLFVBQTNCLENBQXNDO0FBQzdDQyxVQUFBQSxXQUFXLEVBQUUsU0FEZ0M7QUFFN0NDLFVBQUFBLGVBQWUsRUFBRSxFQUY0QjtBQUc3Q0MsVUFBQUEsYUFBYSxFQUFFO0FBSDhCLFNBQXRDO0FBRk47QUFiYixLQUZRLENBQVosQ0FGMEIsQ0E0QjFCOztBQUNBbEIsSUFBQUEsWUFBWSxDQUFDbUIsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsVUFBVWhCLENBQVYsRUFBYTtBQUNoRDtBQUNBQSxNQUFBQSxDQUFDLENBQUNpQixjQUFGLEdBRmdELENBSWhEOztB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O0FBQ2RyRCxNQUFBQSxJQUFJLEdBQUdzRCxRQUFRLENBQUNYLGFBQVQsQ0FBdUIseUJBQXZCLENBQVA7QUFDQTFDLE1BQUFBLFlBQVksR0FBR3FELFFBQVEsQ0FBQ1gsYUFBVCxDQUF1QiwyQkFBdkIsQ0FBZjtBQUVBeEMsTUFBQUEsVUFBVTtBQUNiO0FBUEUsR0FBUDtBQVNILENBMUg0QixFQUE3QixDLENBNEhBOzs7QUFDQW9ELE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEIsWUFBWTtBQUNsQ3pELEVBQUFBLHNCQUFzQixDQUFDc0QsSUFBdkI7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9leHRlbmRlZC9qcy9jdXN0b20vYXV0aGVudGljYXRpb24vcGFzc3dvcmQtcmVzZXQvcGFzc3dvcmQtcmVzZXQuanM/MWFlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIERlZmluaXRpb25cclxudmFyIEtUUGFzc3dvcmRSZXNldEdlbmVyYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFbGVtZW50c1xyXG4gICAgdmFyIGZvcm07XHJcbiAgICB2YXIgc3VibWl0QnV0dG9uO1xyXG4gICAgdmFyIHZhbGlkYXRvcjtcclxuXHJcbiAgICAvLyBIYW5kbGUgZm9ybVxyXG4gICAgdmFyIGhhbmRsZUZvcm0gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXHJcbiAgICAgICAgdmFsaWRhdG9yID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXHJcbiAgICAgICAgICAgIGZvcm0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdlbWFpbCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRW1haWwgYWRkcmVzcyBpcyByZXF1aXJlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbEFkZHJlc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGx1Z2luczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcclxuICAgICAgICAgICAgICAgICAgICBib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVJbnZhbGlkQ2xhc3M6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgZm9ybSBzdWJtaXRcclxuICAgICAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGJ1dHRvbiBkZWZhdWx0IGFjdGlvblxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBmb3JtXHJcbiAgICAgICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZSgpLnRoZW4oZnVuY3Rpb24gKHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ1ZhbGlkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBpbmRpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBidXR0b24gdG8gYXZvaWQgbXVsdGlwbGUgY2xpY2tcclxuICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBhamF4IHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBheGlvcy5wb3N0KHN1Ym1pdEJ1dHRvbi5jbG9zZXN0KCdmb3JtJykuZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSwgbmV3IEZvcm1EYXRhKGZvcm0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgbWVzc2FnZSBwb3B1cC4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiUGxlYXNlIGNoZWNrIHlvdXIgZW1haWwgdG8gcHJvY2VlZCB3aXRoIHRoZSBwYXNzd29yZCByZXNldC5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiZW1haWxcIl0nKS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhTWVzc2FnZSA9IGVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhRXJyb3JzID0gZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcnM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlcnJvcnNLZXkgaW4gZGF0YUVycm9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YUVycm9ycy5oYXNPd25Qcm9wZXJ0eShlcnJvcnNLZXkpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhTWVzc2FnZSArPSBcIlxcclxcblwiICsgZGF0YUVycm9yc1tlcnJvcnNLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFNZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgZXhlY3V0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgbG9hZGluZyBpbmRpY2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBlcnJvciBwb3B1cC4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vXHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTb3JyeSwgbG9va3MgbGlrZSB0aGVyZSBhcmUgc29tZSBlcnJvcnMgZGV0ZWN0ZWQsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBmdW5jdGlvbnNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb25cclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfcGFzc3dvcmRfcmVzZXRfZm9ybScpO1xyXG4gICAgICAgICAgICBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfcGFzc3dvcmRfcmVzZXRfc3VibWl0Jyk7XHJcblxyXG4gICAgICAgICAgICBoYW5kbGVGb3JtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XHJcbiAgICBLVFBhc3N3b3JkUmVzZXRHZW5lcmFsLmluaXQoKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJLVFBhc3N3b3JkUmVzZXRHZW5lcmFsIiwiZm9ybSIsInN1Ym1pdEJ1dHRvbiIsInZhbGlkYXRvciIsImhhbmRsZUZvcm0iLCJlIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJlbWFpbEFkZHJlc3MiLCJwbHVnaW5zIiwidHJpZ2dlciIsIlRyaWdnZXIiLCJib290c3RyYXAiLCJCb290c3RyYXA1Iiwicm93U2VsZWN0b3IiLCJlbGVJbnZhbGlkQ2xhc3MiLCJlbGVWYWxpZENsYXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGUiLCJ0aGVuIiwic3RhdHVzIiwic2V0QXR0cmlidXRlIiwiZGlzYWJsZWQiLCJheGlvcyIsInBvc3QiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwiRm9ybURhdGEiLCJyZXNwb25zZSIsIlN3YWwiLCJmaXJlIiwidGV4dCIsImljb24iLCJidXR0b25zU3R5bGluZyIsImNvbmZpcm1CdXR0b25UZXh0IiwiY3VzdG9tQ2xhc3MiLCJjb25maXJtQnV0dG9uIiwicmVzdWx0IiwiaXNDb25maXJtZWQiLCJxdWVyeVNlbGVjdG9yIiwidmFsdWUiLCJlcnJvciIsImRhdGFNZXNzYWdlIiwiZGF0YSIsImRhdGFFcnJvcnMiLCJlcnJvcnMiLCJlcnJvcnNLZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsImluaXQiLCJkb2N1bWVudCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./resources/assets/extended/js/custom/authentication/password-reset/password-reset.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/extended/js/custom/authentication/password-reset/password-reset.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/authentication/password-reset/password-reset.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/authentication/password-reset/password-reset.js"]();
/******/ 	
/******/ })()
;