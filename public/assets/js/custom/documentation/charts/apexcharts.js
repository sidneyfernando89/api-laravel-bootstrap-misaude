/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/charts/apexcharts.js":
/*!********************************************************************!*\
  !*** ./resources/src/js/custom/documentation/charts/apexcharts.js ***!
  \********************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/charts/apexcharts.js\":\n    /*!****************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/charts/apexcharts.js ***!\r\n      \\****************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsApexchartsJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralApexCharts = function () {\\n  // Shared variables\\n  // Private functions\\n  var example1 = function example1() {\\n    var element = document.getElementById(\\\"kt_apexcharts_1\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-gray-300');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Net Profit',\\n        data: [44, 55, 57, 56, 61, 58, 43, 56, 65, 41, 55, 66]\\n      }, {\\n        name: 'Cost',\\n        data: [32, 34, 52, 46, 27, 60, 41, 49, 13, 11, 44, 33]\\n      }, {\\n        name: 'Revenue',\\n        data: [76, 85, 101, 98, 87, 105, 87, 99, 75, 82, 91, 89]\\n      }],\\n      chart: {\\n        fontFamily: 'inherit',\\n        type: 'bar',\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      plotOptions: {\\n        bar: {\\n          horizontal: false,\\n          columnWidth: ['40%'],\\n          endingShape: 'rounded'\\n        }\\n      },\\n      legend: {\\n        show: false\\n      },\\n      dataLabels: {\\n        enabled: false\\n      },\\n      stroke: {\\n        show: true,\\n        width: 2,\\n        colors: ['transparent']\\n      },\\n      xaxis: {\\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\\n        axisBorder: {\\n          show: false\\n        },\\n        axisTicks: {\\n          show: false\\n        },\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      yaxis: {\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      fill: {\\n        opacity: 1\\n      },\\n      states: {\\n        normal: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        hover: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        active: {\\n          allowMultipleDataPointsSelection: false,\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        }\\n      },\\n      tooltip: {\\n        style: {\\n          fontSize: '12px'\\n        },\\n        y: {\\n          formatter: function formatter(val) {\\n            return \\\"$\\\" + val + \\\" thousands\\\";\\n          }\\n        }\\n      },\\n      colors: [baseColor, dangerColor, secondaryColor],\\n      grid: {\\n        borderColor: borderColor,\\n        strokeDashArray: 4,\\n        yaxis: {\\n          lines: {\\n            show: true\\n          }\\n        }\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  var example2 = function example2() {\\n    var element = document.getElementById(\\\"kt_apexcharts_2\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\\n    var baseColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-gray-300');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Net Profit',\\n        data: [44, 55, 57, 56, 61, 58]\\n      }, {\\n        name: 'Revenue',\\n        data: [76, 85, 101, 98, 87, 105]\\n      }],\\n      chart: {\\n        fontFamily: 'inherit',\\n        type: 'bar',\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      plotOptions: {\\n        bar: {\\n          horizontal: true,\\n          columnWidth: ['30%'],\\n          endingShape: 'rounded'\\n        }\\n      },\\n      legend: {\\n        show: false\\n      },\\n      dataLabels: {\\n        enabled: false\\n      },\\n      stroke: {\\n        show: true,\\n        width: 2,\\n        colors: ['transparent']\\n      },\\n      xaxis: {\\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\\n        axisBorder: {\\n          show: false\\n        },\\n        axisTicks: {\\n          show: false\\n        },\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      yaxis: {\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      fill: {\\n        opacity: 1\\n      },\\n      states: {\\n        normal: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        hover: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        active: {\\n          allowMultipleDataPointsSelection: false,\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        }\\n      },\\n      tooltip: {\\n        style: {\\n          fontSize: '12px'\\n        },\\n        y: {\\n          formatter: function formatter(val) {\\n            return \\\"$\\\" + val + \\\" thousands\\\";\\n          }\\n        }\\n      },\\n      colors: [baseColor, secondaryColor],\\n      grid: {\\n        borderColor: borderColor,\\n        strokeDashArray: 4,\\n        yaxis: {\\n          lines: {\\n            show: true\\n          }\\n        }\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  var example3 = function example3() {\\n    var element = document.getElementById(\\\"kt_apexcharts_3\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\\n    var baseColor = KTUtil.getCssVariableValue('--bs-info');\\n    var lightColor = KTUtil.getCssVariableValue('--bs-light-info');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Net Profit',\\n        data: [30, 40, 40, 90, 90, 70, 70]\\n      }],\\n      chart: {\\n        fontFamily: 'inherit',\\n        type: 'area',\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      plotOptions: {},\\n      legend: {\\n        show: false\\n      },\\n      dataLabels: {\\n        enabled: false\\n      },\\n      fill: {\\n        type: 'solid',\\n        opacity: 1\\n      },\\n      stroke: {\\n        curve: 'smooth',\\n        show: true,\\n        width: 3,\\n        colors: [baseColor]\\n      },\\n      xaxis: {\\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\\n        axisBorder: {\\n          show: false\\n        },\\n        axisTicks: {\\n          show: false\\n        },\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        },\\n        crosshairs: {\\n          position: 'front',\\n          stroke: {\\n            color: baseColor,\\n            width: 1,\\n            dashArray: 3\\n          }\\n        },\\n        tooltip: {\\n          enabled: true,\\n          formatter: undefined,\\n          offsetY: 0,\\n          style: {\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      yaxis: {\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      states: {\\n        normal: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        hover: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        active: {\\n          allowMultipleDataPointsSelection: false,\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        }\\n      },\\n      tooltip: {\\n        style: {\\n          fontSize: '12px'\\n        },\\n        y: {\\n          formatter: function formatter(val) {\\n            return \\\"$\\\" + val + \\\" thousands\\\";\\n          }\\n        }\\n      },\\n      colors: [lightColor],\\n      grid: {\\n        borderColor: borderColor,\\n        strokeDashArray: 4,\\n        yaxis: {\\n          lines: {\\n            show: true\\n          }\\n        }\\n      },\\n      markers: {\\n        strokeColor: baseColor,\\n        strokeWidth: 3\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  var example4 = function example4() {\\n    var element = document.getElementById(\\\"kt_apexcharts_4\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\\n    var baseColor = KTUtil.getCssVariableValue('--bs-success');\\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-light-success');\\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var secondaryLightColor = KTUtil.getCssVariableValue('--bs-light-warning');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Net Profit',\\n        data: [60, 50, 80, 40, 100, 60]\\n      }, {\\n        name: 'Revenue',\\n        data: [70, 60, 110, 40, 50, 70]\\n      }],\\n      chart: {\\n        fontFamily: 'inherit',\\n        type: 'area',\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      plotOptions: {},\\n      legend: {\\n        show: false\\n      },\\n      dataLabels: {\\n        enabled: false\\n      },\\n      fill: {\\n        type: 'solid',\\n        opacity: 1\\n      },\\n      stroke: {\\n        curve: 'smooth'\\n      },\\n      xaxis: {\\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\\n        axisBorder: {\\n          show: false\\n        },\\n        axisTicks: {\\n          show: false\\n        },\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        },\\n        crosshairs: {\\n          position: 'front',\\n          stroke: {\\n            color: labelColor,\\n            width: 1,\\n            dashArray: 3\\n          }\\n        },\\n        tooltip: {\\n          enabled: true,\\n          formatter: undefined,\\n          offsetY: 0,\\n          style: {\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      yaxis: {\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      states: {\\n        normal: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        hover: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        active: {\\n          allowMultipleDataPointsSelection: false,\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        }\\n      },\\n      tooltip: {\\n        style: {\\n          fontSize: '12px'\\n        },\\n        y: {\\n          formatter: function formatter(val) {\\n            return \\\"$\\\" + val + \\\" thousands\\\";\\n          }\\n        }\\n      },\\n      colors: [baseColor, secondaryColor],\\n      grid: {\\n        borderColor: borderColor,\\n        strokeDashArray: 4,\\n        yaxis: {\\n          lines: {\\n            show: true\\n          }\\n        }\\n      },\\n      markers: {\\n        colors: [baseLightColor, secondaryLightColor],\\n        strokeColor: [baseLightColor, secondaryLightColor],\\n        strokeWidth: 3\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  var example5 = function example5() {\\n    var element = document.getElementById(\\\"kt_apexcharts_5\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-light-primary');\\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Net Profit',\\n        type: 'bar',\\n        stacked: true,\\n        data: [40, 50, 65, 70, 50, 30]\\n      }, {\\n        name: 'Revenue',\\n        type: 'bar',\\n        stacked: true,\\n        data: [20, 20, 25, 30, 30, 20]\\n      }, {\\n        name: 'Expenses',\\n        type: 'area',\\n        data: [50, 80, 60, 90, 50, 70]\\n      }],\\n      chart: {\\n        fontFamily: 'inherit',\\n        stacked: true,\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      plotOptions: {\\n        bar: {\\n          stacked: true,\\n          horizontal: false,\\n          endingShape: 'rounded',\\n          columnWidth: ['12%']\\n        }\\n      },\\n      legend: {\\n        show: false\\n      },\\n      dataLabels: {\\n        enabled: false\\n      },\\n      stroke: {\\n        curve: 'smooth',\\n        show: true,\\n        width: 2,\\n        colors: ['transparent']\\n      },\\n      xaxis: {\\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\\n        axisBorder: {\\n          show: false\\n        },\\n        axisTicks: {\\n          show: false\\n        },\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      yaxis: {\\n        max: 120,\\n        labels: {\\n          style: {\\n            colors: labelColor,\\n            fontSize: '12px'\\n          }\\n        }\\n      },\\n      fill: {\\n        opacity: 1\\n      },\\n      states: {\\n        normal: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        hover: {\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        },\\n        active: {\\n          allowMultipleDataPointsSelection: false,\\n          filter: {\\n            type: 'none',\\n            value: 0\\n          }\\n        }\\n      },\\n      tooltip: {\\n        style: {\\n          fontSize: '12px'\\n        },\\n        y: {\\n          formatter: function formatter(val) {\\n            return \\\"$\\\" + val + \\\" thousands\\\";\\n          }\\n        }\\n      },\\n      colors: [baseColor, secondaryColor, baseLightColor],\\n      grid: {\\n        borderColor: borderColor,\\n        strokeDashArray: 4,\\n        yaxis: {\\n          lines: {\\n            show: true\\n          }\\n        },\\n        padding: {\\n          top: 0,\\n          right: 0,\\n          bottom: 0,\\n          left: 0\\n        }\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  var example6 = function example6() {\\n    var element = document.getElementById(\\\"kt_apexcharts_6\\\");\\n    var height = parseInt(KTUtil.css(element, 'height'));\\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var baseLightColor = KTUtil.getCssVariableValue('--bs-success');\\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\\n\\n    if (!element) {\\n      return;\\n    }\\n\\n    var options = {\\n      series: [{\\n        name: 'Bob',\\n        data: [{\\n          x: 'Design',\\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-08').getTime()]\\n        }, {\\n          x: 'Code',\\n          y: [new Date('2019-03-02').getTime(), new Date('2019-03-05').getTime()]\\n        }, {\\n          x: 'Code',\\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-07').getTime()]\\n        }, {\\n          x: 'Test',\\n          y: [new Date('2019-03-03').getTime(), new Date('2019-03-09').getTime()]\\n        }, {\\n          x: 'Test',\\n          y: [new Date('2019-03-08').getTime(), new Date('2019-03-11').getTime()]\\n        }, {\\n          x: 'Validation',\\n          y: [new Date('2019-03-11').getTime(), new Date('2019-03-16').getTime()]\\n        }, {\\n          x: 'Design',\\n          y: [new Date('2019-03-01').getTime(), new Date('2019-03-03').getTime()]\\n        }]\\n      }, {\\n        name: 'Joe',\\n        data: [{\\n          x: 'Design',\\n          y: [new Date('2019-03-02').getTime(), new Date('2019-03-05').getTime()]\\n        }, {\\n          x: 'Test',\\n          y: [new Date('2019-03-06').getTime(), new Date('2019-03-16').getTime()]\\n        }, {\\n          x: 'Code',\\n          y: [new Date('2019-03-03').getTime(), new Date('2019-03-07').getTime()]\\n        }, {\\n          x: 'Deployment',\\n          y: [new Date('2019-03-20').getTime(), new Date('2019-03-22').getTime()]\\n        }, {\\n          x: 'Design',\\n          y: [new Date('2019-03-10').getTime(), new Date('2019-03-16').getTime()]\\n        }]\\n      }, {\\n        name: 'Dan',\\n        data: [{\\n          x: 'Code',\\n          y: [new Date('2019-03-10').getTime(), new Date('2019-03-17').getTime()]\\n        }, {\\n          x: 'Validation',\\n          y: [new Date('2019-03-05').getTime(), new Date('2019-03-09').getTime()]\\n        }]\\n      }],\\n      chart: {\\n        type: 'rangeBar',\\n        fontFamily: 'inherit',\\n        height: height,\\n        toolbar: {\\n          show: false\\n        }\\n      },\\n      colors: [baseColor, secondaryColor, baseLightColor],\\n      plotOptions: {\\n        bar: {\\n          horizontal: true,\\n          barHeight: '80%'\\n        }\\n      },\\n      xaxis: {\\n        type: 'datetime'\\n      },\\n      stroke: {\\n        width: 1\\n      },\\n      fill: {\\n        type: 'solid',\\n        opacity: 1\\n      },\\n      legend: {\\n        position: 'top',\\n        horizontalAlign: 'left'\\n      }\\n    };\\n    var chart = new ApexCharts(element, options);\\n    chart.render();\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      example1();\\n      example2();\\n      example3();\\n      example4();\\n      example5();\\n      example6();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralApexCharts.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/apexcharts.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/apexcharts.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/charts/apexcharts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/charts/apexcharts.js"]();
/******/ 	
/******/ })()
;