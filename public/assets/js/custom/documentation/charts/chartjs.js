/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/charts/chartjs.js":
/*!*****************************************************************!*\
  !*** ./resources/src/js/custom/documentation/charts/chartjs.js ***!
  \*****************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/charts/chartjs.js\":\n    /*!*************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/charts/chartjs.js ***!\r\n      \\*************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationChartsChartjsJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralChartJS = function () {\\n  // Randomizer function\\n  function getRandom() {\\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\\n    return Math.floor(Math.random() * (max - min) + min);\\n  }\\n\\n  function generateRandomData() {\\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\\n    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\\n    var arr = [];\\n\\n    for (var i = 0; i < count; i++) {\\n      arr.push(getRandom(min, max));\\n    }\\n\\n    return arr;\\n  } // Private functions\\n\\n\\n  var example1 = function example1() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_1'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: primaryColor,\\n        stack: 'Stack 0'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: dangerColor,\\n        stack: 'Stack 1'\\n      }, {\\n        label: 'Dataset 3',\\n        data: generateRandomData(1, 100, 12),\\n        backgroundColor: successColor,\\n        stack: 'Stack 2'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'bar',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true,\\n        interaction: {\\n          intersect: false\\n        },\\n        scales: {\\n          x: {\\n            stacked: true\\n          },\\n          y: {\\n            stacked: true\\n          }\\n        }\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example2 = function example2() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_2'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 50, 7),\\n        borderColor: primaryColor,\\n        backgroundColor: 'transparent'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 50, 7),\\n        borderColor: dangerColor,\\n        backgroundColor: 'transparent'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'line',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example3 = function example3() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_3'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var successColor = KTUtil.getCssVariableValue('--bs-success');\\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var infoColor = KTUtil.getCssVariableValue('--bs-info'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(1, 100, 5),\\n        backgroundColor: [primaryColor, dangerColor, successColor, warningColor, infoColor]\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'pie',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example4 = function example4() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_4'); // Define colors\\n\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var dangerColor = KTUtil.getCssVariableValue('--bs-danger');\\n    var dangerLightColor = KTUtil.getCssVariableValue('--bs-light-danger'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(50, 100, 12),\\n        borderColor: primaryColor,\\n        backgroundColor: 'transparent',\\n        stack: 'combined'\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(1, 60, 12),\\n        backgroundColor: dangerColor,\\n        borderColor: dangerColor,\\n        stack: 'combined',\\n        type: 'bar'\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'line',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true,\\n        interaction: {\\n          intersect: false\\n        },\\n        scales: {\\n          y: {\\n            stacked: true\\n          }\\n        }\\n      },\\n      defaults: {\\n        font: {\\n          family: 'inherit'\\n        }\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  var example5 = function example5() {\\n    // Define chart element\\n    var ctx = document.getElementById('kt_chartjs_5'); // Define colors\\n\\n    var infoColor = KTUtil.getCssVariableValue('--bs-info');\\n    var infoLightColor = KTUtil.getCssVariableValue('--bs-light-info');\\n    var warningColor = KTUtil.getCssVariableValue('--bs-warning');\\n    var warningLightColor = KTUtil.getCssVariableValue('--bs-light-warning');\\n    var primaryColor = KTUtil.getCssVariableValue('--bs-primary');\\n    var primaryLightColor = KTUtil.getCssVariableValue('--bs-light-primary'); // Define fonts\\n\\n    var fontFamily = KTUtil.getCssVariableValue('--bs-font-sans-serif'); // Chart labels\\n\\n    var labels = ['January', 'February', 'March', 'April', 'May', 'June']; // Chart data\\n\\n    var data = {\\n      labels: labels,\\n      datasets: [{\\n        label: 'Dataset 1',\\n        data: generateRandomData(20, 80, 6),\\n        borderColor: infoColor,\\n        backgroundColor: infoLightColor\\n      }, {\\n        label: 'Dataset 2',\\n        data: generateRandomData(10, 60, 6),\\n        backgroundColor: warningLightColor,\\n        borderColor: warningColor\\n      }, {\\n        label: 'Dataset 3',\\n        data: generateRandomData(0, 80, 6),\\n        backgroundColor: primaryLightColor,\\n        borderColor: primaryColor\\n      }]\\n    }; // Chart config\\n\\n    var config = {\\n      type: 'radar',\\n      data: data,\\n      options: {\\n        plugins: {\\n          title: {\\n            display: false\\n          }\\n        },\\n        responsive: true\\n      }\\n    }; // Init ChartJS -- for more info, please visit: https://www.chartjs.org/docs/latest/\\n\\n    var myChart = new Chart(ctx, config);\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      // Global font settings: https://www.chartjs.org/docs/latest/general/fonts.html\\n      Chart.defaults.font.size = 13;\\n      Chart.defaults.font.family = KTUtil.getCssVariableValue('--bs-font-sans-serif');\\n      example1();\\n      example2();\\n      example3();\\n      example4();\\n      example5();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralChartJS.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/charts/chartjs.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/charts/chartjs.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2NoYXJ0cy9jaGFydGpzLmpzP2ZkNGUiXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZXNfXyIsImV2YWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQVMsQ0FBQyxZQUFNO0FBQUU7O0FBQ2xCO0FBQVU7QUFDVjs7QUFBVSxNQUFJQSxtQkFBbUIsR0FBSTtBQUVyQztBQUFNO0FBQ047QUFDQTtBQUNBOztBQUNBO0FBQU8sdUVBQU07QUFFYkMsTUFBQUEsSUFBSSxDQUFDLHlqbkNBQUQsQ0FBSjtBQUVBO0FBQU87QUFFUDs7QUFacUMsR0FBM0I7QUFhVjs7QUFDQTs7QUFDQTtBQUFVOztBQUNWO0FBQVU7O0FBQ1Y7QUFBVTs7QUFDVjs7QUFBVSxNQUFJQyxtQkFBbUIsR0FBRyxFQUExQjtBQUNWOztBQUFVRixFQUFBQSxtQkFBbUIsQ0FBQyxtRUFBRCxDQUFuQjtBQUNWOztBQUNBOztBQUFVLENBdkJEIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQVRURU5USU9OOiBBbiBcImV2YWwtc291cmNlLW1hcFwiIGRldnRvb2wgaGFzIGJlZW4gdXNlZC5cclxuICogVGhpcyBkZXZ0b29sIGlzIG5laXRoZXIgbWFkZSBmb3IgcHJvZHVjdGlvbiBub3IgZm9yIHJlYWRhYmxlIG91dHB1dCBmaWxlcy5cclxuICogSXQgdXNlcyBcImV2YWwoKVwiIGNhbGxzIHRvIGNyZWF0ZSBhIHNlcGFyYXRlIHNvdXJjZSBmaWxlIHdpdGggYXR0YWNoZWQgU291cmNlTWFwcyBpbiB0aGUgYnJvd3NlciBkZXZ0b29scy5cclxuICogSWYgeW91IGFyZSB0cnlpbmcgdG8gcmVhZCB0aGUgb3V0cHV0IGZpbGUsIHNlbGVjdCBhIGRpZmZlcmVudCBkZXZ0b29sIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8pXHJcbiAqIG9yIGRpc2FibGUgdGhlIGRlZmF1bHQgZGV2dG9vbCB3aXRoIFwiZGV2dG9vbDogZmFsc2VcIi5cclxuICogSWYgeW91IGFyZSBsb29raW5nIGZvciBwcm9kdWN0aW9uLXJlYWR5IG91dHB1dCBmaWxlcywgc2VlIG1vZGU6IFwicHJvZHVjdGlvblwiIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vbW9kZS8pLlxyXG4gKi9cclxuLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxyXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xyXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcclxuXHJcbi8qKiovIFwiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2NoYXJ0anMuanNcIjpcclxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcclxuICAhKioqIC4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2NoYXJ0cy9jaGFydGpzLmpzICoqKiFcclxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKiovICgoKSA9PiB7XHJcblxyXG5ldmFsKFwiIC8vIENsYXNzIGRlZmluaXRpb25cXG5cXG52YXIgS1RHZW5lcmFsQ2hhcnRKUyA9IGZ1bmN0aW9uICgpIHtcXG4gIC8vIFJhbmRvbWl6ZXIgZnVuY3Rpb25cXG4gIGZ1bmN0aW9uIGdldFJhbmRvbSgpIHtcXG4gICAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcXG4gICAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwO1xcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xcbiAgfVxcblxcbiAgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21EYXRhKCkge1xcbiAgICB2YXIgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxO1xcbiAgICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMDA7XFxuICAgIHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTA7XFxuICAgIHZhciBhcnIgPSBbXTtcXG5cXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XFxuICAgICAgYXJyLnB1c2goZ2V0UmFuZG9tKG1pbiwgbWF4KSk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGFycjtcXG4gIH0gLy8gUHJpdmF0ZSBmdW5jdGlvbnNcXG5cXG5cXG4gIHZhciBleGFtcGxlMSA9IGZ1bmN0aW9uIGV4YW1wbGUxKCkge1xcbiAgICAvLyBEZWZpbmUgY2hhcnQgZWxlbWVudFxcbiAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X2NoYXJ0anNfMScpOyAvLyBEZWZpbmUgY29sb3JzXFxuXFxuICAgIHZhciBwcmltYXJ5Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1wcmltYXJ5Jyk7XFxuICAgIHZhciBkYW5nZXJDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWRhbmdlcicpO1xcbiAgICB2YXIgc3VjY2Vzc0NvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtc3VjY2VzcycpOyAvLyBEZWZpbmUgZm9udHNcXG5cXG4gICAgdmFyIGZvbnRGYW1pbHkgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1mb250LXNhbnMtc2VyaWYnKTsgLy8gQ2hhcnQgbGFiZWxzXFxuXFxuICAgIHZhciBsYWJlbHMgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTsgLy8gQ2hhcnQgZGF0YVxcblxcbiAgICB2YXIgZGF0YSA9IHtcXG4gICAgICBsYWJlbHM6IGxhYmVscyxcXG4gICAgICBkYXRhc2V0czogW3tcXG4gICAgICAgIGxhYmVsOiAnRGF0YXNldCAxJyxcXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlUmFuZG9tRGF0YSgxLCAxMDAsIDEyKSxcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJpbWFyeUNvbG9yLFxcbiAgICAgICAgc3RhY2s6ICdTdGFjayAwJ1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGxhYmVsOiAnRGF0YXNldCAyJyxcXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlUmFuZG9tRGF0YSgxLCAxMDAsIDEyKSxcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZGFuZ2VyQ29sb3IsXFxuICAgICAgICBzdGFjazogJ1N0YWNrIDEnXFxuICAgICAgfSwge1xcbiAgICAgICAgbGFiZWw6ICdEYXRhc2V0IDMnLFxcbiAgICAgICAgZGF0YTogZ2VuZXJhdGVSYW5kb21EYXRhKDEsIDEwMCwgMTIpLFxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzdWNjZXNzQ29sb3IsXFxuICAgICAgICBzdGFjazogJ1N0YWNrIDInXFxuICAgICAgfV1cXG4gICAgfTsgLy8gQ2hhcnQgY29uZmlnXFxuXFxuICAgIHZhciBjb25maWcgPSB7XFxuICAgICAgdHlwZTogJ2JhcicsXFxuICAgICAgZGF0YTogZGF0YSxcXG4gICAgICBvcHRpb25zOiB7XFxuICAgICAgICBwbHVnaW5zOiB7XFxuICAgICAgICAgIHRpdGxlOiB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXFxuICAgICAgICBpbnRlcmFjdGlvbjoge1xcbiAgICAgICAgICBpbnRlcnNlY3Q6IGZhbHNlXFxuICAgICAgICB9LFxcbiAgICAgICAgc2NhbGVzOiB7XFxuICAgICAgICAgIHg6IHtcXG4gICAgICAgICAgICBzdGFja2VkOiB0cnVlXFxuICAgICAgICAgIH0sXFxuICAgICAgICAgIHk6IHtcXG4gICAgICAgICAgICBzdGFja2VkOiB0cnVlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH07IC8vIEluaXQgQ2hhcnRKUyAtLSBmb3IgbW9yZSBpbmZvLCBwbGVhc2UgdmlzaXQ6IGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnL2RvY3MvbGF0ZXN0L1xcblxcbiAgICB2YXIgbXlDaGFydCA9IG5ldyBDaGFydChjdHgsIGNvbmZpZyk7XFxuICB9O1xcblxcbiAgdmFyIGV4YW1wbGUyID0gZnVuY3Rpb24gZXhhbXBsZTIoKSB7XFxuICAgIC8vIERlZmluZSBjaGFydCBlbGVtZW50XFxuICAgIHZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfY2hhcnRqc18yJyk7IC8vIERlZmluZSBjb2xvcnNcXG5cXG4gICAgdmFyIHByaW1hcnlDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcXG4gICAgdmFyIGRhbmdlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZGFuZ2VyJyk7XFxuICAgIHZhciBzdWNjZXNzQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1zdWNjZXNzJyk7IC8vIERlZmluZSBmb250c1xcblxcbiAgICB2YXIgZm9udEZhbWlseSA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWZvbnQtc2Fucy1zZXJpZicpOyAvLyBDaGFydCBsYWJlbHNcXG5cXG4gICAgdmFyIGxhYmVscyA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5J107IC8vIENoYXJ0IGRhdGFcXG5cXG4gICAgdmFyIGRhdGEgPSB7XFxuICAgICAgbGFiZWxzOiBsYWJlbHMsXFxuICAgICAgZGF0YXNldHM6IFt7XFxuICAgICAgICBsYWJlbDogJ0RhdGFzZXQgMScsXFxuICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoMSwgNTAsIDcpLFxcbiAgICAgICAgYm9yZGVyQ29sb3I6IHByaW1hcnlDb2xvcixcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xcbiAgICAgIH0sIHtcXG4gICAgICAgIGxhYmVsOiAnRGF0YXNldCAyJyxcXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlUmFuZG9tRGF0YSgxLCA1MCwgNyksXFxuICAgICAgICBib3JkZXJDb2xvcjogZGFuZ2VyQ29sb3IsXFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcXG4gICAgICB9XVxcbiAgICB9OyAvLyBDaGFydCBjb25maWdcXG5cXG4gICAgdmFyIGNvbmZpZyA9IHtcXG4gICAgICB0eXBlOiAnbGluZScsXFxuICAgICAgZGF0YTogZGF0YSxcXG4gICAgICBvcHRpb25zOiB7XFxuICAgICAgICBwbHVnaW5zOiB7XFxuICAgICAgICAgIHRpdGxlOiB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWVcXG4gICAgICB9XFxuICAgIH07IC8vIEluaXQgQ2hhcnRKUyAtLSBmb3IgbW9yZSBpbmZvLCBwbGVhc2UgdmlzaXQ6IGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnL2RvY3MvbGF0ZXN0L1xcblxcbiAgICB2YXIgbXlDaGFydCA9IG5ldyBDaGFydChjdHgsIGNvbmZpZyk7XFxuICB9O1xcblxcbiAgdmFyIGV4YW1wbGUzID0gZnVuY3Rpb24gZXhhbXBsZTMoKSB7XFxuICAgIC8vIERlZmluZSBjaGFydCBlbGVtZW50XFxuICAgIHZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfY2hhcnRqc18zJyk7IC8vIERlZmluZSBjb2xvcnNcXG5cXG4gICAgdmFyIHByaW1hcnlDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcXG4gICAgdmFyIGRhbmdlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZGFuZ2VyJyk7XFxuICAgIHZhciBzdWNjZXNzQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1zdWNjZXNzJyk7XFxuICAgIHZhciB3YXJuaW5nQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy13YXJuaW5nJyk7XFxuICAgIHZhciBpbmZvQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1pbmZvJyk7IC8vIENoYXJ0IGxhYmVsc1xcblxcbiAgICB2YXIgbGFiZWxzID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heSddOyAvLyBDaGFydCBkYXRhXFxuXFxuICAgIHZhciBkYXRhID0ge1xcbiAgICAgIGxhYmVsczogbGFiZWxzLFxcbiAgICAgIGRhdGFzZXRzOiBbe1xcbiAgICAgICAgbGFiZWw6ICdEYXRhc2V0IDEnLFxcbiAgICAgICAgZGF0YTogZ2VuZXJhdGVSYW5kb21EYXRhKDEsIDEwMCwgNSksXFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtwcmltYXJ5Q29sb3IsIGRhbmdlckNvbG9yLCBzdWNjZXNzQ29sb3IsIHdhcm5pbmdDb2xvciwgaW5mb0NvbG9yXVxcbiAgICAgIH1dXFxuICAgIH07IC8vIENoYXJ0IGNvbmZpZ1xcblxcbiAgICB2YXIgY29uZmlnID0ge1xcbiAgICAgIHR5cGU6ICdwaWUnLFxcbiAgICAgIGRhdGE6IGRhdGEsXFxuICAgICAgb3B0aW9uczoge1xcbiAgICAgICAgcGx1Z2luczoge1xcbiAgICAgICAgICB0aXRsZToge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICByZXNwb25zaXZlOiB0cnVlXFxuICAgICAgfVxcbiAgICB9OyAvLyBJbml0IENoYXJ0SlMgLS0gZm9yIG1vcmUgaW5mbywgcGxlYXNlIHZpc2l0OiBodHRwczovL3d3dy5jaGFydGpzLm9yZy9kb2NzL2xhdGVzdC9cXG5cXG4gICAgdmFyIG15Q2hhcnQgPSBuZXcgQ2hhcnQoY3R4LCBjb25maWcpO1xcbiAgfTtcXG5cXG4gIHZhciBleGFtcGxlNCA9IGZ1bmN0aW9uIGV4YW1wbGU0KCkge1xcbiAgICAvLyBEZWZpbmUgY2hhcnQgZWxlbWVudFxcbiAgICB2YXIgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X2NoYXJ0anNfNCcpOyAvLyBEZWZpbmUgY29sb3JzXFxuXFxuICAgIHZhciBwcmltYXJ5Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1wcmltYXJ5Jyk7XFxuICAgIHZhciBkYW5nZXJDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWRhbmdlcicpO1xcbiAgICB2YXIgZGFuZ2VyTGlnaHRDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWxpZ2h0LWRhbmdlcicpOyAvLyBEZWZpbmUgZm9udHNcXG5cXG4gICAgdmFyIGZvbnRGYW1pbHkgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1mb250LXNhbnMtc2VyaWYnKTsgLy8gQ2hhcnQgbGFiZWxzXFxuXFxuICAgIHZhciBsYWJlbHMgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXTsgLy8gQ2hhcnQgZGF0YVxcblxcbiAgICB2YXIgZGF0YSA9IHtcXG4gICAgICBsYWJlbHM6IGxhYmVscyxcXG4gICAgICBkYXRhc2V0czogW3tcXG4gICAgICAgIGxhYmVsOiAnRGF0YXNldCAxJyxcXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlUmFuZG9tRGF0YSg1MCwgMTAwLCAxMiksXFxuICAgICAgICBib3JkZXJDb2xvcjogcHJpbWFyeUNvbG9yLFxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxcbiAgICAgICAgc3RhY2s6ICdjb21iaW5lZCdcXG4gICAgICB9LCB7XFxuICAgICAgICBsYWJlbDogJ0RhdGFzZXQgMicsXFxuICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoMSwgNjAsIDEyKSxcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZGFuZ2VyQ29sb3IsXFxuICAgICAgICBib3JkZXJDb2xvcjogZGFuZ2VyQ29sb3IsXFxuICAgICAgICBzdGFjazogJ2NvbWJpbmVkJyxcXG4gICAgICAgIHR5cGU6ICdiYXInXFxuICAgICAgfV1cXG4gICAgfTsgLy8gQ2hhcnQgY29uZmlnXFxuXFxuICAgIHZhciBjb25maWcgPSB7XFxuICAgICAgdHlwZTogJ2xpbmUnLFxcbiAgICAgIGRhdGE6IGRhdGEsXFxuICAgICAgb3B0aW9uczoge1xcbiAgICAgICAgcGx1Z2luczoge1xcbiAgICAgICAgICB0aXRsZToge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxcbiAgICAgICAgaW50ZXJhY3Rpb246IHtcXG4gICAgICAgICAgaW50ZXJzZWN0OiBmYWxzZVxcbiAgICAgICAgfSxcXG4gICAgICAgIHNjYWxlczoge1xcbiAgICAgICAgICB5OiB7XFxuICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSxcXG4gICAgICBkZWZhdWx0czoge1xcbiAgICAgICAgZm9udDoge1xcbiAgICAgICAgICBmYW1pbHk6ICdpbmhlcml0J1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfTsgLy8gSW5pdCBDaGFydEpTIC0tIGZvciBtb3JlIGluZm8sIHBsZWFzZSB2aXNpdDogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmcvZG9jcy9sYXRlc3QvXFxuXFxuICAgIHZhciBteUNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwgY29uZmlnKTtcXG4gIH07XFxuXFxuICB2YXIgZXhhbXBsZTUgPSBmdW5jdGlvbiBleGFtcGxlNSgpIHtcXG4gICAgLy8gRGVmaW5lIGNoYXJ0IGVsZW1lbnRcXG4gICAgdmFyIGN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9jaGFydGpzXzUnKTsgLy8gRGVmaW5lIGNvbG9yc1xcblxcbiAgICB2YXIgaW5mb0NvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtaW5mbycpO1xcbiAgICB2YXIgaW5mb0xpZ2h0Q29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1pbmZvJyk7XFxuICAgIHZhciB3YXJuaW5nQ29sb3IgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy13YXJuaW5nJyk7XFxuICAgIHZhciB3YXJuaW5nTGlnaHRDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWxpZ2h0LXdhcm5pbmcnKTtcXG4gICAgdmFyIHByaW1hcnlDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcXG4gICAgdmFyIHByaW1hcnlMaWdodENvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtbGlnaHQtcHJpbWFyeScpOyAvLyBEZWZpbmUgZm9udHNcXG5cXG4gICAgdmFyIGZvbnRGYW1pbHkgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1mb250LXNhbnMtc2VyaWYnKTsgLy8gQ2hhcnQgbGFiZWxzXFxuXFxuICAgIHZhciBsYWJlbHMgPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnXTsgLy8gQ2hhcnQgZGF0YVxcblxcbiAgICB2YXIgZGF0YSA9IHtcXG4gICAgICBsYWJlbHM6IGxhYmVscyxcXG4gICAgICBkYXRhc2V0czogW3tcXG4gICAgICAgIGxhYmVsOiAnRGF0YXNldCAxJyxcXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlUmFuZG9tRGF0YSgyMCwgODAsIDYpLFxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGluZm9Db2xvcixcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaW5mb0xpZ2h0Q29sb3JcXG4gICAgICB9LCB7XFxuICAgICAgICBsYWJlbDogJ0RhdGFzZXQgMicsXFxuICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoMTAsIDYwLCA2KSxcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogd2FybmluZ0xpZ2h0Q29sb3IsXFxuICAgICAgICBib3JkZXJDb2xvcjogd2FybmluZ0NvbG9yXFxuICAgICAgfSwge1xcbiAgICAgICAgbGFiZWw6ICdEYXRhc2V0IDMnLFxcbiAgICAgICAgZGF0YTogZ2VuZXJhdGVSYW5kb21EYXRhKDAsIDgwLCA2KSxcXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJpbWFyeUxpZ2h0Q29sb3IsXFxuICAgICAgICBib3JkZXJDb2xvcjogcHJpbWFyeUNvbG9yXFxuICAgICAgfV1cXG4gICAgfTsgLy8gQ2hhcnQgY29uZmlnXFxuXFxuICAgIHZhciBjb25maWcgPSB7XFxuICAgICAgdHlwZTogJ3JhZGFyJyxcXG4gICAgICBkYXRhOiBkYXRhLFxcbiAgICAgIG9wdGlvbnM6IHtcXG4gICAgICAgIHBsdWdpbnM6IHtcXG4gICAgICAgICAgdGl0bGU6IHtcXG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZVxcbiAgICAgIH1cXG4gICAgfTsgLy8gSW5pdCBDaGFydEpTIC0tIGZvciBtb3JlIGluZm8sIHBsZWFzZSB2aXNpdDogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmcvZG9jcy9sYXRlc3QvXFxuXFxuICAgIHZhciBteUNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwgY29uZmlnKTtcXG4gIH07XFxuXFxuICByZXR1cm4ge1xcbiAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XFxuICAgICAgLy8gR2xvYmFsIGZvbnQgc2V0dGluZ3M6IGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnL2RvY3MvbGF0ZXN0L2dlbmVyYWwvZm9udHMuaHRtbFxcbiAgICAgIENoYXJ0LmRlZmF1bHRzLmZvbnQuc2l6ZSA9IDEzO1xcbiAgICAgIENoYXJ0LmRlZmF1bHRzLmZvbnQuZmFtaWx5ID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZm9udC1zYW5zLXNlcmlmJyk7XFxuICAgICAgZXhhbXBsZTEoKTtcXG4gICAgICBleGFtcGxlMigpO1xcbiAgICAgIGV4YW1wbGUzKCk7XFxuICAgICAgZXhhbXBsZTQoKTtcXG4gICAgICBleGFtcGxlNSgpO1xcbiAgICB9XFxuICB9O1xcbn0oKTsgLy8gT24gZG9jdW1lbnQgcmVhZHlcXG5cXG5cXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcXG4gIEtUR2VuZXJhbENoYXJ0SlMuaW5pdCgpO1xcbn0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXlaWE52ZFhKalpYTXZZWE56WlhSekwyTnZjbVV2YW5NdlkzVnpkRzl0TDJSdlkzVnRaVzUwWVhScGIyNHZZMmhoY25SekwyTm9ZWEowYW5NdWFuTXVhbk1pTENKdFlYQndhVzVuY3lJNklrTkJSVUU3TzBGQlEwRXNTVUZCU1VFc1owSkJRV2RDTEVkQlFVY3NXVUZCV1R0QlFVTXZRanRCUVVOQkxGZEJRVk5ETEZOQlFWUXNSMEZCZFVNN1FVRkJRU3hSUVVGd1FrTXNSMEZCYjBJc2RVVkJRV1FzUTBGQll6dEJRVUZCTEZGQlFWaERMRWRCUVZjc2RVVkJRVXdzUjBGQlN6dEJRVU51UXl4WFFVRlBReXhKUVVGSkxFTkJRVU5ETEV0QlFVd3NRMEZCVjBRc1NVRkJTU3hEUVVGRFJTeE5RVUZNTEUxQlFXbENTQ3hIUVVGSExFZEJRVWRFTEVkQlFYWkNMRWxCUVRoQ1FTeEhRVUY2UXl4RFFVRlFPMEZCUTBnN08wRkJSVVFzVjBGQlUwc3NhMEpCUVZRc1IwRkJORVE3UVVGQlFTeFJRVUZvUTB3c1IwRkJaME1zZFVWQlFURkNMRU5CUVRCQ08wRkJRVUVzVVVGQmRrSkRMRWRCUVhWQ0xIVkZRVUZxUWl4SFFVRnBRanRCUVVGQkxGRkJRVnBMTEV0QlFWa3NkVVZCUVVvc1JVRkJTVHRCUVVONFJDeFJRVUZKUXl4SFFVRkhMRWRCUVVjc1JVRkJWanM3UVVGRFFTeFRRVUZMTEVsQlFVbERMRU5CUVVNc1IwRkJSeXhEUVVGaUxFVkJRV2RDUVN4RFFVRkRMRWRCUVVkR0xFdEJRWEJDTEVWQlFUSkNSU3hEUVVGRExFVkJRVFZDTEVWQlFXZERPMEZCUXpWQ1JDeE5RVUZCUVN4SFFVRkhMRU5CUVVORkxFbEJRVW9zUTBGQlUxWXNVMEZCVXl4RFFVRkRReXhIUVVGRUxFVkJRVTFETEVkQlFVNHNRMEZCYkVJN1FVRkRTRHM3UVVGRFJDeFhRVUZQVFN4SFFVRlFPMEZCUTBnc1IwRmFPRUlzUTBGakwwSTdPenRCUVVOQkxFMUJRVWxITEZGQlFWRXNSMEZCUnl4VFFVRllRU3hSUVVGWExFZEJRVms3UVVGRGRrSTdRVUZEUVN4UlFVRkpReXhIUVVGSExFZEJRVWRETEZGQlFWRXNRMEZCUTBNc1kwRkJWQ3hEUVVGM1FpeGpRVUY0UWl4RFFVRldMRU5CUm5WQ0xFTkJTWFpDT3p0QlFVTkJMRkZCUVVsRExGbEJRVmtzUjBGQlIwTXNUVUZCVFN4RFFVRkRReXh0UWtGQlVDeERRVUV5UWl4alFVRXpRaXhEUVVGdVFqdEJRVU5CTEZGQlFVbERMRmRCUVZjc1IwRkJSMFlzVFVGQlRTeERRVUZEUXl4dFFrRkJVQ3hEUVVFeVFpeGhRVUV6UWl4RFFVRnNRanRCUVVOQkxGRkJRVWxGTEZsQlFWa3NSMEZCUjBnc1RVRkJUU3hEUVVGRFF5eHRRa0ZCVUN4RFFVRXlRaXhqUVVFelFpeERRVUZ1UWl4RFFWQjFRaXhEUVZOMlFqczdRVUZEUVN4UlFVRkpSeXhWUVVGVkxFZEJRVWRLTEUxQlFVMHNRMEZCUTBNc2JVSkJRVkFzUTBGQk1rSXNjMEpCUVROQ0xFTkJRV3BDTEVOQlZuVkNMRU5CV1haQ096dEJRVU5CTEZGQlFVMUpMRTFCUVUwc1IwRkJSeXhEUVVGRExGTkJRVVFzUlVGQldTeFZRVUZhTEVWQlFYZENMRTlCUVhoQ0xFVkJRV2xETEU5QlFXcERMRVZCUVRCRExFdEJRVEZETEVWQlFXbEVMRTFCUVdwRUxFVkJRWGxFTEUxQlFYcEVMRVZCUVdsRkxGRkJRV3BGTEVWQlFUSkZMRmRCUVRORkxFVkJRWGRHTEZOQlFYaEdMRVZCUVcxSExGVkJRVzVITEVWQlFTdEhMRlZCUVM5SExFTkJRV1lzUTBGaWRVSXNRMEZsZGtJN08wRkJRMEVzVVVGQlRVTXNTVUZCU1N4SFFVRkhPMEZCUTFSRUxFMUJRVUZCTEUxQlFVMHNSVUZCUlVFc1RVRkVRenRCUVVWVVJTeE5RVUZCUVN4UlFVRlJMRVZCUVVVc1EwRkRUanRCUVVOSlF5eFJRVUZCUVN4TFFVRkxMRVZCUVVVc1YwRkVXRHRCUVVWSlJpeFJRVUZCUVN4SlFVRkpMRVZCUVVWb1FpeHJRa0ZCYTBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUjBGQlNpeEZRVUZUTEVWQlFWUXNRMEZHTlVJN1FVRkhTVzFDTEZGQlFVRkJMR1ZCUVdVc1JVRkJSVllzV1VGSWNrSTdRVUZKU1Zjc1VVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlNsZ3NUMEZFVFN4RlFVOU9PMEZCUTBsR0xGRkJRVUZCTEV0QlFVc3NSVUZCUlN4WFFVUllPMEZCUlVsR0xGRkJRVUZCTEVsQlFVa3NSVUZCUldoQ0xHdENRVUZyUWl4RFFVRkRMRU5CUVVRc1JVRkJTU3hIUVVGS0xFVkJRVk1zUlVGQlZDeERRVVkxUWp0QlFVZEpiVUlzVVVGQlFVRXNaVUZCWlN4RlFVRkZVQ3hYUVVoeVFqdEJRVWxKVVN4UlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGS1dDeFBRVkJOTEVWQllVNDdRVUZEU1VZc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEZkQlJGZzdRVUZGU1VZc1VVRkJRVUVzU1VGQlNTeEZRVUZGYUVJc2EwSkJRV3RDTEVOQlFVTXNRMEZCUkN4RlFVRkpMRWRCUVVvc1JVRkJVeXhGUVVGVUxFTkJSalZDTzBGQlIwbHRRaXhSUVVGQlFTeGxRVUZsTEVWQlFVVk9MRmxCU0hKQ08wRkJTVWxQTEZGQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVwWUxFOUJZazA3UVVGR1JDeExRVUZpTEVOQmFFSjFRaXhEUVhkRGRrSTdPMEZCUTBFc1VVRkJUVU1zVFVGQlRTeEhRVUZITzBGQlExaERMRTFCUVVGQkxFbEJRVWtzUlVGQlJTeExRVVJMTzBGQlJWaE9MRTFCUVVGQkxFbEJRVWtzUlVGQlJVRXNTVUZHU3p0QlFVZFlUeXhOUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZEVEVNc1VVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlEweERMRlZCUVVGQkxFdEJRVXNzUlVGQlJUdEJRVU5JUXl4WlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVRqdEJRVVJHTEZOQlJFbzdRVUZOVEVNc1VVRkJRVUVzVlVGQlZTeEZRVUZGTEVsQlRsQTdRVUZQVEVNc1VVRkJRVUVzVjBGQlZ5eEZRVUZGTzBGQlExUkRMRlZCUVVGQkxGTkJRVk1zUlVGQlJUdEJRVVJHTEZOQlVGSTdRVUZWVEVNc1VVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlEwcERMRlZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUXl4WlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVZpeFhRVVJETzBGQlNVcERMRlZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUkN4WlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVZqdEJRVXBETzBGQlZrZzdRVUZJUlN4TFFVRm1MRU5CZWtOMVFpeERRV2xGZGtJN08wRkJRMEVzVVVGQlNVVXNUMEZCVHl4SFFVRkhMRWxCUVVsRExFdEJRVW9zUTBGQlZUZENMRWRCUVZZc1JVRkJaV1VzVFVGQlppeERRVUZrTzBGQlEwZ3NSMEZ1UlVRN08wRkJjVVZCTEUxQlFVbGxMRkZCUVZFc1IwRkJSeXhUUVVGWVFTeFJRVUZYTEVkQlFWazdRVUZEZGtJN1FVRkRRU3hSUVVGSk9VSXNSMEZCUnl4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdOQlFWUXNRMEZCZDBJc1kwRkJlRUlzUTBGQlZpeERRVVoxUWl4RFFVbDJRanM3UVVGRFFTeFJRVUZKUXl4WlFVRlpMRWRCUVVkRExFMUJRVTBzUTBGQlEwTXNiVUpCUVZBc1EwRkJNa0lzWTBGQk0wSXNRMEZCYmtJN1FVRkRRU3hSUVVGSlF5eFhRVUZYTEVkQlFVZEdMRTFCUVUwc1EwRkJRME1zYlVKQlFWQXNRMEZCTWtJc1lVRkJNMElzUTBGQmJFSTdRVUZEUVN4UlFVRkpSU3haUVVGWkxFZEJRVWRJTEUxQlFVMHNRMEZCUTBNc2JVSkJRVkFzUTBGQk1rSXNZMEZCTTBJc1EwRkJia0lzUTBGUWRVSXNRMEZUZGtJN08wRkJRMEVzVVVGQlNVY3NWVUZCVlN4SFFVRkhTaXhOUVVGTkxFTkJRVU5ETEcxQ1FVRlFMRU5CUVRKQ0xITkNRVUV6UWl4RFFVRnFRaXhEUVZaMVFpeERRVmwyUWpzN1FVRkRRU3hSUVVGTlNTeE5RVUZOTEVkQlFVY3NRMEZCUXl4VFFVRkVMRVZCUVZrc1ZVRkJXaXhGUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhQUVVGcVF5eEZRVUV3UXl4TFFVRXhReXhGUVVGcFJDeE5RVUZxUkN4RlFVRjVSQ3hOUVVGNlJDeERRVUZtTEVOQlluVkNMRU5CWlhaQ096dEJRVU5CTEZGQlFVMURMRWxCUVVrc1IwRkJSenRCUVVOVVJDeE5RVUZCUVN4TlFVRk5MRVZCUVVWQkxFMUJSRU03UVVGRlZFVXNUVUZCUVVFc1VVRkJVU3hGUVVGRkxFTkJRMDQ3UVVGRFNVTXNVVUZCUVVFc1MwRkJTeXhGUVVGRkxGZEJSRmc3UVVGRlNVWXNVVUZCUVVFc1NVRkJTU3hGUVVGRmFFSXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVWQlFVb3NSVUZCVVN4RFFVRlNMRU5CUmpWQ08wRkJSMGx4UXl4UlFVRkJRU3hYUVVGWExFVkJRVVUxUWl4WlFVaHFRanRCUVVsSlZTeFJRVUZCUVN4bFFVRmxMRVZCUVVVN1FVRktja0lzVDBGRVRTeEZRVTlPTzBGQlEwbEVMRkZCUVVGQkxFdEJRVXNzUlVGQlJTeFhRVVJZTzBGQlJVbEdMRkZCUVVGQkxFbEJRVWtzUlVGQlJXaENMR3RDUVVGclFpeERRVUZETEVOQlFVUXNSVUZCU1N4RlFVRktMRVZCUVZFc1EwRkJVaXhEUVVZMVFqdEJRVWRKY1VNc1VVRkJRVUVzVjBGQlZ5eEZRVUZGZWtJc1YwRklha0k3UVVGSlNVOHNVVUZCUVVFc1pVRkJaU3hGUVVGRk8wRkJTbkpDTEU5QlVFMDdRVUZHUkN4TFFVRmlMRU5CYUVKMVFpeERRV3REZGtJN08wRkJRMEVzVVVGQlRVVXNUVUZCVFN4SFFVRkhPMEZCUTFoRExFMUJRVUZCTEVsQlFVa3NSVUZCUlN4TlFVUkxPMEZCUlZoT0xFMUJRVUZCTEVsQlFVa3NSVUZCUlVFc1NVRkdTenRCUVVkWVR5eE5RVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkRURU1zVVVGQlFVRXNUMEZCVHl4RlFVRkZPMEZCUTB4RExGVkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVTklReXhaUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFVGp0QlFVUkdMRk5CUkVvN1FVRk5URU1zVVVGQlFVRXNWVUZCVlN4RlFVRkZPMEZCVGxBN1FVRklSU3hMUVVGbUxFTkJia04xUWl4RFFXZEVka0k3TzBGQlEwRXNVVUZCU1U4c1QwRkJUeXhIUVVGSExFbEJRVWxETEV0QlFVb3NRMEZCVlRkQ0xFZEJRVllzUlVGQlpXVXNUVUZCWml4RFFVRmtPMEZCUTBnc1IwRnNSRVE3TzBGQmIwUkJMRTFCUVVscFFpeFJRVUZSTEVkQlFVY3NVMEZCV0VFc1VVRkJWeXhIUVVGWk8wRkJRM1pDTzBGQlEwRXNVVUZCU1doRExFZEJRVWNzUjBGQlIwTXNVVUZCVVN4RFFVRkRReXhqUVVGVUxFTkJRWGRDTEdOQlFYaENMRU5CUVZZc1EwRkdkVUlzUTBGSmRrSTdPMEZCUTBFc1VVRkJTVU1zV1VGQldTeEhRVUZIUXl4TlFVRk5MRU5CUVVORExHMUNRVUZRTEVOQlFUSkNMR05CUVROQ0xFTkJRVzVDTzBGQlEwRXNVVUZCU1VNc1YwRkJWeXhIUVVGSFJpeE5RVUZOTEVOQlFVTkRMRzFDUVVGUUxFTkJRVEpDTEdGQlFUTkNMRU5CUVd4Q08wRkJRMEVzVVVGQlNVVXNXVUZCV1N4SFFVRkhTQ3hOUVVGTkxFTkJRVU5ETEcxQ1FVRlFMRU5CUVRKQ0xHTkJRVE5DTEVOQlFXNUNPMEZCUTBFc1VVRkJTVFJDTEZsQlFWa3NSMEZCUnpkQ0xFMUJRVTBzUTBGQlEwTXNiVUpCUVZBc1EwRkJNa0lzWTBGQk0wSXNRMEZCYmtJN1FVRkRRU3hSUVVGSk5rSXNVMEZCVXl4SFFVRkhPVUlzVFVGQlRTeERRVUZEUXl4dFFrRkJVQ3hEUVVFeVFpeFhRVUV6UWl4RFFVRm9RaXhEUVZSMVFpeERRVmQyUWpzN1FVRkRRU3hSUVVGTlNTeE5RVUZOTEVkQlFVY3NRMEZCUXl4VFFVRkVMRVZCUVZrc1ZVRkJXaXhGUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhQUVVGcVF5eEZRVUV3UXl4TFFVRXhReXhEUVVGbUxFTkJXblZDTEVOQlkzWkNPenRCUVVOQkxGRkJRVTFETEVsQlFVa3NSMEZCUnp0QlFVTlVSQ3hOUVVGQlFTeE5RVUZOTEVWQlFVVkJMRTFCUkVNN1FVRkZWRVVzVFVGQlFVRXNVVUZCVVN4RlFVRkZMRU5CUTA0N1FVRkRTVU1zVVVGQlFVRXNTMEZCU3l4RlFVRkZMRmRCUkZnN1FVRkZTVVlzVVVGQlFVRXNTVUZCU1N4RlFVRkZhRUlzYTBKQlFXdENMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFZEJRVW9zUlVGQlV5eERRVUZVTEVOQlJqVkNPMEZCUjBsdFFpeFJRVUZCUVN4bFFVRmxMRVZCUVVVc1EwRkJRMVlzV1VGQlJDeEZRVUZsUnl4WFFVRm1MRVZCUVRSQ1F5eFpRVUUxUWl4RlFVRXdRekJDTEZsQlFURkRMRVZCUVhkRVF5eFRRVUY0UkR0QlFVaHlRaXhQUVVSTk8wRkJSa1FzUzBGQllpeERRV1oxUWl4RFFUQkNka0k3TzBGQlEwRXNVVUZCVFc1Q0xFMUJRVTBzUjBGQlJ6dEJRVU5ZUXl4TlFVRkJRU3hKUVVGSkxFVkJRVVVzUzBGRVN6dEJRVVZZVGl4TlFVRkJRU3hKUVVGSkxFVkJRVVZCTEVsQlJrczdRVUZIV0U4c1RVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlEweERMRkZCUVVGQkxFOUJRVThzUlVGQlJUdEJRVU5NUXl4VlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGRFNFTXNXVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJSRTQ3UVVGRVJpeFRRVVJLTzBGQlRVeERMRkZCUVVGQkxGVkJRVlVzUlVGQlJUdEJRVTVRTzBGQlNFVXNTMEZCWml4RFFUTkNkVUlzUTBGM1EzWkNPenRCUVVOQkxGRkJRVWxQTEU5QlFVOHNSMEZCUnl4SlFVRkpReXhMUVVGS0xFTkJRVlUzUWl4SFFVRldMRVZCUVdWbExFMUJRV1lzUTBGQlpEdEJRVU5JTEVkQk1VTkVPenRCUVRSRFFTeE5RVUZKYjBJc1VVRkJVU3hIUVVGSExGTkJRVmhCTEZGQlFWY3NSMEZCV1R0QlFVTjJRanRCUVVOQkxGRkJRVWx1UXl4SFFVRkhMRWRCUVVkRExGRkJRVkVzUTBGQlEwTXNZMEZCVkN4RFFVRjNRaXhqUVVGNFFpeERRVUZXTEVOQlJuVkNMRU5CU1haQ096dEJRVU5CTEZGQlFVbERMRmxCUVZrc1IwRkJSME1zVFVGQlRTeERRVUZEUXl4dFFrRkJVQ3hEUVVFeVFpeGpRVUV6UWl4RFFVRnVRanRCUVVOQkxGRkJRVWxETEZkQlFWY3NSMEZCUjBZc1RVRkJUU3hEUVVGRFF5eHRRa0ZCVUN4RFFVRXlRaXhoUVVFelFpeERRVUZzUWp0QlFVTkJMRkZCUVVrclFpeG5Ra0ZCWjBJc1IwRkJSMmhETEUxQlFVMHNRMEZCUTBNc2JVSkJRVkFzUTBGQk1rSXNiVUpCUVROQ0xFTkJRWFpDTEVOQlVIVkNMRU5CVTNaQ096dEJRVU5CTEZGQlFVbEhMRlZCUVZVc1IwRkJSMG9zVFVGQlRTeERRVUZEUXl4dFFrRkJVQ3hEUVVFeVFpeHpRa0ZCTTBJc1EwRkJha0lzUTBGV2RVSXNRMEZaZGtJN08wRkJRMEVzVVVGQlRVa3NUVUZCVFN4SFFVRkhMRU5CUVVNc1UwRkJSQ3hGUVVGWkxGVkJRVm9zUlVGQmQwSXNUMEZCZUVJc1JVRkJhVU1zVDBGQmFrTXNSVUZCTUVNc1MwRkJNVU1zUlVGQmFVUXNUVUZCYWtRc1JVRkJlVVFzVFVGQmVrUXNSVUZCYVVVc1VVRkJha1VzUlVGQk1rVXNWMEZCTTBVc1JVRkJkMFlzVTBGQmVFWXNSVUZCYlVjc1ZVRkJia2NzUlVGQkswY3NWVUZCTDBjc1EwRkJaaXhEUVdKMVFpeERRV1YyUWpzN1FVRkRRU3hSUVVGTlF5eEpRVUZKTEVkQlFVYzdRVUZEVkVRc1RVRkJRVUVzVFVGQlRTeEZRVUZGUVN4TlFVUkRPMEZCUlZSRkxFMUJRVUZCTEZGQlFWRXNSVUZCUlN4RFFVTk9PMEZCUTBsRExGRkJRVUZCTEV0QlFVc3NSVUZCUlN4WFFVUllPMEZCUlVsR0xGRkJRVUZCTEVsQlFVa3NSVUZCUldoQ0xHdENRVUZyUWl4RFFVRkRMRVZCUVVRc1JVRkJTeXhIUVVGTUxFVkJRVlVzUlVGQlZpeERRVVkxUWp0QlFVZEpjVU1zVVVGQlFVRXNWMEZCVnl4RlFVRkZOVUlzV1VGSWFrSTdRVUZKU1ZVc1VVRkJRVUVzWlVGQlpTeEZRVUZGTEdGQlNuSkNPMEZCUzBsRExGRkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVeFlMRTlCUkUwc1JVRlJUanRCUVVOSlJpeFJRVUZCUVN4TFFVRkxMRVZCUVVVc1YwRkVXRHRCUVVWSlJpeFJRVUZCUVN4SlFVRkpMRVZCUVVWb1FpeHJRa0ZCYTBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUlVGQlNpeEZRVUZSTEVWQlFWSXNRMEZHTlVJN1FVRkhTVzFDTEZGQlFVRkJMR1ZCUVdVc1JVRkJSVkFzVjBGSWNrSTdRVUZKU1hsQ0xGRkJRVUZCTEZkQlFWY3NSVUZCUlhwQ0xGZEJTbXBDTzBGQlMwbFJMRkZCUVVGQkxFdEJRVXNzUlVGQlJTeFZRVXhZTzBGQlRVbEZMRkZCUVVGQkxFbEJRVWtzUlVGQlJUdEJRVTVXTEU5QlVrMDdRVUZHUkN4TFFVRmlMRU5CYUVKMVFpeERRWE5EZGtJN08wRkJRMEVzVVVGQlRVUXNUVUZCVFN4SFFVRkhPMEZCUTFoRExFMUJRVUZCTEVsQlFVa3NSVUZCUlN4TlFVUkxPMEZCUlZoT0xFMUJRVUZCTEVsQlFVa3NSVUZCUlVFc1NVRkdTenRCUVVkWVR5eE5RVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkRURU1zVVVGQlFVRXNUMEZCVHl4RlFVRkZPMEZCUTB4RExGVkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVTklReXhaUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFVGp0QlFVUkdMRk5CUkVvN1FVRk5URU1zVVVGQlFVRXNWVUZCVlN4RlFVRkZMRWxCVGxBN1FVRlBURU1zVVVGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFSRExGVkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVUkdMRk5CVUZJN1FVRlZURU1zVVVGQlFVRXNUVUZCVFN4RlFVRkZPMEZCUTBwSExGVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRSQ3haUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZFVmp0QlFVUkRPMEZCVmtnc1QwRklSVHRCUVcxQ1dGY3NUVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRMDVETEZGQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVOR1F5eFZRVUZCUVN4TlFVRk5MRVZCUVVVN1FVRkVUanRCUVVSQk8wRkJia0pETEV0QlFXWXNRMEYyUTNWQ0xFTkJhVVYyUWpzN1FVRkRRU3hSUVVGSldDeFBRVUZQTEVkQlFVY3NTVUZCU1VNc1MwRkJTaXhEUVVGVk4wSXNSMEZCVml4RlFVRmxaU3hOUVVGbUxFTkJRV1E3UVVGRFNDeEhRVzVGUkRzN1FVRnhSVUVzVFVGQlNYbENMRkZCUVZFc1IwRkJSeXhUUVVGWVFTeFJRVUZYTEVkQlFWazdRVUZEZGtJN1FVRkRRU3hSUVVGSmVFTXNSMEZCUnl4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdOQlFWUXNRMEZCZDBJc1kwRkJlRUlzUTBGQlZpeERRVVoxUWl4RFFVbDJRanM3UVVGRFFTeFJRVUZKWjBNc1UwRkJVeXhIUVVGSE9VSXNUVUZCVFN4RFFVRkRReXh0UWtGQlVDeERRVUV5UWl4WFFVRXpRaXhEUVVGb1FqdEJRVU5CTEZGQlFVbHZReXhqUVVGakxFZEJRVWR5UXl4TlFVRk5MRU5CUVVORExHMUNRVUZRTEVOQlFUSkNMR2xDUVVFelFpeERRVUZ5UWp0QlFVTkJMRkZCUVVrMFFpeFpRVUZaTEVkQlFVYzNRaXhOUVVGTkxFTkJRVU5ETEcxQ1FVRlFMRU5CUVRKQ0xHTkJRVE5DTEVOQlFXNUNPMEZCUTBFc1VVRkJTWEZETEdsQ1FVRnBRaXhIUVVGSGRFTXNUVUZCVFN4RFFVRkRReXh0UWtGQlVDeERRVUV5UWl4dlFrRkJNMElzUTBGQmVFSTdRVUZEUVN4UlFVRkpSaXhaUVVGWkxFZEJRVWRETEUxQlFVMHNRMEZCUTBNc2JVSkJRVkFzUTBGQk1rSXNZMEZCTTBJc1EwRkJia0k3UVVGRFFTeFJRVUZKYzBNc2FVSkJRV2xDTEVkQlFVZDJReXhOUVVGTkxFTkJRVU5ETEcxQ1FVRlFMRU5CUVRKQ0xHOUNRVUV6UWl4RFFVRjRRaXhEUVZaMVFpeERRVmwyUWpzN1FVRkRRU3hSUVVGSlJ5eFZRVUZWTEVkQlFVZEtMRTFCUVUwc1EwRkJRME1zYlVKQlFWQXNRMEZCTWtJc2MwSkJRVE5DTEVOQlFXcENMRU5CWW5WQ0xFTkJaWFpDT3p0QlFVTkJMRkZCUVUxSkxFMUJRVTBzUjBGQlJ5eERRVUZETEZOQlFVUXNSVUZCV1N4VlFVRmFMRVZCUVhkQ0xFOUJRWGhDTEVWQlFXbERMRTlCUVdwRExFVkJRVEJETEV0QlFURkRMRVZCUVdsRUxFMUJRV3BFTEVOQlFXWXNRMEZvUW5WQ0xFTkJhMEoyUWpzN1FVRkRRU3hSUVVGTlF5eEpRVUZKTEVkQlFVYzdRVUZEVkVRc1RVRkJRVUVzVFVGQlRTeEZRVUZGUVN4TlFVUkRPMEZCUlZSRkxFMUJRVUZCTEZGQlFWRXNSVUZCUlN4RFFVTk9PMEZCUTBsRExGRkJRVUZCTEV0QlFVc3NSVUZCUlN4WFFVUllPMEZCUlVsR0xGRkJRVUZCTEVsQlFVa3NSVUZCUldoQ0xHdENRVUZyUWl4RFFVRkRMRVZCUVVRc1JVRkJTeXhGUVVGTUxFVkJRVk1zUTBGQlZDeERRVVkxUWp0QlFVZEpjVU1zVVVGQlFVRXNWMEZCVnl4RlFVRkZSeXhUUVVocVFqdEJRVWxKY2tJc1VVRkJRVUVzWlVGQlpTeEZRVUZGTkVJN1FVRktja0lzVDBGRVRTeEZRVTlPTzBGQlEwazNRaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNWMEZFV0R0QlFVVkpSaXhSUVVGQlFTeEpRVUZKTEVWQlFVVm9RaXhyUWtGQmEwSXNRMEZCUXl4RlFVRkVMRVZCUVVzc1JVRkJUQ3hGUVVGVExFTkJRVlFzUTBGR05VSTdRVUZIU1cxQ0xGRkJRVUZCTEdWQlFXVXNSVUZCUlRaQ0xHbENRVWh5UWp0QlFVbEpXQ3hSUVVGQlFTeFhRVUZYTEVWQlFVVkZPMEZCU21wQ0xFOUJVRTBzUlVGaFRqdEJRVU5KY2tJc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEZkQlJGZzdRVUZGU1VZc1VVRkJRVUVzU1VGQlNTeEZRVUZGYUVJc2EwSkJRV3RDTEVOQlFVTXNRMEZCUkN4RlFVRkpMRVZCUVVvc1JVRkJVU3hEUVVGU0xFTkJSalZDTzBGQlIwbHRRaXhSUVVGQlFTeGxRVUZsTEVWQlFVVTRRaXhwUWtGSWNrSTdRVUZKU1Zvc1VVRkJRVUVzVjBGQlZ5eEZRVUZGTlVJN1FVRktha0lzVDBGaVRUdEJRVVpFTEV0QlFXSXNRMEZ1UW5WQ0xFTkJNa04yUWpzN1FVRkRRU3hSUVVGTldTeE5RVUZOTEVkQlFVYzdRVUZEV0VNc1RVRkJRVUVzU1VGQlNTeEZRVUZGTEU5QlJFczdRVUZGV0U0c1RVRkJRVUVzU1VGQlNTeEZRVUZGUVN4SlFVWkxPMEZCUjFoUExFMUJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVTk1ReXhSUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZEVEVNc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlEwaERMRmxCUVVGQkxFOUJRVThzUlVGQlJUdEJRVVJPTzBGQlJFWXNVMEZFU2p0QlFVMU1ReXhSUVVGQlFTeFZRVUZWTEVWQlFVVTdRVUZPVUR0QlFVaEZMRXRCUVdZc1EwRTFRM1ZDTEVOQmVVUjJRanM3UVVGRFFTeFJRVUZKVHl4UFFVRlBMRWRCUVVjc1NVRkJTVU1zUzBGQlNpeERRVUZWTjBJc1IwRkJWaXhGUVVGbFpTeE5RVUZtTEVOQlFXUTdRVUZEU0N4SFFUTkVSRHM3UVVFMlJFRXNVMEZCVHp0QlFVTklPMEZCUTBFMlFpeEpRVUZCUVN4SlFVRkpMRVZCUVVVc1owSkJRVms3UVVGRFpEdEJRVU5CWml4TlFVRkJRU3hMUVVGTExFTkJRVU5STEZGQlFVNHNRMEZCWlVNc1NVRkJaaXhEUVVGdlFrOHNTVUZCY0VJc1IwRkJNa0lzUlVGQk0wSTdRVUZEUVdoQ0xFMUJRVUZCTEV0QlFVc3NRMEZCUTFFc1VVRkJUaXhEUVVGbFF5eEpRVUZtTEVOQlFXOUNReXhOUVVGd1FpeEhRVUUyUW01RExFMUJRVTBzUTBGQlEwTXNiVUpCUVZBc1EwRkJNa0lzYzBKQlFUTkNMRU5CUVRkQ08wRkJSVUZPTEUxQlFVRkJMRkZCUVZFN1FVRkRVaXRDTEUxQlFVRkJMRkZCUVZFN1FVRkRVa1VzVFVGQlFVRXNVVUZCVVR0QlFVTlNSeXhOUVVGQlFTeFJRVUZSTzBGQlExSkxMRTFCUVVGQkxGRkJRVkU3UVVGRFdEdEJRVnBGTEVkQlFWQTdRVUZqU0N4RFFYQlZjMElzUlVGQmRrSXNReXhEUVhOVlFUczdPMEZCUTBGd1F5eE5RVUZOTEVOQlFVTXdReXhyUWtGQlVDeERRVUV3UWl4WlFVRlpPMEZCUTJ4RE0wUXNSVUZCUVVFc1owSkJRV2RDTEVOQlFVTjVSQ3hKUVVGcVFqdEJRVU5JTEVOQlJrUWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOXlaWE52ZFhKalpYTXZZWE56WlhSekwyTnZjbVV2YW5NdlkzVnpkRzl0TDJSdlkzVnRaVzUwWVhScGIyNHZZMmhoY25SekwyTm9ZWEowYW5NdWFuTS9aREkyTkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2NseHVYSEpjYmk4dklFTnNZWE56SUdSbFptbHVhWFJwYjI1Y2NseHVkbUZ5SUV0VVIyVnVaWEpoYkVOb1lYSjBTbE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQXZMeUJTWVc1a2IyMXBlbVZ5SUdaMWJtTjBhVzl1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJuWlhSU1lXNWtiMjBvYldsdUlEMGdNU3dnYldGNElEMGdNVEF3S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1Wm14dmIzSW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlDaHRZWGdnTFNCdGFXNHBJQ3NnYldsdUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaVkpoYm1SdmJVUmhkR0VvYldsdUlEMGdNU3dnYldGNElEMGdNVEF3TENCamIzVnVkQ0E5SURFd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHRnljaUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTI5MWJuUTdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNuSXVjSFZ6YUNoblpYUlNZVzVrYjIwb2JXbHVMQ0J0WVhncEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCUWNtbDJZWFJsSUdaMWJtTjBhVzl1YzF4eVhHNGdJQ0FnZG1GeUlHVjRZVzF3YkdVeElEMGdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRVJsWm1sdVpTQmphR0Z5ZENCbGJHVnRaVzUwWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR04wZUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkcmRGOWphR0Z5ZEdwelh6RW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUkdWbWFXNWxJR052Ykc5eWMxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtbHRZWEo1UTI5c2IzSWdQU0JMVkZWMGFXd3VaMlYwUTNOelZtRnlhV0ZpYkdWV1lXeDFaU2duTFMxaWN5MXdjbWx0WVhKNUp5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhibWRsY2tOdmJHOXlJRDBnUzFSVmRHbHNMbWRsZEVOemMxWmhjbWxoWW14bFZtRnNkV1VvSnkwdFluTXRaR0Z1WjJWeUp5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITjFZMk5sYzNORGIyeHZjaUE5SUV0VVZYUnBiQzVuWlhSRGMzTldZWEpwWVdKc1pWWmhiSFZsS0NjdExXSnpMWE4xWTJObGMzTW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUkdWbWFXNWxJR1p2Ym5SelhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdadmJuUkdZVzFwYkhrZ1BTQkxWRlYwYVd3dVoyVjBRM056Vm1GeWFXRmliR1ZXWVd4MVpTZ25MUzFpY3kxbWIyNTBMWE5oYm5NdGMyVnlhV1luS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGhjblFnYkdGaVpXeHpYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiR0ZpWld4eklEMGdXeWRLWVc1MVlYSjVKeXdnSjBabFluSjFZWEo1Snl3Z0owMWhjbU5vSnl3Z0owRndjbWxzSnl3Z0owMWhlU2NzSUNkS2RXNWxKeXdnSjBwMWJIa25MQ0FuUVhWbmRYTjBKeXdnSjFObGNIUmxiV0psY2ljc0lDZFBZM1J2WW1WeUp5d2dKMDV2ZG1WdFltVnlKeXdnSjBSbFkyVnRZbVZ5SjEwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFTm9ZWEowSUdSaGRHRmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiSE02SUd4aFltVnNjeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVhObGRITTZJRnRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEb2dKMFJoZEdGelpYUWdNU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ1oyVnVaWEpoZEdWU1lXNWtiMjFFWVhSaEtERXNJREV3TUN3Z01USXBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2pvZ2NISnBiV0Z5ZVVOdmJHOXlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZV05yT2lBblUzUmhZMnNnTUNjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc09pQW5SR0YwWVhObGRDQXlKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCblpXNWxjbUYwWlZKaGJtUnZiVVJoZEdFb01Td2dNVEF3TENBeE1pa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpFTnZiRzl5T2lCa1lXNW5aWEpEYjJ4dmNpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRmphem9nSjFOMFlXTnJJREVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkRvZ0owUmhkR0Z6WlhRZ015Y3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWjJWdVpYSmhkR1ZTWVc1a2IyMUVZWFJoS0RFc0lERXdNQ3dnTVRJcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nYzNWalkyVnpjME52Ykc5eUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlXTnJPaUFuVTNSaFkyc2dNaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZFhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUTJoaGNuUWdZMjl1Wm1sblhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXVabWxuSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWW1GeUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nWkdGMFlTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR3gxWjJsdWN6b2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBkR3hsT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhrNklHWmhiSE5sTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1emFYWmxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzUwWlhKaFkzUnBiMjQ2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5SbGNuTmxZM1E2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoWTJ0bFpEb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGs2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhZMnRsWkRvZ2RISjFaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFbHVhWFFnUTJoaGNuUktVeUF0TFNCbWIzSWdiVzl5WlNCcGJtWnZMQ0J3YkdWaGMyVWdkbWx6YVhRNklHaDBkSEJ6T2k4dmQzZDNMbU5vWVhKMGFuTXViM0puTDJSdlkzTXZiR0YwWlhOMEwxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdGVVTm9ZWEowSUQwZ2JtVjNJRU5vWVhKMEtHTjBlQ3dnWTI5dVptbG5LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMllYSWdaWGhoYlhCc1pUSWdQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnUkdWbWFXNWxJR05vWVhKMElHVnNaVzFsYm5SY2NseHVJQ0FnSUNBZ0lDQjJZWElnWTNSNElEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oydDBYMk5vWVhKMGFuTmZNaWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRVpXWnBibVVnWTI5c2IzSnpYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIQnlhVzFoY25sRGIyeHZjaUE5SUV0VVZYUnBiQzVuWlhSRGMzTldZWEpwWVdKc1pWWmhiSFZsS0NjdExXSnpMWEJ5YVcxaGNua25LVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdaR0Z1WjJWeVEyOXNiM0lnUFNCTFZGVjBhV3d1WjJWMFEzTnpWbUZ5YVdGaWJHVldZV3gxWlNnbkxTMWljeTFrWVc1blpYSW5LVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjM1ZqWTJWemMwTnZiRzl5SUQwZ1MxUlZkR2xzTG1kbGRFTnpjMVpoY21saFlteGxWbUZzZFdVb0p5MHRZbk10YzNWalkyVnpjeWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRVpXWnBibVVnWm05dWRITmNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1ptOXVkRVpoYldsc2VTQTlJRXRVVlhScGJDNW5aWFJEYzNOV1lYSnBZV0pzWlZaaGJIVmxLQ2N0TFdKekxXWnZiblF0YzJGdWN5MXpaWEpwWmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkRhR0Z5ZENCc1lXSmxiSE5jY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JzWVdKbGJITWdQU0JiSjBwaGJuVmhjbmtuTENBblJtVmljblZoY25rbkxDQW5UV0Z5WTJnbkxDQW5RWEJ5YVd3bkxDQW5UV0Y1Snl3Z0owcDFibVVuTENBblNuVnNlU2RkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRGFHRnlkQ0JrWVhSaFhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXeHpPaUJzWVdKbGJITXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0Z6WlhSek9pQmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld3NklDZEVZWFJoYzJWMElERW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdkbGJtVnlZWFJsVW1GdVpHOXRSR0YwWVNneExDQTFNQ3dnTnlrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05eVpHVnlRMjlzYjNJNklIQnlhVzFoY25sRGIyeHZjaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtRMjlzYjNJNklDZDBjbUZ1YzNCaGNtVnVkQ2RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c2SUNkRVlYUmhjMlYwSURJbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJR2RsYm1WeVlYUmxVbUZ1Wkc5dFJHRjBZU2d4TENBMU1Dd2dOeWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeVEyOXNiM0k2SUdSaGJtZGxja052Ykc5eUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nSjNSeVlXNXpjR0Z5Wlc1MEoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFTm9ZWEowSUdOdmJtWnBaMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Ym1acFp5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyeHBibVVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQmtZWFJoTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JIVm5hVzV6T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5wZG1VNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkpibWwwSUVOb1lYSjBTbE1nTFMwZ1ptOXlJRzF2Y21VZ2FXNW1ieXdnY0d4bFlYTmxJSFpwYzJsME9pQm9kSFJ3Y3pvdkwzZDNkeTVqYUdGeWRHcHpMbTl5Wnk5a2IyTnpMMnhoZEdWemRDOWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JYbERhR0Z5ZENBOUlHNWxkeUJEYUdGeWRDaGpkSGdzSUdOdmJtWnBaeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnlJR1Y0WVcxd2JHVXpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVSbFptbHVaU0JqYUdGeWRDQmxiR1Z0Wlc1MFhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdOMGVDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZHJkRjlqYUdGeWRHcHpYek1uS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1JHVm1hVzVsSUdOdmJHOXljMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQndjbWx0WVhKNVEyOXNiM0lnUFNCTFZGVjBhV3d1WjJWMFEzTnpWbUZ5YVdGaWJHVldZV3gxWlNnbkxTMWljeTF3Y21sdFlYSjVKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1JoYm1kbGNrTnZiRzl5SUQwZ1MxUlZkR2xzTG1kbGRFTnpjMVpoY21saFlteGxWbUZzZFdVb0p5MHRZbk10WkdGdVoyVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE4xWTJObGMzTkRiMnh2Y2lBOUlFdFVWWFJwYkM1blpYUkRjM05XWVhKcFlXSnNaVlpoYkhWbEtDY3RMV0p6TFhOMVkyTmxjM01uS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZDJGeWJtbHVaME52Ykc5eUlEMGdTMVJWZEdsc0xtZGxkRU56YzFaaGNtbGhZbXhsVm1Gc2RXVW9KeTB0WW5NdGQyRnlibWx1WnljcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtWnZRMjlzYjNJZ1BTQkxWRlYwYVd3dVoyVjBRM056Vm1GeWFXRmliR1ZXWVd4MVpTZ25MUzFpY3kxcGJtWnZKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVOb1lYSjBJR3hoWW1Wc2MxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGhZbVZzY3lBOUlGc25TbUZ1ZFdGeWVTY3NJQ2RHWldKeWRXRnllU2NzSUNkTllYSmphQ2NzSUNkQmNISnBiQ2NzSUNkTllYa25YVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUTJoaGNuUWdaR0YwWVZ4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc2N6b2diR0ZpWld4ekxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhjMlYwY3pvZ1cxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzT2lBblJHRjBZWE5sZENBeEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJuWlc1bGNtRjBaVkpoYm1SdmJVUmhkR0VvTVN3Z01UQXdMQ0ExS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVdOclozSnZkVzVrUTI5c2IzSTZJRnR3Y21sdFlYSjVRMjlzYjNJc0lHUmhibWRsY2tOdmJHOXlMQ0J6ZFdOalpYTnpRMjlzYjNJc0lIZGhjbTVwYm1kRGIyeHZjaXdnYVc1bWIwTnZiRzl5WFZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1hWeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVOb1lYSjBJR052Ym1acFoxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZibVpwWnlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNCcFpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdSaGRHRXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzZFdkcGJuTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNU9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6Y0c5dWMybDJaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVsdWFYUWdRMmhoY25SS1V5QXRMU0JtYjNJZ2JXOXlaU0JwYm1adkxDQndiR1ZoYzJVZ2RtbHphWFE2SUdoMGRIQnpPaTh2ZDNkM0xtTm9ZWEowYW5NdWIzSm5MMlJ2WTNNdmJHRjBaWE4wTDF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0ZVVOb1lYSjBJRDBnYm1WM0lFTm9ZWEowS0dOMGVDd2dZMjl1Wm1sbktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1pYaGhiWEJzWlRRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtYVc1bElHTm9ZWEowSUdWc1pXMWxiblJjY2x4dUlDQWdJQ0FnSUNCMllYSWdZM1I0SUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJ0MFgyTm9ZWEowYW5OZk5DY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJFWldacGJtVWdZMjlzYjNKelhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhCeWFXMWhjbmxEYjJ4dmNpQTlJRXRVVlhScGJDNW5aWFJEYzNOV1lYSnBZV0pzWlZaaGJIVmxLQ2N0TFdKekxYQnlhVzFoY25rbktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRnVaMlZ5UTI5c2IzSWdQU0JMVkZWMGFXd3VaMlYwUTNOelZtRnlhV0ZpYkdWV1lXeDFaU2duTFMxaWN5MWtZVzVuWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRnVaMlZ5VEdsbmFIUkRiMnh2Y2lBOUlFdFVWWFJwYkM1blpYUkRjM05XWVhKcFlXSnNaVlpoYkhWbEtDY3RMV0p6TFd4cFoyaDBMV1JoYm1kbGNpY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJFWldacGJtVWdabTl1ZEhOY2NseHVJQ0FnSUNBZ0lDQjJZWElnWm05dWRFWmhiV2xzZVNBOUlFdFVWWFJwYkM1blpYUkRjM05XWVhKcFlXSnNaVlpoYkhWbEtDY3RMV0p6TFdadmJuUXRjMkZ1Y3kxelpYSnBaaWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRGFHRnlkQ0JzWVdKbGJITmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnNZV0psYkhNZ1BTQmJKMHBoYm5WaGNua25MQ0FuUm1WaWNuVmhjbmtuTENBblRXRnlZMmduTENBblFYQnlhV3duTENBblRXRjVKeXdnSjBwMWJtVW5MQ0FuU25Wc2VTY3NJQ2RCZFdkMWMzUW5MQ0FuVTJWd2RHVnRZbVZ5Snl3Z0owOWpkRzlpWlhJbkxDQW5UbTkyWlcxaVpYSW5MQ0FuUkdWalpXMWlaWEluWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGhjblFnWkdGMFlWeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4aFltVnNjem9nYkdGaVpXeHpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoYzJWMGN6b2dXMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc09pQW5SR0YwWVhObGRDQXhKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCblpXNWxjbUYwWlZKaGJtUnZiVVJoZEdFb05UQXNJREV3TUN3Z01USXBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZjbVJsY2tOdmJHOXlPaUJ3Y21sdFlYSjVRMjlzYjNJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkVOdmJHOXlPaUFuZEhKaGJuTndZWEpsYm5RbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlXTnJPaUFuWTI5dFltbHVaV1FuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzT2lBblJHRjBZWE5sZENBeUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJuWlc1bGNtRjBaVkpoYm1SdmJVUmhkR0VvTVN3Z05qQXNJREV5S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVdOclozSnZkVzVrUTI5c2IzSTZJR1JoYm1kbGNrTnZiRzl5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNrTnZiRzl5T2lCa1lXNW5aWEpEYjJ4dmNpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRmphem9nSjJOdmJXSnBibVZrSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5ZbUZ5SjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGhjblFnWTI5dVptbG5YSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl1Wm1sbklEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmJHbHVaU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklHUmhkR0VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc2RXZHBibk02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVhSc1pUb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemNHOXVjMmwyWlRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWRHVnlZV04wYVc5dU9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNTBaWEp6WldOME9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pYTTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlXTnJaV1E2SUhSeWRXVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhSek9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1ME9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRnRhV3g1T2lBbmFXNW9aWEpwZENjc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCSmJtbDBJRU5vWVhKMFNsTWdMUzBnWm05eUlHMXZjbVVnYVc1bWJ5d2djR3hsWVhObElIWnBjMmwwT2lCb2RIUndjem92TDNkM2R5NWphR0Z5ZEdwekxtOXlaeTlrYjJOekwyeGhkR1Z6ZEM5Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYlhsRGFHRnlkQ0E5SUc1bGR5QkRhR0Z5ZENoamRIZ3NJR052Ym1acFp5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZG1GeUlHVjRZVzF3YkdVMUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRVJsWm1sdVpTQmphR0Z5ZENCbGJHVnRaVzUwWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR04wZUNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkcmRGOWphR0Z5ZEdwelh6VW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUkdWbWFXNWxJR052Ykc5eWMxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtWnZRMjlzYjNJZ1BTQkxWRlYwYVd3dVoyVjBRM056Vm1GeWFXRmliR1ZXWVd4MVpTZ25MUzFpY3kxcGJtWnZKeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2x1Wm05TWFXZG9kRU52Ykc5eUlEMGdTMVJWZEdsc0xtZGxkRU56YzFaaGNtbGhZbXhsVm1Gc2RXVW9KeTB0WW5NdGJHbG5hSFF0YVc1bWJ5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjNZWEp1YVc1blEyOXNiM0lnUFNCTFZGVjBhV3d1WjJWMFEzTnpWbUZ5YVdGaWJHVldZV3gxWlNnbkxTMWljeTEzWVhKdWFXNW5KeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSGRoY201cGJtZE1hV2RvZEVOdmJHOXlJRDBnUzFSVmRHbHNMbWRsZEVOemMxWmhjbWxoWW14bFZtRnNkV1VvSnkwdFluTXRiR2xuYUhRdGQyRnlibWx1WnljcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtbHRZWEo1UTI5c2IzSWdQU0JMVkZWMGFXd3VaMlYwUTNOelZtRnlhV0ZpYkdWV1lXeDFaU2duTFMxaWN5MXdjbWx0WVhKNUp5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIQnlhVzFoY25sTWFXZG9kRU52Ykc5eUlEMGdTMVJWZEdsc0xtZGxkRU56YzFaaGNtbGhZbXhsVm1Gc2RXVW9KeTB0WW5NdGJHbG5hSFF0Y0hKcGJXRnllU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRVpXWnBibVVnWm05dWRITmNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1ptOXVkRVpoYldsc2VTQTlJRXRVVlhScGJDNW5aWFJEYzNOV1lYSnBZV0pzWlZaaGJIVmxLQ2N0TFdKekxXWnZiblF0YzJGdWN5MXpaWEpwWmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkRhR0Z5ZENCc1lXSmxiSE5jY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JzWVdKbGJITWdQU0JiSjBwaGJuVmhjbmtuTENBblJtVmljblZoY25rbkxDQW5UV0Z5WTJnbkxDQW5RWEJ5YVd3bkxDQW5UV0Y1Snl3Z0owcDFibVVuWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGhjblFnWkdGMFlWeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4aFltVnNjem9nYkdGaVpXeHpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoYzJWMGN6b2dXMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc09pQW5SR0YwWVhObGRDQXhKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCblpXNWxjbUYwWlZKaGJtUnZiVVJoZEdFb01qQXNJRGd3TENBMktTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIzSmtaWEpEYjJ4dmNqb2dhVzVtYjBOdmJHOXlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2pvZ2FXNW1iMHhwWjJoMFEyOXNiM0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzT2lBblJHRjBZWE5sZENBeUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJuWlc1bGNtRjBaVkpoYm1SdmJVUmhkR0VvTVRBc0lEWXdMQ0EyS1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVdOclozSnZkVzVrUTI5c2IzSTZJSGRoY201cGJtZE1hV2RvZEVOdmJHOXlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZjbVJsY2tOdmJHOXlPaUIzWVhKdWFXNW5RMjlzYjNJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc09pQW5SR0YwWVhObGRDQXpKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCblpXNWxjbUYwWlZKaGJtUnZiVVJoZEdFb01Dd2dPREFzSURZcExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nY0hKcGJXRnllVXhwWjJoMFEyOXNiM0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeVEyOXNiM0k2SUhCeWFXMWhjbmxEYjJ4dmNpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGhjblFnWTI5dVptbG5YSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl1Wm1sbklEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNtRmtZWEluTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQmtZWFJoTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JIVm5hVzV6T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5wZG1VNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkpibWwwSUVOb1lYSjBTbE1nTFMwZ1ptOXlJRzF2Y21VZ2FXNW1ieXdnY0d4bFlYTmxJSFpwYzJsME9pQm9kSFJ3Y3pvdkwzZDNkeTVqYUdGeWRHcHpMbTl5Wnk5a2IyTnpMMnhoZEdWemRDOWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JYbERhR0Z5ZENBOUlHNWxkeUJEYUdGeWRDaGpkSGdzSUdOdmJtWnBaeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJRZFdKc2FXTWdSblZ1WTNScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnYVc1cGREb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSGJHOWlZV3dnWm05dWRDQnpaWFIwYVc1bmN6b2dhSFIwY0hNNkx5OTNkM2N1WTJoaGNuUnFjeTV2Y21jdlpHOWpjeTlzWVhSbGMzUXZaMlZ1WlhKaGJDOW1iMjUwY3k1b2RHMXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFTm9ZWEowTG1SbFptRjFiSFJ6TG1admJuUXVjMmw2WlNBOUlERXpPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQkRhR0Z5ZEM1a1pXWmhkV3gwY3k1bWIyNTBMbVpoYldsc2VTQTlJRXRVVlhScGJDNW5aWFJEYzNOV1lYSnBZV0pzWlZaaGJIVmxLQ2N0TFdKekxXWnZiblF0YzJGdWN5MXpaWEpwWmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pURW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pUSW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pUTW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pUUW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pUVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzU5S0NrN1hISmNibHh5WEc0dkx5QlBiaUJrYjJOMWJXVnVkQ0J5WldGa2VWeHlYRzVMVkZWMGFXd3ViMjVFVDAxRGIyNTBaVzUwVEc5aFpHVmtLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUV0VVIyVnVaWEpoYkVOb1lYSjBTbE11YVc1cGRDZ3BPMXh5WEc1OUtUdGNjbHh1SWwwc0ltNWhiV1Z6SWpwYklrdFVSMlZ1WlhKaGJFTm9ZWEowU2xNaUxDSm5aWFJTWVc1a2IyMGlMQ0p0YVc0aUxDSnRZWGdpTENKTllYUm9JaXdpWm14dmIzSWlMQ0p5WVc1a2IyMGlMQ0puWlc1bGNtRjBaVkpoYm1SdmJVUmhkR0VpTENKamIzVnVkQ0lzSW1GeWNpSXNJbWtpTENKd2RYTm9JaXdpWlhoaGJYQnNaVEVpTENKamRIZ2lMQ0prYjJOMWJXVnVkQ0lzSW1kbGRFVnNaVzFsYm5SQ2VVbGtJaXdpY0hKcGJXRnllVU52Ykc5eUlpd2lTMVJWZEdsc0lpd2laMlYwUTNOelZtRnlhV0ZpYkdWV1lXeDFaU0lzSW1SaGJtZGxja052Ykc5eUlpd2ljM1ZqWTJWemMwTnZiRzl5SWl3aVptOXVkRVpoYldsc2VTSXNJbXhoWW1Wc2N5SXNJbVJoZEdFaUxDSmtZWFJoYzJWMGN5SXNJbXhoWW1Wc0lpd2lZbUZqYTJkeWIzVnVaRU52Ykc5eUlpd2ljM1JoWTJzaUxDSmpiMjVtYVdjaUxDSjBlWEJsSWl3aWIzQjBhVzl1Y3lJc0luQnNkV2RwYm5NaUxDSjBhWFJzWlNJc0ltUnBjM0JzWVhraUxDSnlaWE53YjI1emFYWmxJaXdpYVc1MFpYSmhZM1JwYjI0aUxDSnBiblJsY25ObFkzUWlMQ0p6WTJGc1pYTWlMQ0o0SWl3aWMzUmhZMnRsWkNJc0lua2lMQ0p0ZVVOb1lYSjBJaXdpUTJoaGNuUWlMQ0psZUdGdGNHeGxNaUlzSW1KdmNtUmxja052Ykc5eUlpd2laWGhoYlhCc1pUTWlMQ0ozWVhKdWFXNW5RMjlzYjNJaUxDSnBibVp2UTI5c2IzSWlMQ0psZUdGdGNHeGxOQ0lzSW1SaGJtZGxja3hwWjJoMFEyOXNiM0lpTENKa1pXWmhkV3gwY3lJc0ltWnZiblFpTENKbVlXMXBiSGtpTENKbGVHRnRjR3hsTlNJc0ltbHVabTlNYVdkb2RFTnZiRzl5SWl3aWQyRnlibWx1WjB4cFoyaDBRMjlzYjNJaUxDSndjbWx0WVhKNVRHbG5hSFJEYjJ4dmNpSXNJbWx1YVhRaUxDSnphWHBsSWl3aWIyNUVUMDFEYjI1MFpXNTBURzloWkdWa0lsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vY2hhcnRzL2NoYXJ0anMuanNcXG5cIik7XHJcblxyXG4vKioqLyB9KVxyXG5cclxuLyoqKioqKi8gXHR9KTtcclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyBzdGFydHVwXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgY2FuJ3QgYmUgaW5saW5lZCBiZWNhdXNlIHRoZSBldmFsLXNvdXJjZS1tYXAgZGV2dG9vbCBpcyB1c2VkLlxyXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XHJcbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1tcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2NoYXJ0cy9jaGFydGpzLmpzXCJdKCk7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIH0pKClcclxuOyJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2NoYXJ0cy9jaGFydGpzLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/charts/chartjs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/charts/chartjs.js"]();
/******/ 	
/******/ })()
;