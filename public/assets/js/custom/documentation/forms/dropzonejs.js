/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/forms/dropzonejs.js":
/*!*******************************************************************!*\
  !*** ./resources/src/js/custom/documentation/forms/dropzonejs.js ***!
  \*******************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\":\n    /*!***************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/forms/dropzonejs.js ***!\r\n      \\***************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationFormsDropzonejsJs() {\n      eval(\" // Class definition\\n\\nvar KTFormsDropzoneJSDemos = function () {\\n  // Private functions\\n  var exampleBasic = function exampleBasic() {\\n    // For more info about Dropzone plugin visit:  https://www.dropzonejs.com/#usage\\n    var myDropzone = new Dropzone(\\\"#kt_dropzonejs_example_1\\\", {\\n      url: \\\"https://keenthemes.com/scripts/void.php\\\",\\n      // Set the url for your upload script location\\n      paramName: \\\"file\\\",\\n      // The name that will be used to transfer the file\\n      maxFiles: 10,\\n      maxFilesize: 10,\\n      // MB\\n      addRemoveLinks: true,\\n      accept: function accept(file, done) {\\n        if (file.name == \\\"wow.jpg\\\") {\\n          done(\\\"Naha, you don't.\\\");\\n        } else {\\n          done();\\n        }\\n      }\\n    });\\n  };\\n\\n  var exampleQueue = function exampleQueue() {\\n    // set the dropzone container id\\n    var id = \\\"#kt_dropzonejs_example_2\\\";\\n    var dropzone = document.querySelector(id); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"https://preview.keenthemes.com/api/dropzone/void.php\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 20,\\n      previewTemplate: previewTemplate,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      autoQueue: false,\\n      // Make sure the files aren't queued until manually added\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: id + \\\" .dropzone-select\\\" // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hookup the start button\\n      file.previewElement.querySelector(id + \\\" .dropzone-start\\\").onclick = function () {\\n        myDropzone.enqueueFile(file);\\n      };\\n\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n      dropzone.querySelector('.dropzone-upload').style.display = \\\"inline-block\\\";\\n      dropzone.querySelector('.dropzone-remove-all').style.display = \\\"inline-block\\\";\\n    }); // Update the total progress bar\\n\\n    myDropzone.on(\\\"totaluploadprogress\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.width = progress + \\\"%\\\";\\n      });\\n    });\\n    myDropzone.on(\\\"sending\\\", function (file) {\\n      // Show the total progress bar when upload starts\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.opacity = \\\"1\\\";\\n      }); // And disable the start button\\n\\n      file.previewElement.querySelector(id + \\\" .dropzone-start\\\").setAttribute(\\\"disabled\\\", \\\"disabled\\\");\\n    }); // Hide the total progress bar when nothing's uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.dropzone-start').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    }); // Setup the buttons for all transfers\\n\\n    dropzone.querySelector(\\\".dropzone-upload\\\").addEventListener('click', function () {\\n      myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));\\n    }); // Setup the button for remove all files\\n\\n    dropzone.querySelector(\\\".dropzone-remove-all\\\").addEventListener('click', function () {\\n      dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n      dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n      myDropzone.removeAllFiles(true);\\n    }); // On all files completed upload\\n\\n    myDropzone.on(\\\"queuecomplete\\\", function (progress) {\\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\\n      uploadIcons.forEach(function (uploadIcon) {\\n        uploadIcon.style.display = \\\"none\\\";\\n      });\\n    }); // On all files removed\\n\\n    myDropzone.on(\\\"removedfile\\\", function (file) {\\n      if (myDropzone.files.length < 1) {\\n        dropzone.querySelector('.dropzone-upload').style.display = \\\"none\\\";\\n        dropzone.querySelector('.dropzone-remove-all').style.display = \\\"none\\\";\\n      }\\n    });\\n  };\\n\\n  var exampleQueueAutoUpload = function exampleQueueAutoUpload() {\\n    // set the dropzone container id\\n    var id = \\\"#kt_dropzonejs_example_3\\\";\\n    var dropzone = document.querySelector(id); // set the preview element template\\n\\n    var previewNode = dropzone.querySelector(\\\".dropzone-item\\\");\\n    previewNode.id = \\\"\\\";\\n    var previewTemplate = previewNode.parentNode.innerHTML;\\n    previewNode.parentNode.removeChild(previewNode);\\n    var myDropzone = new Dropzone(id, {\\n      // Make the whole body a dropzone\\n      url: \\\"https://preview.keenthemes.com/api/dropzone/void.php\\\",\\n      // Set the url for your upload script location\\n      parallelUploads: 20,\\n      maxFilesize: 1,\\n      // Max filesize in MB\\n      previewTemplate: previewTemplate,\\n      previewsContainer: id + \\\" .dropzone-items\\\",\\n      // Define the container to display the previews\\n      clickable: id + \\\" .dropzone-select\\\" // Define the element that should be used as click trigger to select files.\\n\\n    });\\n    myDropzone.on(\\\"addedfile\\\", function (file) {\\n      // Hookup the start button\\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\\n      dropzoneItems.forEach(function (dropzoneItem) {\\n        dropzoneItem.style.display = '';\\n      });\\n    }); // Update the total progress bar\\n\\n    myDropzone.on(\\\"totaluploadprogress\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.width = progress + \\\"%\\\";\\n      });\\n    });\\n    myDropzone.on(\\\"sending\\\", function (file) {\\n      // Show the total progress bar when upload starts\\n      var progressBars = dropzone.querySelectorAll('.progress-bar');\\n      progressBars.forEach(function (progressBar) {\\n        progressBar.style.opacity = \\\"1\\\";\\n      });\\n    }); // Hide the total progress bar when nothing\\\"s uploading anymore\\n\\n    myDropzone.on(\\\"complete\\\", function (progress) {\\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\\n      setTimeout(function () {\\n        progressBars.forEach(function (progressBar) {\\n          progressBar.querySelector('.progress-bar').style.opacity = \\\"0\\\";\\n          progressBar.querySelector('.progress').style.opacity = \\\"0\\\";\\n        });\\n      }, 300);\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init(element) {\\n      exampleBasic();\\n      exampleQueue();\\n      exampleQueueAutoUpload();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFormsDropzoneJSDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvZHJvcHpvbmVqcy5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxzQkFBc0IsR0FBRyxZQUFZO0FBQ3JDO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBWTtBQUMzQjtBQUNBLFFBQUlDLFVBQVUsR0FBRyxJQUFJQyxRQUFKLENBQWEsMEJBQWIsRUFBeUM7QUFDdERDLE1BQUFBLEdBQUcsRUFBRSx5Q0FEaUQ7QUFDTjtBQUNoREMsTUFBQUEsU0FBUyxFQUFFLE1BRjJDO0FBRW5DO0FBQ25CQyxNQUFBQSxRQUFRLEVBQUUsRUFINEM7QUFJdERDLE1BQUFBLFdBQVcsRUFBRSxFQUp5QztBQUlyQztBQUNqQkMsTUFBQUEsY0FBYyxFQUFFLElBTHNDO0FBTXREQyxNQUFBQSxNQUFNLEVBQUUsZ0JBQVVDLElBQVYsRUFBZ0JDLElBQWhCLEVBQXNCO0FBQzFCLFlBQUlELElBQUksQ0FBQ0UsSUFBTCxJQUFhLFNBQWpCLEVBQTRCO0FBQ3hCRCxVQUFBQSxJQUFJLENBQUMsa0JBQUQsQ0FBSjtBQUNILFNBRkQsTUFFTztBQUNIQSxVQUFBQSxJQUFJO0FBQ1A7QUFDSjtBQVpxRCxLQUF6QyxDQUFqQjtBQWNILEdBaEJEOztBQWtCQSxNQUFJRSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFZO0FBQzNCO0FBQ0EsUUFBTUMsRUFBRSxHQUFHLDBCQUFYO0FBQ0EsUUFBTUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUJILEVBQXZCLENBQWpCLENBSDJCLENBSzNCOztBQUNBLFFBQUlJLFdBQVcsR0FBR0gsUUFBUSxDQUFDRSxhQUFULENBQXVCLGdCQUF2QixDQUFsQjtBQUNBQyxJQUFBQSxXQUFXLENBQUNKLEVBQVosR0FBaUIsRUFBakI7QUFDQSxRQUFJSyxlQUFlLEdBQUdELFdBQVcsQ0FBQ0UsVUFBWixDQUF1QkMsU0FBN0M7QUFDQUgs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LFlBQVksQ0FBQ0wsT0FBYixDQUFxQixVQUFBTSxXQUFXLEVBQUk7QUFDaENBLFFBQUFBLFdBQVcsQ0FBQ0osS0FBWixDQUFrQk0sT0FBbEIsR0FBNEIsR0FBNUI7QUFDSCxPQUZEO0FBR0gsS0FORCxFQXJDcUMsQ0E2Q3JDOztBQUNBdkMsSUFBQUEsVUFBVSxDQUFDeUIsRUFBWCxDQUFjLFVBQWQsRUFBMEIsVUFBVVUsUUFBVixFQUFvQjtBQUMxQyxVQUFNQyxZQUFZLEdBQUd2QixRQUFRLENBQUNpQixnQkFBVCxDQUEwQixjQUExQixDQUFyQjtBQUVBVyxNQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQkwsUUFBQUEsWUFBWSxDQUFDTCxPQUFiLENBQXFCLFVBQUFNLFdBQVcsRUFBSTtBQUNoQ0EsVUFBQUEsV0FBVyxDQUFDdEIsYUFBWixDQUEwQixlQUExQixFQUEyQ2tCLEtBQTNDLENBQWlETSxPQUFqRCxHQUEyRCxHQUEzRDtBQUNBRixVQUFBQSxXQUFXLENBQUN0QixhQUFaLENBQTBCLFdBQTFCLEVBQXVDa0IsS0FBdkMsQ0FBNkNNLE9BQTdDLEdBQXVELEdBQXZEO0FBQ0gsU0FIRDtBQUlILE9BTFMsRUFLUCxHQUxPLENBQVY7QUFNSCxLQVREO0FBVUgsR0F4REQ7O0FBMERBLFNBQU87QUFDSDtBQUNBYSxJQUFBQSxJQUFJLEVBQUUsY0FBVUMsT0FBVixFQUFtQjtBQUNyQnRELE1BQUFBLFlBQVk7QUFDWlksTUFBQUEsWUFBWTtBQUNad0MsTUFBQUEsc0JBQXNCO0FBQ3pCO0FBTkUsR0FBUDtBQVFILENBbEw0QixFQUE3QixDLENBb0xBOzs7QUFDQUcsTUFBTSxDQUFDQyxrQkFBUCxDQUEwQixZQUFZO0FBQ2xDekQsRUFBQUEsc0JBQXNCLENBQUNzRCxJQUF2QjtBQUNILENBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvZHJvcHpvbmVqcy5qcz9kNWQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RGb3Jtc0Ryb3B6b25lSlNEZW1vcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgZXhhbXBsZUJhc2ljID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEZvciBtb3JlIGluZm8gYWJvdXQgRHJvcHpvbmUgcGx1Z2luIHZpc2l0OiAgaHR0cHM6Ly93d3cuZHJvcHpvbmVqcy5jb20vI3VzYWdlXHJcbiAgICAgICAgdmFyIG15RHJvcHpvbmUgPSBuZXcgRHJvcHpvbmUoXCIja3RfZHJvcHpvbmVqc19leGFtcGxlXzFcIiwge1xyXG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9rZWVudGhlbWVzLmNvbS9zY3JpcHRzL3ZvaWQucGhwXCIsIC8vIFNldCB0aGUgdXJsIGZvciB5b3VyIHVwbG9hZCBzY3JpcHQgbG9jYXRpb25cclxuICAgICAgICAgICAgcGFyYW1OYW1lOiBcImZpbGVcIiwgLy8gVGhlIG5hbWUgdGhhdCB3aWxsIGJlIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGZpbGVcclxuICAgICAgICAgICAgbWF4RmlsZXM6IDEwLFxyXG4gICAgICAgICAgICBtYXhGaWxlc2l6ZTogMTAsIC8vIE1CXHJcbiAgICAgICAgICAgIGFkZFJlbW92ZUxpbmtzOiB0cnVlLFxyXG4gICAgICAgICAgICBhY2NlcHQ6IGZ1bmN0aW9uIChmaWxlLCBkb25lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5uYW1lID09IFwid293LmpwZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZShcIk5haGEsIHlvdSBkb24ndC5cIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBleGFtcGxlUXVldWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gc2V0IHRoZSBkcm9wem9uZSBjb250YWluZXIgaWRcclxuICAgICAgICBjb25zdCBpZCA9IFwiI2t0X2Ryb3B6b25lanNfZXhhbXBsZV8yXCI7XHJcbiAgICAgICAgY29uc3QgZHJvcHpvbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHRoZSBwcmV2aWV3IGVsZW1lbnQgdGVtcGxhdGVcclxuICAgICAgICB2YXIgcHJldmlld05vZGUgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKFwiLmRyb3B6b25lLWl0ZW1cIik7XHJcbiAgICAgICAgcHJldmlld05vZGUuaWQgPSBcIlwiO1xyXG4gICAgICAgIHZhciBwcmV2aWV3VGVtcGxhdGUgPSBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLmlubmVySFRNTDtcclxuICAgICAgICBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHByZXZpZXdOb2RlKTtcclxuXHJcbiAgICAgICAgdmFyIG15RHJvcHpvbmUgPSBuZXcgRHJvcHpvbmUoaWQsIHsgLy8gTWFrZSB0aGUgd2hvbGUgYm9keSBhIGRyb3B6b25lXHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL3ByZXZpZXcua2VlbnRoZW1lcy5jb20vYXBpL2Ryb3B6b25lL3ZvaWQucGhwXCIsIC8vIFNldCB0aGUgdXJsIGZvciB5b3VyIHVwbG9hZCBzY3JpcHQgbG9jYXRpb25cclxuICAgICAgICAgICAgcGFyYWxsZWxVcGxvYWRzOiAyMCxcclxuICAgICAgICAgICAgcHJldmlld1RlbXBsYXRlOiBwcmV2aWV3VGVtcGxhdGUsXHJcbiAgICAgICAgICAgIG1heEZpbGVzaXplOiAxLCAvLyBNYXggZmlsZXNpemUgaW4gTUJcclxuICAgICAgICAgICAgYXV0b1F1ZXVlOiBmYWxzZSwgLy8gTWFrZSBzdXJlIHRoZSBmaWxlcyBhcmVuJ3QgcXVldWVkIHVudGlsIG1hbnVhbGx5IGFkZGVkXHJcbiAgICAgICAgICAgIHByZXZpZXdzQ29udGFpbmVyOiBpZCArIFwiIC5kcm9wem9uZS1pdGVtc1wiLCAvLyBEZWZpbmUgdGhlIGNvbnRhaW5lciB0byBkaXNwbGF5IHRoZSBwcmV2aWV3c1xyXG4gICAgICAgICAgICBjbGlja2FibGU6IGlkICsgXCIgLmRyb3B6b25lLXNlbGVjdFwiIC8vIERlZmluZSB0aGUgZWxlbWVudCB0aGF0IHNob3VsZCBiZSB1c2VkIGFzIGNsaWNrIHRyaWdnZXIgdG8gc2VsZWN0IGZpbGVzLlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBteURyb3B6b25lLm9uKFwiYWRkZWRmaWxlXCIsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgIC8vIEhvb2t1cCB0aGUgc3RhcnQgYnV0dG9uXHJcbiAgICAgICAgICAgIGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcihpZCArIFwiIC5kcm9wem9uZS1zdGFydFwiKS5vbmNsaWNrID0gZnVuY3Rpb24gKCkgeyBteURyb3B6b25lLmVucXVldWVGaWxlKGZpbGUpOyB9O1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wem9uZUl0ZW1zID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lLWl0ZW0nKTtcclxuICAgICAgICAgICAgZHJvcHpvbmVJdGVtcy5mb3JFYWNoKGRyb3B6b25lSXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wem9uZUl0ZW0uc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXVwbG9hZCcpLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG4gICAgICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtcmVtb3ZlLWFsbCcpLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIHByb2dyZXNzIGJhclxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJ0b3RhbHVwbG9hZHByb2dyZXNzXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcucHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFycy5mb3JFYWNoKHByb2dyZXNzQmFyID0+IHtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gcHJvZ3Jlc3MgKyBcIiVcIjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJzZW5kaW5nXCIsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3cgdGhlIHRvdGFsIHByb2dyZXNzIGJhciB3aGVuIHVwbG9hZCBzdGFydHNcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXJzID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLnByb2dyZXNzLWJhcicpO1xyXG4gICAgICAgICAgICBwcm9ncmVzc0JhcnMuZm9yRWFjaChwcm9ncmVzc0JhciA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBBbmQgZGlzYWJsZSB0aGUgc3RhcnQgYnV0dG9uXHJcbiAgICAgICAgICAgIGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcihpZCArIFwiIC5kcm9wem9uZS1zdGFydFwiKS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHRoZSB0b3RhbCBwcm9ncmVzcyBiYXIgd2hlbiBub3RoaW5nJ3MgdXBsb2FkaW5nIGFueW1vcmVcclxuICAgICAgICBteURyb3B6b25lLm9uKFwiY29tcGxldGVcIiwgZnVuY3Rpb24gKHByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzQmFycyA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kei1jb21wbGV0ZScpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0JhcnMuZm9yRWFjaChwcm9ncmVzc0JhciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLWJhcicpLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MnKS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXN0YXJ0Jykuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIHRoZSBidXR0b25zIGZvciBhbGwgdHJhbnNmZXJzXHJcbiAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcihcIi5kcm9wem9uZS11cGxvYWRcIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG15RHJvcHpvbmUuZW5xdWV1ZUZpbGVzKG15RHJvcHpvbmUuZ2V0RmlsZXNXaXRoU3RhdHVzKERyb3B6b25lLkFEREVEKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIHRoZSBidXR0b24gZm9yIHJlbW92ZSBhbGwgZmlsZXNcclxuICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKFwiLmRyb3B6b25lLXJlbW92ZS1hbGxcIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS11cGxvYWQnKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS1yZW1vdmUtYWxsJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICBteURyb3B6b25lLnJlbW92ZUFsbEZpbGVzKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBPbiBhbGwgZmlsZXMgY29tcGxldGVkIHVwbG9hZFxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJxdWV1ZWNvbXBsZXRlXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xyXG4gICAgICAgICAgICBjb25zdCB1cGxvYWRJY29ucyA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wem9uZS11cGxvYWQnKTtcclxuICAgICAgICAgICAgdXBsb2FkSWNvbnMuZm9yRWFjaCh1cGxvYWRJY29uID0+IHtcclxuICAgICAgICAgICAgICAgIHVwbG9hZEljb24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gT24gYWxsIGZpbGVzIHJlbW92ZWRcclxuICAgICAgICBteURyb3B6b25lLm9uKFwicmVtb3ZlZGZpbGVcIiwgZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgaWYgKG15RHJvcHpvbmUuZmlsZXMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXVwbG9hZCcpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS1yZW1vdmUtYWxsJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGV4YW1wbGVRdWV1ZUF1dG9VcGxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gc2V0IHRoZSBkcm9wem9uZSBjb250YWluZXIgaWRcclxuICAgICAgICBjb25zdCBpZCA9IFwiI2t0X2Ryb3B6b25lanNfZXhhbXBsZV8zXCI7XHJcbiAgICAgICAgY29uc3QgZHJvcHpvbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGlkKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHRoZSBwcmV2aWV3IGVsZW1lbnQgdGVtcGxhdGVcclxuICAgICAgICB2YXIgcHJldmlld05vZGUgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKFwiLmRyb3B6b25lLWl0ZW1cIik7XHJcbiAgICAgICAgcHJldmlld05vZGUuaWQgPSBcIlwiO1xyXG4gICAgICAgIHZhciBwcmV2aWV3VGVtcGxhdGUgPSBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLmlubmVySFRNTDtcclxuICAgICAgICBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHByZXZpZXdOb2RlKTtcclxuXHJcbiAgICAgICAgdmFyIG15RHJvcHpvbmUgPSBuZXcgRHJvcHpvbmUoaWQsIHsgLy8gTWFrZSB0aGUgd2hvbGUgYm9keSBhIGRyb3B6b25lXHJcbiAgICAgICAgICAgIHVybDogXCJodHRwczovL3ByZXZpZXcua2VlbnRoZW1lcy5jb20vYXBpL2Ryb3B6b25lL3ZvaWQucGhwXCIsIC8vIFNldCB0aGUgdXJsIGZvciB5b3VyIHVwbG9hZCBzY3JpcHQgbG9jYXRpb25cclxuICAgICAgICAgICAgcGFyYWxsZWxVcGxvYWRzOiAyMCxcclxuICAgICAgICAgICAgbWF4RmlsZXNpemU6IDEsIC8vIE1heCBmaWxlc2l6ZSBpbiBNQlxyXG4gICAgICAgICAgICBwcmV2aWV3VGVtcGxhdGU6IHByZXZpZXdUZW1wbGF0ZSxcclxuICAgICAgICAgICAgcHJldmlld3NDb250YWluZXI6IGlkICsgXCIgLmRyb3B6b25lLWl0ZW1zXCIsIC8vIERlZmluZSB0aGUgY29udGFpbmVyIHRvIGRpc3BsYXkgdGhlIHByZXZpZXdzXHJcbiAgICAgICAgICAgIGNsaWNrYWJsZTogaWQgKyBcIiAuZHJvcHpvbmUtc2VsZWN0XCIgLy8gRGVmaW5lIHRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgY2xpY2sgdHJpZ2dlciB0byBzZWxlY3QgZmlsZXMuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBteURyb3B6b25lLm9uKFwiYWRkZWRmaWxlXCIsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgIC8vIEhvb2t1cCB0aGUgc3RhcnQgYnV0dG9uXHJcbiAgICAgICAgICAgIGNvbnN0IGRyb3B6b25lSXRlbXMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHJvcHpvbmUtaXRlbScpO1xyXG4gICAgICAgICAgICBkcm9wem9uZUl0ZW1zLmZvckVhY2goZHJvcHpvbmVJdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3B6b25lSXRlbS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIHByb2dyZXNzIGJhclxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJ0b3RhbHVwbG9hZHByb2dyZXNzXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcucHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFycy5mb3JFYWNoKHByb2dyZXNzQmFyID0+IHtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gcHJvZ3Jlc3MgKyBcIiVcIjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJzZW5kaW5nXCIsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3cgdGhlIHRvdGFsIHByb2dyZXNzIGJhciB3aGVuIHVwbG9hZCBzdGFydHNcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXJzID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLnByb2dyZXNzLWJhcicpO1xyXG4gICAgICAgICAgICBwcm9ncmVzc0JhcnMuZm9yRWFjaChwcm9ncmVzc0JhciA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHRoZSB0b3RhbCBwcm9ncmVzcyBiYXIgd2hlbiBub3RoaW5nXCJzIHVwbG9hZGluZyBhbnltb3JlXHJcbiAgICAgICAgbXlEcm9wem9uZS5vbihcImNvbXBsZXRlXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHotY29tcGxldGUnKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXJzLmZvckVhY2gocHJvZ3Jlc3NCYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLnByb2dyZXNzJykuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIDMwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZXhhbXBsZUJhc2ljKCk7XHJcbiAgICAgICAgICAgIGV4YW1wbGVRdWV1ZSgpO1xyXG4gICAgICAgICAgICBleGFtcGxlUXVldWVBdXRvVXBsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gT24gZG9jdW1lbnQgcmVhZHlcclxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbiAoKSB7XHJcbiAgICBLVEZvcm1zRHJvcHpvbmVKU0RlbW9zLmluaXQoKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJLVEZvcm1zRHJvcHpvbmVKU0RlbW9zIiwiZXhhbXBsZUJhc2ljIiwibXlEcm9wem9uZSIsIkRyb3B6b25lIiwidXJsIiwicGFyYW1OYW1lIiwibWF4RmlsZXMiLCJtYXhGaWxlc2l6ZSIsImFkZFJlbW92ZUxpbmtzIiwiYWNjZXB0IiwiZmlsZSIsImRvbmUiLCJuYW1lIiwiZXhhbXBsZVF1ZXVlIiwiaWQiLCJkcm9wem9uZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInByZXZpZXdOb2RlIiwicHJldmlld1RlbXBsYXRlIiwicGFyZW50Tm9kZSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwicGFyYWxsZWxVcGxvYWRzIiwiYXV0b1F1ZXVlIiwicHJldmlld3NDb250YWluZXIiLCJjbGlja2FibGUiLCJvbiIsInByZXZpZXdFbGVtZW50Iiwib25jbGljayIsImVucXVldWVGaWxlIiwiZHJvcHpvbmVJdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZHJvcHpvbmVJdGVtIiwic3R5bGUiLCJkaXNwbGF5IiwicHJvZ3Jlc3MiLCJwcm9ncmVzc0JhcnMiLCJwcm9ncmVzc0JhciIsIndpZHRoIiwib3BhY2l0eSIsInNldEF0dHJpYnV0ZSIsInNldFRpbWVvdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZW5xdWV1ZUZpbGVzIiwiZ2V0RmlsZXNXaXRoU3RhdHVzIiwiQURERUQiLCJyZW1vdmVBbGxGaWxlcyIsInVwbG9hZEljb25zIiwidXBsb2FkSWNvbiIsImZpbGVzIiwibGVuZ3RoIiwiZXhhbXBsZVF1ZXVlQXV0b1VwbG9hZCIsImluaXQiLCJlbGVtZW50IiwiS1RVdGlsIiwib25ET01Db250ZW50TG9hZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/forms/dropzonejs.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL2Ryb3B6b25lanMuanM/ZmRjMCJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZXZhbCIsIl9fd2VicGFja19leHBvcnRzX18iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFBUyxDQUFDLFlBQU07QUFBRTs7QUFDbEI7QUFBVTtBQUNWOztBQUFVLE1BQUlBLG1CQUFtQixHQUFJO0FBRXJDO0FBQU07QUFDTjtBQUNBO0FBQ0E7O0FBQ0E7QUFBTyx5RUFBTTtBQUViQyxNQUFBQSxJQUFJLENBQUMsbTgzQkFBRCxDQUFKO0FBRUE7QUFBTztBQUVQOztBQVpxQyxHQUEzQjtBQWFWOztBQUNBOztBQUNBO0FBQVU7O0FBQ1Y7QUFBVTs7QUFDVjtBQUFVOztBQUNWOztBQUFVLE1BQUlDLG1CQUFtQixHQUFHLEVBQTFCO0FBQ1Y7O0FBQVVGLEVBQUFBLG1CQUFtQixDQUFDLHFFQUFELENBQW5CO0FBQ1Y7O0FBQ0E7O0FBQVUsQ0F2QkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBBVFRFTlRJT046IEFuIFwiZXZhbC1zb3VyY2UtbWFwXCIgZGV2dG9vbCBoYXMgYmVlbiB1c2VkLlxyXG4gKiBUaGlzIGRldnRvb2wgaXMgbmVpdGhlciBtYWRlIGZvciBwcm9kdWN0aW9uIG5vciBmb3IgcmVhZGFibGUgb3V0cHV0IGZpbGVzLlxyXG4gKiBJdCB1c2VzIFwiZXZhbCgpXCIgY2FsbHMgdG8gY3JlYXRlIGEgc2VwYXJhdGUgc291cmNlIGZpbGUgd2l0aCBhdHRhY2hlZCBTb3VyY2VNYXBzIGluIHRoZSBicm93c2VyIGRldnRvb2xzLlxyXG4gKiBJZiB5b3UgYXJlIHRyeWluZyB0byByZWFkIHRoZSBvdXRwdXQgZmlsZSwgc2VsZWN0IGEgZGlmZmVyZW50IGRldnRvb2wgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sLylcclxuICogb3IgZGlzYWJsZSB0aGUgZGVmYXVsdCBkZXZ0b29sIHdpdGggXCJkZXZ0b29sOiBmYWxzZVwiLlxyXG4gKiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIHByb2R1Y3Rpb24tcmVhZHkgb3V0cHV0IGZpbGVzLCBzZWUgbW9kZTogXCJwcm9kdWN0aW9uXCIgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9tb2RlLykuXHJcbiAqL1xyXG4vKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXHJcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xyXG5cclxuLyoqKi8gXCIuL3Jlc291cmNlcy9hc3NldHMvY29yZS9qcy9jdXN0b20vZG9jdW1lbnRhdGlvbi9mb3Jtcy9kcm9wem9uZWpzLmpzXCI6XHJcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcclxuICAhKioqIC4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL2Ryb3B6b25lanMuanMgKioqIVxyXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4vKioqLyAoKCkgPT4ge1xyXG5cclxuZXZhbChcIiAvLyBDbGFzcyBkZWZpbml0aW9uXFxuXFxudmFyIEtURm9ybXNEcm9wem9uZUpTRGVtb3MgPSBmdW5jdGlvbiAoKSB7XFxuICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xcbiAgdmFyIGV4YW1wbGVCYXNpYyA9IGZ1bmN0aW9uIGV4YW1wbGVCYXNpYygpIHtcXG4gICAgLy8gRm9yIG1vcmUgaW5mbyBhYm91dCBEcm9wem9uZSBwbHVnaW4gdmlzaXQ6ICBodHRwczovL3d3dy5kcm9wem9uZWpzLmNvbS8jdXNhZ2VcXG4gICAgdmFyIG15RHJvcHpvbmUgPSBuZXcgRHJvcHpvbmUoXFxcIiNrdF9kcm9wem9uZWpzX2V4YW1wbGVfMVxcXCIsIHtcXG4gICAgICB1cmw6IFxcXCJodHRwczovL2tlZW50aGVtZXMuY29tL3NjcmlwdHMvdm9pZC5waHBcXFwiLFxcbiAgICAgIC8vIFNldCB0aGUgdXJsIGZvciB5b3VyIHVwbG9hZCBzY3JpcHQgbG9jYXRpb25cXG4gICAgICBwYXJhbU5hbWU6IFxcXCJmaWxlXFxcIixcXG4gICAgICAvLyBUaGUgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCB0byB0cmFuc2ZlciB0aGUgZmlsZVxcbiAgICAgIG1heEZpbGVzOiAxMCxcXG4gICAgICBtYXhGaWxlc2l6ZTogMTAsXFxuICAgICAgLy8gTUJcXG4gICAgICBhZGRSZW1vdmVMaW5rczogdHJ1ZSxcXG4gICAgICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdChmaWxlLCBkb25lKSB7XFxuICAgICAgICBpZiAoZmlsZS5uYW1lID09IFxcXCJ3b3cuanBnXFxcIikge1xcbiAgICAgICAgICBkb25lKFxcXCJOYWhhLCB5b3UgZG9uJ3QuXFxcIik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBkb25lKCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9KTtcXG4gIH07XFxuXFxuICB2YXIgZXhhbXBsZVF1ZXVlID0gZnVuY3Rpb24gZXhhbXBsZVF1ZXVlKCkge1xcbiAgICAvLyBzZXQgdGhlIGRyb3B6b25lIGNvbnRhaW5lciBpZFxcbiAgICB2YXIgaWQgPSBcXFwiI2t0X2Ryb3B6b25lanNfZXhhbXBsZV8yXFxcIjtcXG4gICAgdmFyIGRyb3B6b25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpZCk7IC8vIHNldCB0aGUgcHJldmlldyBlbGVtZW50IHRlbXBsYXRlXFxuXFxuICAgIHZhciBwcmV2aWV3Tm9kZSA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoXFxcIi5kcm9wem9uZS1pdGVtXFxcIik7XFxuICAgIHByZXZpZXdOb2RlLmlkID0gXFxcIlxcXCI7XFxuICAgIHZhciBwcmV2aWV3VGVtcGxhdGUgPSBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLmlubmVySFRNTDtcXG4gICAgcHJldmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwcmV2aWV3Tm9kZSk7XFxuICAgIHZhciBteURyb3B6b25lID0gbmV3IERyb3B6b25lKGlkLCB7XFxuICAgICAgLy8gTWFrZSB0aGUgd2hvbGUgYm9keSBhIGRyb3B6b25lXFxuICAgICAgdXJsOiBcXFwiaHR0cHM6Ly9wcmV2aWV3LmtlZW50aGVtZXMuY29tL2FwaS9kcm9wem9uZS92b2lkLnBocFxcXCIsXFxuICAgICAgLy8gU2V0IHRoZSB1cmwgZm9yIHlvdXIgdXBsb2FkIHNjcmlwdCBsb2NhdGlvblxcbiAgICAgIHBhcmFsbGVsVXBsb2FkczogMjAsXFxuICAgICAgcHJldmlld1RlbXBsYXRlOiBwcmV2aWV3VGVtcGxhdGUsXFxuICAgICAgbWF4RmlsZXNpemU6IDEsXFxuICAgICAgLy8gTWF4IGZpbGVzaXplIGluIE1CXFxuICAgICAgYXV0b1F1ZXVlOiBmYWxzZSxcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGZpbGVzIGFyZW4ndCBxdWV1ZWQgdW50aWwgbWFudWFsbHkgYWRkZWRcXG4gICAgICBwcmV2aWV3c0NvbnRhaW5lcjogaWQgKyBcXFwiIC5kcm9wem9uZS1pdGVtc1xcXCIsXFxuICAgICAgLy8gRGVmaW5lIHRoZSBjb250YWluZXIgdG8gZGlzcGxheSB0aGUgcHJldmlld3NcXG4gICAgICBjbGlja2FibGU6IGlkICsgXFxcIiAuZHJvcHpvbmUtc2VsZWN0XFxcIiAvLyBEZWZpbmUgdGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgdXNlZCBhcyBjbGljayB0cmlnZ2VyIHRvIHNlbGVjdCBmaWxlcy5cXG5cXG4gICAgfSk7XFxuICAgIG15RHJvcHpvbmUub24oXFxcImFkZGVkZmlsZVxcXCIsIGZ1bmN0aW9uIChmaWxlKSB7XFxuICAgICAgLy8gSG9va3VwIHRoZSBzdGFydCBidXR0b25cXG4gICAgICBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoaWQgKyBcXFwiIC5kcm9wem9uZS1zdGFydFxcXCIpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBteURyb3B6b25lLmVucXVldWVGaWxlKGZpbGUpO1xcbiAgICAgIH07XFxuXFxuICAgICAgdmFyIGRyb3B6b25lSXRlbXMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHJvcHpvbmUtaXRlbScpO1xcbiAgICAgIGRyb3B6b25lSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoZHJvcHpvbmVJdGVtKSB7XFxuICAgICAgICBkcm9wem9uZUl0ZW0uc3R5bGUuZGlzcGxheSA9ICcnO1xcbiAgICAgIH0pO1xcbiAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS11cGxvYWQnKS5zdHlsZS5kaXNwbGF5ID0gXFxcImlubGluZS1ibG9ja1xcXCI7XFxuICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXJlbW92ZS1hbGwnKS5zdHlsZS5kaXNwbGF5ID0gXFxcImlubGluZS1ibG9ja1xcXCI7XFxuICAgIH0pOyAvLyBVcGRhdGUgdGhlIHRvdGFsIHByb2dyZXNzIGJhclxcblxcbiAgICBteURyb3B6b25lLm9uKFxcXCJ0b3RhbHVwbG9hZHByb2dyZXNzXFxcIiwgZnVuY3Rpb24gKHByb2dyZXNzKSB7XFxuICAgICAgdmFyIHByb2dyZXNzQmFycyA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9ncmVzcy1iYXInKTtcXG4gICAgICBwcm9ncmVzc0JhcnMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3Jlc3NCYXIpIHtcXG4gICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gcHJvZ3Jlc3MgKyBcXFwiJVxcXCI7XFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgICBteURyb3B6b25lLm9uKFxcXCJzZW5kaW5nXFxcIiwgZnVuY3Rpb24gKGZpbGUpIHtcXG4gICAgICAvLyBTaG93IHRoZSB0b3RhbCBwcm9ncmVzcyBiYXIgd2hlbiB1cGxvYWQgc3RhcnRzXFxuICAgICAgdmFyIHByb2dyZXNzQmFycyA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9ncmVzcy1iYXInKTtcXG4gICAgICBwcm9ncmVzc0JhcnMuZm9yRWFjaChmdW5jdGlvbiAocHJvZ3Jlc3NCYXIpIHtcXG4gICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLm9wYWNpdHkgPSBcXFwiMVxcXCI7XFxuICAgICAgfSk7IC8vIEFuZCBkaXNhYmxlIHRoZSBzdGFydCBidXR0b25cXG5cXG4gICAgICBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoaWQgKyBcXFwiIC5kcm9wem9uZS1zdGFydFxcXCIpLnNldEF0dHJpYnV0ZShcXFwiZGlzYWJsZWRcXFwiLCBcXFwiZGlzYWJsZWRcXFwiKTtcXG4gICAgfSk7IC8vIEhpZGUgdGhlIHRvdGFsIHByb2dyZXNzIGJhciB3aGVuIG5vdGhpbmcncyB1cGxvYWRpbmcgYW55bW9yZVxcblxcbiAgICBteURyb3B6b25lLm9uKFxcXCJjb21wbGV0ZVxcXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xcbiAgICAgIHZhciBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHotY29tcGxldGUnKTtcXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHByb2dyZXNzQmFycy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9ncmVzc0Jhcikge1xcbiAgICAgICAgICBwcm9ncmVzc0Jhci5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtYmFyJykuc3R5bGUub3BhY2l0eSA9IFxcXCIwXFxcIjtcXG4gICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLnByb2dyZXNzJykuc3R5bGUub3BhY2l0eSA9IFxcXCIwXFxcIjtcXG4gICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXN0YXJ0Jykuc3R5bGUub3BhY2l0eSA9IFxcXCIwXFxcIjtcXG4gICAgICAgIH0pO1xcbiAgICAgIH0sIDMwMCk7XFxuICAgIH0pOyAvLyBTZXR1cCB0aGUgYnV0dG9ucyBmb3IgYWxsIHRyYW5zZmVyc1xcblxcbiAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKFxcXCIuZHJvcHpvbmUtdXBsb2FkXFxcIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgbXlEcm9wem9uZS5lbnF1ZXVlRmlsZXMobXlEcm9wem9uZS5nZXRGaWxlc1dpdGhTdGF0dXMoRHJvcHpvbmUuQURERUQpKTtcXG4gICAgfSk7IC8vIFNldHVwIHRoZSBidXR0b24gZm9yIHJlbW92ZSBhbGwgZmlsZXNcXG5cXG4gICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcihcXFwiLmRyb3B6b25lLXJlbW92ZS1hbGxcXFwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtdXBsb2FkJykuc3R5bGUuZGlzcGxheSA9IFxcXCJub25lXFxcIjtcXG4gICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtcmVtb3ZlLWFsbCcpLnN0eWxlLmRpc3BsYXkgPSBcXFwibm9uZVxcXCI7XFxuICAgICAgbXlEcm9wem9uZS5yZW1vdmVBbGxGaWxlcyh0cnVlKTtcXG4gICAgfSk7IC8vIE9uIGFsbCBmaWxlcyBjb21wbGV0ZWQgdXBsb2FkXFxuXFxuICAgIG15RHJvcHpvbmUub24oXFxcInF1ZXVlY29tcGxldGVcXFwiLCBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcXG4gICAgICB2YXIgdXBsb2FkSWNvbnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHJvcHpvbmUtdXBsb2FkJyk7XFxuICAgICAgdXBsb2FkSWNvbnMuZm9yRWFjaChmdW5jdGlvbiAodXBsb2FkSWNvbikge1xcbiAgICAgICAgdXBsb2FkSWNvbi5zdHlsZS5kaXNwbGF5ID0gXFxcIm5vbmVcXFwiO1xcbiAgICAgIH0pO1xcbiAgICB9KTsgLy8gT24gYWxsIGZpbGVzIHJlbW92ZWRcXG5cXG4gICAgbXlEcm9wem9uZS5vbihcXFwicmVtb3ZlZGZpbGVcXFwiLCBmdW5jdGlvbiAoZmlsZSkge1xcbiAgICAgIGlmIChteURyb3B6b25lLmZpbGVzLmxlbmd0aCA8IDEpIHtcXG4gICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS11cGxvYWQnKS5zdHlsZS5kaXNwbGF5ID0gXFxcIm5vbmVcXFwiO1xcbiAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXJlbW92ZS1hbGwnKS5zdHlsZS5kaXNwbGF5ID0gXFxcIm5vbmVcXFwiO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuICB9O1xcblxcbiAgdmFyIGV4YW1wbGVRdWV1ZUF1dG9VcGxvYWQgPSBmdW5jdGlvbiBleGFtcGxlUXVldWVBdXRvVXBsb2FkKCkge1xcbiAgICAvLyBzZXQgdGhlIGRyb3B6b25lIGNvbnRhaW5lciBpZFxcbiAgICB2YXIgaWQgPSBcXFwiI2t0X2Ryb3B6b25lanNfZXhhbXBsZV8zXFxcIjtcXG4gICAgdmFyIGRyb3B6b25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpZCk7IC8vIHNldCB0aGUgcHJldmlldyBlbGVtZW50IHRlbXBsYXRlXFxuXFxuICAgIHZhciBwcmV2aWV3Tm9kZSA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoXFxcIi5kcm9wem9uZS1pdGVtXFxcIik7XFxuICAgIHByZXZpZXdOb2RlLmlkID0gXFxcIlxcXCI7XFxuICAgIHZhciBwcmV2aWV3VGVtcGxhdGUgPSBwcmV2aWV3Tm9kZS5wYXJlbnROb2RlLmlubmVySFRNTDtcXG4gICAgcHJldmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwcmV2aWV3Tm9kZSk7XFxuICAgIHZhciBteURyb3B6b25lID0gbmV3IERyb3B6b25lKGlkLCB7XFxuICAgICAgLy8gTWFrZSB0aGUgd2hvbGUgYm9keSBhIGRyb3B6b25lXFxuICAgICAgdXJsOiBcXFwiaHR0cHM6Ly9wcmV2aWV3LmtlZW50aGVtZXMuY29tL2FwaS9kcm9wem9uZS92b2lkLnBocFxcXCIsXFxuICAgICAgLy8gU2V0IHRoZSB1cmwgZm9yIHlvdXIgdXBsb2FkIHNjcmlwdCBsb2NhdGlvblxcbiAgICAgIHBhcmFsbGVsVXBsb2FkczogMjAsXFxuICAgICAgbWF4RmlsZXNpemU6IDEsXFxuICAgICAgLy8gTWF4IGZpbGVzaXplIGluIE1CXFxuICAgICAgcHJldmlld1RlbXBsYXRlOiBwcmV2aWV3VGVtcGxhdGUsXFxuICAgICAgcHJldmlld3NDb250YWluZXI6IGlkICsgXFxcIiAuZHJvcHpvbmUtaXRlbXNcXFwiLFxcbiAgICAgIC8vIERlZmluZSB0aGUgY29udGFpbmVyIHRvIGRpc3BsYXkgdGhlIHByZXZpZXdzXFxuICAgICAgY2xpY2thYmxlOiBpZCArIFxcXCIgLmRyb3B6b25lLXNlbGVjdFxcXCIgLy8gRGVmaW5lIHRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgY2xpY2sgdHJpZ2dlciB0byBzZWxlY3QgZmlsZXMuXFxuXFxuICAgIH0pO1xcbiAgICBteURyb3B6b25lLm9uKFxcXCJhZGRlZGZpbGVcXFwiLCBmdW5jdGlvbiAoZmlsZSkge1xcbiAgICAgIC8vIEhvb2t1cCB0aGUgc3RhcnQgYnV0dG9uXFxuICAgICAgdmFyIGRyb3B6b25lSXRlbXMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcuZHJvcHpvbmUtaXRlbScpO1xcbiAgICAgIGRyb3B6b25lSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoZHJvcHpvbmVJdGVtKSB7XFxuICAgICAgICBkcm9wem9uZUl0ZW0uc3R5bGUuZGlzcGxheSA9ICcnO1xcbiAgICAgIH0pO1xcbiAgICB9KTsgLy8gVXBkYXRlIHRoZSB0b3RhbCBwcm9ncmVzcyBiYXJcXG5cXG4gICAgbXlEcm9wem9uZS5vbihcXFwidG90YWx1cGxvYWRwcm9ncmVzc1xcXCIsIGZ1bmN0aW9uIChwcm9ncmVzcykge1xcbiAgICAgIHZhciBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcucHJvZ3Jlc3MtYmFyJyk7XFxuICAgICAgcHJvZ3Jlc3NCYXJzLmZvckVhY2goZnVuY3Rpb24gKHByb2dyZXNzQmFyKSB7XFxuICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHByb2dyZXNzICsgXFxcIiVcXFwiO1xcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gICAgbXlEcm9wem9uZS5vbihcXFwic2VuZGluZ1xcXCIsIGZ1bmN0aW9uIChmaWxlKSB7XFxuICAgICAgLy8gU2hvdyB0aGUgdG90YWwgcHJvZ3Jlc3MgYmFyIHdoZW4gdXBsb2FkIHN0YXJ0c1xcbiAgICAgIHZhciBwcm9ncmVzc0JhcnMgPSBkcm9wem9uZS5xdWVyeVNlbGVjdG9yQWxsKCcucHJvZ3Jlc3MtYmFyJyk7XFxuICAgICAgcHJvZ3Jlc3NCYXJzLmZvckVhY2goZnVuY3Rpb24gKHByb2dyZXNzQmFyKSB7XFxuICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS5vcGFjaXR5ID0gXFxcIjFcXFwiO1xcbiAgICAgIH0pO1xcbiAgICB9KTsgLy8gSGlkZSB0aGUgdG90YWwgcHJvZ3Jlc3MgYmFyIHdoZW4gbm90aGluZ1xcXCJzIHVwbG9hZGluZyBhbnltb3JlXFxuXFxuICAgIG15RHJvcHpvbmUub24oXFxcImNvbXBsZXRlXFxcIiwgZnVuY3Rpb24gKHByb2dyZXNzKSB7XFxuICAgICAgdmFyIHByb2dyZXNzQmFycyA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kei1jb21wbGV0ZScpO1xcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xcbiAgICAgICAgcHJvZ3Jlc3NCYXJzLmZvckVhY2goZnVuY3Rpb24gKHByb2dyZXNzQmFyKSB7XFxuICAgICAgICAgIHByb2dyZXNzQmFyLnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKS5zdHlsZS5vcGFjaXR5ID0gXFxcIjBcXFwiO1xcbiAgICAgICAgICBwcm9ncmVzc0Jhci5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MnKS5zdHlsZS5vcGFjaXR5ID0gXFxcIjBcXFwiO1xcbiAgICAgICAgfSk7XFxuICAgICAgfSwgMzAwKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgcmV0dXJuIHtcXG4gICAgLy8gUHVibGljIEZ1bmN0aW9uc1xcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KGVsZW1lbnQpIHtcXG4gICAgICBleGFtcGxlQmFzaWMoKTtcXG4gICAgICBleGFtcGxlUXVldWUoKTtcXG4gICAgICBleGFtcGxlUXVldWVBdXRvVXBsb2FkKCk7XFxuICAgIH1cXG4gIH07XFxufSgpOyAvLyBPbiBkb2N1bWVudCByZWFkeVxcblxcblxcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24gKCkge1xcbiAgS1RGb3Jtc0Ryb3B6b25lSlNEZW1vcy5pbml0KCk7XFxufSk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5eVpYTnZkWEpqWlhNdllYTnpaWFJ6TDJOdmNtVXZhbk12WTNWemRHOXRMMlJ2WTNWdFpXNTBZWFJwYjI0dlptOXliWE12WkhKdmNIcHZibVZxY3k1cWN5NXFjeUlzSW0xaGNIQnBibWR6SWpvaVEwRkZRVHM3UVVGRFFTeEpRVUZKUVN4elFrRkJjMElzUjBGQlJ5eFpRVUZaTzBGQlEzSkRPMEZCUTBFc1RVRkJTVU1zV1VGQldTeEhRVUZITEZOQlFXWkJMRmxCUVdVc1IwRkJXVHRCUVVNelFqdEJRVU5CTEZGQlFVbERMRlZCUVZVc1IwRkJSeXhKUVVGSlF5eFJRVUZLTEVOQlFXRXNNRUpCUVdJc1JVRkJlVU03UVVGRGRFUkRMRTFCUVVGQkxFZEJRVWNzUlVGQlJTeDVRMEZFYVVRN1FVRkRUanRCUVVOb1JFTXNUVUZCUVVFc1UwRkJVeXhGUVVGRkxFMUJSakpETzBGQlJXNURPMEZCUTI1Q1F5eE5RVUZCUVN4UlFVRlJMRVZCUVVVc1JVRklORU03UVVGSmRFUkRMRTFCUVVGQkxGZEJRVmNzUlVGQlJTeEZRVXA1UXp0QlFVbHlRenRCUVVOcVFrTXNUVUZCUVVFc1kwRkJZeXhGUVVGRkxFbEJUSE5ETzBGQlRYUkVReXhOUVVGQlFTeE5RVUZOTEVWQlFVVXNaMEpCUVZWRExFbEJRVllzUlVGQlowSkRMRWxCUVdoQ0xFVkJRWE5DTzBGQlF6RkNMRmxCUVVsRUxFbEJRVWtzUTBGQlEwVXNTVUZCVEN4SlFVRmhMRk5CUVdwQ0xFVkJRVFJDTzBGQlEzaENSQ3hWUVVGQlFTeEpRVUZKTEVOQlFVTXNhMEpCUVVRc1EwRkJTanRCUVVOSUxGTkJSa1FzVFVGRlR6dEJRVU5JUVN4VlFVRkJRU3hKUVVGSk8wRkJRMUE3UVVGRFNqdEJRVnB4UkN4TFFVRjZReXhEUVVGcVFqdEJRV05JTEVkQmFFSkVPenRCUVd0Q1FTeE5RVUZKUlN4WlFVRlpMRWRCUVVjc1UwRkJaa0VzV1VGQlpTeEhRVUZaTzBGQlF6TkNPMEZCUTBFc1VVRkJUVU1zUlVGQlJTeEhRVUZITERCQ1FVRllPMEZCUTBFc1VVRkJUVU1zVVVGQlVTeEhRVUZIUXl4UlFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSklMRVZCUVhaQ0xFTkJRV3BDTEVOQlNESkNMRU5CU3pOQ096dEJRVU5CTEZGQlFVbEpMRmRCUVZjc1IwRkJSMGdzVVVGQlVTeERRVUZEUlN4aFFVRlVMRU5CUVhWQ0xHZENRVUYyUWl4RFFVRnNRanRCUVVOQlF5eEpRVUZCUVN4WFFVRlhMRU5CUVVOS0xFVkJRVm9zUjBGQmFVSXNSVUZCYWtJN1FVRkRRU3hSUVVGSlN5eGxRVUZsTEVkQlFVZEVMRmRCUVZjc1EwRkJRMFVzVlVGQldpeERRVUYxUWtNc1UwRkJOME03UVVGRFFVZ3NTVUZCUVVFc1YwRkJWeXhEUVVGRFJTeFZRVUZhTEVOQlFYVkNSU3hYUVVGMlFpeERRVUZ0UTBvc1YwRkJia003UVVGRlFTeFJRVUZKYUVJc1ZVRkJWU3hIUVVGSExFbEJRVWxETEZGQlFVb3NRMEZCWVZjc1JVRkJZaXhGUVVGcFFqdEJRVUZGTzBGQlEyaERWaXhOUVVGQlFTeEhRVUZITEVWQlFVVXNjMFJCUkhsQ08wRkJReXRDTzBGQlF6ZEViVUlzVFVGQlFVRXNaVUZCWlN4RlFVRkZMRVZCUm1FN1FVRkhPVUpLTEUxQlFVRkJMR1ZCUVdVc1JVRkJSVUVzWlVGSVlUdEJRVWs1UWxvc1RVRkJRVUVzVjBGQlZ5eEZRVUZGTEVOQlNtbENPMEZCU1dRN1FVRkRhRUpwUWl4TlFVRkJRU3hUUVVGVExFVkJRVVVzUzBGTWJVSTdRVUZMV2p0QlFVTnNRa01zVFVGQlFVRXNhVUpCUVdsQ0xFVkJRVVZZTEVWQlFVVXNSMEZCUnl4clFrRk9UVHRCUVUxak8wRkJRelZEV1N4TlFVRkJRU3hUUVVGVExFVkJRVVZhTEVWQlFVVXNSMEZCUnl4dFFrRlFZeXhEUVU5Tk96dEJRVkJPTEV0QlFXcENMRU5CUVdwQ08wRkJWVUZhTEVsQlFVRkJMRlZCUVZVc1EwRkJRM2xDTEVWQlFWZ3NRMEZCWXl4WFFVRmtMRVZCUVRKQ0xGVkJRVlZxUWl4SlFVRldMRVZCUVdkQ08wRkJRM1pETzBGQlEwRkJMRTFCUVVGQkxFbEJRVWtzUTBGQlEydENMR05CUVV3c1EwRkJiMEpZTEdGQlFYQkNMRU5CUVd0RFNDeEZRVUZGTEVkQlFVY3NhMEpCUVhaRExFVkJRVEpFWlN4UFFVRXpSQ3hIUVVGeFJTeFpRVUZaTzBGQlFVVXpRaXhSUVVGQlFTeFZRVUZWTEVOQlFVTTBRaXhYUVVGWUxFTkJRWFZDY0VJc1NVRkJka0k3UVVGQkswSXNUMEZCYkVnN08wRkJRMEVzVlVGQlRYRkNMR0ZCUVdFc1IwRkJSMmhDTEZGQlFWRXNRMEZCUTJsQ0xHZENRVUZVTEVOQlFUQkNMR2RDUVVFeFFpeERRVUYwUWp0QlFVTkJSQ3hOUVVGQlFTeGhRVUZoTEVOQlFVTkZMRTlCUVdRc1EwRkJjMElzVlVGQlFVTXNXVUZCV1N4RlFVRkpPMEZCUTJ4RFFTeFJRVUZCUVN4WlFVRlpMRU5CUVVORExFdEJRV0lzUTBGQmJVSkRMRTlCUVc1Q0xFZEJRVFpDTEVWQlFUZENPMEZCUTBnc1QwRkdSRHRCUVVkQmNrSXNUVUZCUVVFc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVOQlFYVkNMR3RDUVVGMlFpeEZRVUV5UTJ0Q0xFdEJRVE5ETEVOQlFXbEVReXhQUVVGcVJDeEhRVUV5UkN4alFVRXpSRHRCUVVOQmNrSXNUVUZCUVVFc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeEZRVUVyUTJ0Q0xFdEJRUzlETEVOQlFYRkVReXhQUVVGeVJDeEhRVUVyUkN4alFVRXZSRHRCUVVOSUxFdEJWRVFzUlVGeVFqSkNMRU5CWjBNelFqczdRVUZEUVd4RExFbEJRVUZCTEZWQlFWVXNRMEZCUTNsQ0xFVkJRVmdzUTBGQll5eHhRa0ZCWkN4RlFVRnhReXhWUVVGVlZTeFJRVUZXTEVWQlFXOUNPMEZCUTNKRUxGVkJRVTFETEZsQlFWa3NSMEZCUjNaQ0xGRkJRVkVzUTBGQlEybENMR2RDUVVGVUxFTkJRVEJDTEdWQlFURkNMRU5CUVhKQ08wRkJRMEZOTEUxQlFVRkJMRmxCUVZrc1EwRkJRMHdzVDBGQllpeERRVUZ4UWl4VlFVRkJUU3hYUVVGWExFVkJRVWs3UVVGRGFFTkJMRkZCUVVGQkxGZEJRVmNzUTBGQlEwb3NTMEZCV2l4RFFVRnJRa3NzUzBGQmJFSXNSMEZCTUVKSUxGRkJRVkVzUjBGQlJ5eEhRVUZ5UXp0QlFVTklMRTlCUmtRN1FVRkhTQ3hMUVV4RU8wRkJUMEZ1UXl4SlFVRkJRU3hWUVVGVkxFTkJRVU41UWl4RlFVRllMRU5CUVdNc1UwRkJaQ3hGUVVGNVFpeFZRVUZWYWtJc1NVRkJWaXhGUVVGblFqdEJRVU55UXp0QlFVTkJMRlZCUVUwMFFpeFpRVUZaTEVkQlFVZDJRaXhSUVVGUkxFTkJRVU5wUWl4blFrRkJWQ3hEUVVFd1FpeGxRVUV4UWl4RFFVRnlRanRCUVVOQlRTeE5RVUZCUVN4WlFVRlpMRU5CUVVOTUxFOUJRV0lzUTBGQmNVSXNWVUZCUVUwc1YwRkJWeXhGUVVGSk8wRkJRMmhEUVN4UlFVRkJRU3hYUVVGWExFTkJRVU5LTEV0QlFWb3NRMEZCYTBKTkxFOUJRV3hDTEVkQlFUUkNMRWRCUVRWQ08wRkJRMGdzVDBGR1JDeEZRVWh4UXl4RFFVMXlRenM3UVVGRFFTOUNMRTFCUVVGQkxFbEJRVWtzUTBGQlEydENMR05CUVV3c1EwRkJiMEpZTEdGQlFYQkNMRU5CUVd0RFNDeEZRVUZGTEVkQlFVY3NhMEpCUVhaRExFVkJRVEpFTkVJc1dVRkJNMFFzUTBGQmQwVXNWVUZCZUVVc1JVRkJiMFlzVlVGQmNFWTdRVUZEU0N4TFFWSkVMRVZCZUVNeVFpeERRV3RFTTBJN08wRkJRMEY0UXl4SlFVRkJRU3hWUVVGVkxFTkJRVU41UWl4RlFVRllMRU5CUVdNc1ZVRkJaQ3hGUVVFd1FpeFZRVUZWVlN4UlFVRldMRVZCUVc5Q08wRkJRekZETEZWQlFVMURMRmxCUVZrc1IwRkJSM1pDTEZGQlFWRXNRMEZCUTJsQ0xHZENRVUZVTEVOQlFUQkNMR05CUVRGQ0xFTkJRWEpDTzBGQlJVRlhMRTFCUVVGQkxGVkJRVlVzUTBGQlF5eFpRVUZaTzBGQlEyNUNUQ3hSUVVGQlFTeFpRVUZaTEVOQlFVTk1MRTlCUVdJc1EwRkJjVUlzVlVGQlFVMHNWMEZCVnl4RlFVRkpPMEZCUTJoRFFTeFZRVUZCUVN4WFFVRlhMRU5CUVVOMFFpeGhRVUZhTEVOQlFUQkNMR1ZCUVRGQ0xFVkJRVEpEYTBJc1MwRkJNME1zUTBGQmFVUk5MRTlCUVdwRUxFZEJRVEpFTEVkQlFUTkVPMEZCUTBGR0xGVkJRVUZCTEZkQlFWY3NRMEZCUTNSQ0xHRkJRVm9zUTBGQk1FSXNWMEZCTVVJc1JVRkJkVU5yUWl4TFFVRjJReXhEUVVFMlEwMHNUMEZCTjBNc1IwRkJkVVFzUjBGQmRrUTdRVUZEUVVZc1ZVRkJRVUVzVjBGQlZ5eERRVUZEZEVJc1lVRkJXaXhEUVVFd1FpeHBRa0ZCTVVJc1JVRkJOa05yUWl4TFFVRTNReXhEUVVGdFJFMHNUMEZCYmtRc1IwRkJOa1FzUjBGQk4wUTdRVUZEU0N4VFFVcEVPMEZCUzBnc1QwRk9VeXhGUVUxUUxFZEJUazhzUTBGQlZqdEJRVTlJTEV0QlZrUXNSVUZ1UkRKQ0xFTkJLMFF6UWpzN1FVRkRRVEZDTEVsQlFVRkJMRkZCUVZFc1EwRkJRMFVzWVVGQlZDeERRVUYxUWl4clFrRkJka0lzUlVGQk1rTXlRaXhuUWtGQk0wTXNRMEZCTkVRc1QwRkJOVVFzUlVGQmNVVXNXVUZCV1R0QlFVTTNSVEZETEUxQlFVRkJMRlZCUVZVc1EwRkJRekpETEZsQlFWZ3NRMEZCZDBJelF5eFZRVUZWTEVOQlFVTTBReXhyUWtGQldDeERRVUU0UWpORExGRkJRVkVzUTBGQlF6UkRMRXRCUVhaRExFTkJRWGhDTzBGQlEwZ3NTMEZHUkN4RlFXaEZNa0lzUTBGdlJUTkNPenRCUVVOQmFFTXNTVUZCUVVFc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeEZRVUVyUXpKQ0xHZENRVUV2UXl4RFFVRm5SU3hQUVVGb1JTeEZRVUY1UlN4WlFVRlpPMEZCUTJwR04wSXNUVUZCUVVFc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVOQlFYVkNMR3RDUVVGMlFpeEZRVUV5UTJ0Q0xFdEJRVE5ETEVOQlFXbEVReXhQUVVGcVJDeEhRVUV5UkN4TlFVRXpSRHRCUVVOQmNrSXNUVUZCUVVFc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVOQlFYVkNMSE5DUVVGMlFpeEZRVUVyUTJ0Q0xFdEJRUzlETEVOQlFYRkVReXhQUVVGeVJDeEhRVUVyUkN4TlFVRXZSRHRCUVVOQmJFTXNUVUZCUVVFc1ZVRkJWU3hEUVVGRE9FTXNZMEZCV0N4RFFVRXdRaXhKUVVFeFFqdEJRVU5JTEV0QlNrUXNSVUZ5UlRKQ0xFTkJNa1V6UWpzN1FVRkRRVGxETEVsQlFVRkJMRlZCUVZVc1EwRkJRM2xDTEVWQlFWZ3NRMEZCWXl4bFFVRmtMRVZCUVN0Q0xGVkJRVlZWTEZGQlFWWXNSVUZCYjBJN1FVRkRMME1zVlVGQlRWa3NWMEZCVnl4SFFVRkhiRU1zVVVGQlVTeERRVUZEYVVJc1owSkJRVlFzUTBGQk1FSXNhMEpCUVRGQ0xFTkJRWEJDTzBGQlEwRnBRaXhOUVVGQlFTeFhRVUZYTEVOQlFVTm9RaXhQUVVGYUxFTkJRVzlDTEZWQlFVRnBRaXhWUVVGVkxFVkJRVWs3UVVGRE9VSkJMRkZCUVVGQkxGVkJRVlVzUTBGQlEyWXNTMEZCV0N4RFFVRnBRa01zVDBGQmFrSXNSMEZCTWtJc1RVRkJNMEk3UVVGRFNDeFBRVVpFTzBGQlIwZ3NTMEZNUkN4RlFUVkZNa0lzUTBGdFJqTkNPenRCUVVOQmJFTXNTVUZCUVVFc1ZVRkJWU3hEUVVGRGVVSXNSVUZCV0N4RFFVRmpMR0ZCUVdRc1JVRkJOa0lzVlVGQlZXcENMRWxCUVZZc1JVRkJaMEk3UVVGRGVrTXNWVUZCU1ZJc1ZVRkJWU3hEUVVGRGFVUXNTMEZCV0N4RFFVRnBRa01zVFVGQmFrSXNSMEZCTUVJc1EwRkJPVUlzUlVGQmFVTTdRVUZETjBKeVF5eFJRVUZCUVN4UlFVRlJMRU5CUVVORkxHRkJRVlFzUTBGQmRVSXNhMEpCUVhaQ0xFVkJRVEpEYTBJc1MwRkJNME1zUTBGQmFVUkRMRTlCUVdwRUxFZEJRVEpFTEUxQlFUTkVPMEZCUTBGeVFpeFJRVUZCUVN4UlFVRlJMRU5CUVVORkxHRkJRVlFzUTBGQmRVSXNjMEpCUVhaQ0xFVkJRU3REYTBJc1MwRkJMME1zUTBGQmNVUkRMRTlCUVhKRUxFZEJRU3RFTEUxQlFTOUVPMEZCUTBnN1FVRkRTaXhMUVV4RU8wRkJUVWdzUjBFeFJrUTdPMEZCTkVaQkxFMUJRVWxwUWl4elFrRkJjMElzUjBGQlJ5eFRRVUY2UWtFc2MwSkJRWGxDTEVkQlFWazdRVUZEY2tNN1FVRkRRU3hSUVVGTmRrTXNSVUZCUlN4SFFVRkhMREJDUVVGWU8wRkJRMEVzVVVGQlRVTXNVVUZCVVN4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVKSUxFVkJRWFpDTEVOQlFXcENMRU5CU0hGRExFTkJTM0pET3p0QlFVTkJMRkZCUVVsSkxGZEJRVmNzUjBGQlIwZ3NVVUZCVVN4RFFVRkRSU3hoUVVGVUxFTkJRWFZDTEdkQ1FVRjJRaXhEUVVGc1FqdEJRVU5CUXl4SlFVRkJRU3hYUVVGWExFTkJRVU5LTEVWQlFWb3NSMEZCYVVJc1JVRkJha0k3UVVGRFFTeFJRVUZKU3l4bFFVRmxMRWRCUVVkRUxGZEJRVmNzUTBGQlEwVXNWVUZCV2l4RFFVRjFRa01zVTBGQk4wTTdRVUZEUVVnc1NVRkJRVUVzVjBGQlZ5eERRVUZEUlN4VlFVRmFMRU5CUVhWQ1JTeFhRVUYyUWl4RFFVRnRRMG9zVjBGQmJrTTdRVUZGUVN4UlFVRkphRUlzVlVGQlZTeEhRVUZITEVsQlFVbERMRkZCUVVvc1EwRkJZVmNzUlVGQllpeEZRVUZwUWp0QlFVRkZPMEZCUTJoRFZpeE5RVUZCUVN4SFFVRkhMRVZCUVVVc2MwUkJSSGxDTzBGQlF5dENPMEZCUXpkRWJVSXNUVUZCUVVFc1pVRkJaU3hGUVVGRkxFVkJSbUU3UVVGSE9VSm9RaXhOUVVGQlFTeFhRVUZYTEVWQlFVVXNRMEZJYVVJN1FVRkhaRHRCUVVOb1Fsa3NUVUZCUVVFc1pVRkJaU3hGUVVGRlFTeGxRVXBoTzBGQlN6bENUU3hOUVVGQlFTeHBRa0ZCYVVJc1JVRkJSVmdzUlVGQlJTeEhRVUZITEd0Q1FVeE5PMEZCUzJNN1FVRkROVU5aTEUxQlFVRkJMRk5CUVZNc1JVRkJSVm9zUlVGQlJTeEhRVUZITEcxQ1FVNWpMRU5CVFUwN08wRkJUazRzUzBGQmFrSXNRMEZCYWtJN1FVRlZRVm9zU1VGQlFVRXNWVUZCVlN4RFFVRkRlVUlzUlVGQldDeERRVUZqTEZkQlFXUXNSVUZCTWtJc1ZVRkJWV3BDTEVsQlFWWXNSVUZCWjBJN1FVRkRka003UVVGRFFTeFZRVUZOY1VJc1lVRkJZU3hIUVVGSGFFSXNVVUZCVVN4RFFVRkRhVUlzWjBKQlFWUXNRMEZCTUVJc1owSkJRVEZDTEVOQlFYUkNPMEZCUTBGRUxFMUJRVUZCTEdGQlFXRXNRMEZCUTBVc1QwRkJaQ3hEUVVGelFpeFZRVUZCUXl4WlFVRlpMRVZCUVVrN1FVRkRiRU5CTEZGQlFVRkJMRmxCUVZrc1EwRkJRME1zUzBGQllpeERRVUZ0UWtNc1QwRkJia0lzUjBGQk5rSXNSVUZCTjBJN1FVRkRTQ3hQUVVaRU8wRkJSMGdzUzBGT1JDeEZRWEpDY1VNc1EwRTJRbkpET3p0QlFVTkJiRU1zU1VGQlFVRXNWVUZCVlN4RFFVRkRlVUlzUlVGQldDeERRVUZqTEhGQ1FVRmtMRVZCUVhGRExGVkJRVlZWTEZGQlFWWXNSVUZCYjBJN1FVRkRja1FzVlVGQlRVTXNXVUZCV1N4SFFVRkhka0lzVVVGQlVTeERRVUZEYVVJc1owSkJRVlFzUTBGQk1FSXNaVUZCTVVJc1EwRkJja0k3UVVGRFFVMHNUVUZCUVVFc1dVRkJXU3hEUVVGRFRDeFBRVUZpTEVOQlFYRkNMRlZCUVVGTkxGZEJRVmNzUlVGQlNUdEJRVU5vUTBFc1VVRkJRVUVzVjBGQlZ5eERRVUZEU2l4TFFVRmFMRU5CUVd0Q1N5eExRVUZzUWl4SFFVRXdRa2dzVVVGQlVTeEhRVUZITEVkQlFYSkRPMEZCUTBnc1QwRkdSRHRCUVVkSUxFdEJURVE3UVVGUFFXNURMRWxCUVVGQkxGVkJRVlVzUTBGQlEzbENMRVZCUVZnc1EwRkJZeXhUUVVGa0xFVkJRWGxDTEZWQlFWVnFRaXhKUVVGV0xFVkJRV2RDTzBGQlEzSkRPMEZCUTBFc1ZVRkJUVFJDTEZsQlFWa3NSMEZCUjNaQ0xGRkJRVkVzUTBGQlEybENMR2RDUVVGVUxFTkJRVEJDTEdWQlFURkNMRU5CUVhKQ08wRkJRMEZOTEUxQlFVRkJMRmxCUVZrc1EwRkJRMHdzVDBGQllpeERRVUZ4UWl4VlFVRkJUU3hYUVVGWExFVkJRVWs3UVVGRGFFTkJMRkZCUVVGQkxGZEJRVmNzUTBGQlEwb3NTMEZCV2l4RFFVRnJRazBzVDBGQmJFSXNSMEZCTkVJc1IwRkJOVUk3UVVGRFNDeFBRVVpFTzBGQlIwZ3NTMEZPUkN4RlFYSkRjVU1zUTBFMlEzSkRPenRCUVVOQmRrTXNTVUZCUVVFc1ZVRkJWU3hEUVVGRGVVSXNSVUZCV0N4RFFVRmpMRlZCUVdRc1JVRkJNRUlzVlVGQlZWVXNVVUZCVml4RlFVRnZRanRCUVVNeFF5eFZRVUZOUXl4WlFVRlpMRWRCUVVkMlFpeFJRVUZSTEVOQlFVTnBRaXhuUWtGQlZDeERRVUV3UWl4alFVRXhRaXhEUVVGeVFqdEJRVVZCVnl4TlFVRkJRU3hWUVVGVkxFTkJRVU1zV1VGQldUdEJRVU51UWt3c1VVRkJRVUVzV1VGQldTeERRVUZEVEN4UFFVRmlMRU5CUVhGQ0xGVkJRVUZOTEZkQlFWY3NSVUZCU1R0QlFVTm9RMEVzVlVGQlFVRXNWMEZCVnl4RFFVRkRkRUlzWVVGQldpeERRVUV3UWl4bFFVRXhRaXhGUVVFeVEydENMRXRCUVRORExFTkJRV2xFVFN4UFFVRnFSQ3hIUVVFeVJDeEhRVUV6UkR0QlFVTkJSaXhWUVVGQlFTeFhRVUZYTEVOQlFVTjBRaXhoUVVGYUxFTkJRVEJDTEZkQlFURkNMRVZCUVhWRGEwSXNTMEZCZGtNc1EwRkJOa05OTEU5QlFUZERMRWRCUVhWRUxFZEJRWFpFTzBGQlEwZ3NVMEZJUkR0QlFVbElMRTlCVEZNc1JVRkxVQ3hIUVV4UExFTkJRVlk3UVVGTlNDeExRVlJFTzBGQlZVZ3NSMEY0UkVRN08wRkJNRVJCTEZOQlFVODdRVUZEU0R0QlFVTkJZU3hKUVVGQlFTeEpRVUZKTEVWQlFVVXNZMEZCVlVNc1QwRkJWaXhGUVVGdFFqdEJRVU55UW5SRUxFMUJRVUZCTEZsQlFWazdRVUZEV2xrc1RVRkJRVUVzV1VGQldUdEJRVU5hZDBNc1RVRkJRVUVzYzBKQlFYTkNPMEZCUTNwQ08wRkJUa1VzUjBGQlVEdEJRVkZJTEVOQmJFdzBRaXhGUVVFM1FpeERMRU5CYjB4Qk96czdRVUZEUVVjc1RVRkJUU3hEUVVGRFF5eHJRa0ZCVUN4RFFVRXdRaXhaUVVGWk8wRkJRMnhEZWtRc1JVRkJRVUVzYzBKQlFYTkNMRU5CUVVOelJDeEpRVUYyUWp0QlFVTklMRU5CUmtRaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk5eVpYTnZkWEpqWlhNdllYTnpaWFJ6TDJOdmNtVXZhbk12WTNWemRHOXRMMlJ2WTNWdFpXNTBZWFJwYjI0dlptOXliWE12WkhKdmNIcHZibVZxY3k1cWN6OWtOV1F4SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4eVhHNWNjbHh1THk4Z1EyeGhjM01nWkdWbWFXNXBkR2x2Ymx4eVhHNTJZWElnUzFSR2IzSnRjMFJ5YjNCNmIyNWxTbE5FWlcxdmN5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUM4dklGQnlhWFpoZEdVZ1puVnVZM1JwYjI1elhISmNiaUFnSUNCMllYSWdaWGhoYlhCc1pVSmhjMmxqSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFWnZjaUJ0YjNKbElHbHVabThnWVdKdmRYUWdSSEp2Y0hwdmJtVWdjR3gxWjJsdUlIWnBjMmwwT2lBZ2FIUjBjSE02THk5M2QzY3VaSEp2Y0hwdmJtVnFjeTVqYjIwdkkzVnpZV2RsWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzE1UkhKdmNIcHZibVVnUFNCdVpYY2dSSEp2Y0hwdmJtVW9YQ0lqYTNSZlpISnZjSHB2Ym1WcWMxOWxlR0Z0Y0d4bFh6RmNJaXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213NklGd2lhSFIwY0hNNkx5OXJaV1Z1ZEdobGJXVnpMbU52YlM5elkzSnBjSFJ6TDNadmFXUXVjR2h3WENJc0lDOHZJRk5sZENCMGFHVWdkWEpzSUdadmNpQjViM1Z5SUhWd2JHOWhaQ0J6WTNKcGNIUWdiRzlqWVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZVzFPWVcxbE9pQmNJbVpwYkdWY0lpd2dMeThnVkdobElHNWhiV1VnZEdoaGRDQjNhV3hzSUdKbElIVnpaV1FnZEc4Z2RISmhibk5tWlhJZ2RHaGxJR1pwYkdWY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYldGNFJtbHNaWE02SURFd0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYaEdhV3hsYzJsNlpUb2dNVEFzSUM4dklFMUNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaRkpsYlc5MlpVeHBibXR6T2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZMk5sY0hRNklHWjFibU4wYVc5dUlDaG1hV3hsTENCa2IyNWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abWxzWlM1dVlXMWxJRDA5SUZ3aWQyOTNMbXB3WjF3aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOXVaU2hjSWs1aGFHRXNJSGx2ZFNCa2IyNG5kQzVjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmJtVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQmxlR0Z0Y0d4bFVYVmxkV1VnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2MyVjBJSFJvWlNCa2NtOXdlbTl1WlNCamIyNTBZV2x1WlhJZ2FXUmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBaQ0E5SUZ3aUkydDBYMlJ5YjNCNmIyNWxhbk5mWlhoaGJYQnNaVjh5WENJN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pISnZjSHB2Ym1VZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dsa0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhSb1pTQndjbVYyYVdWM0lHVnNaVzFsYm5RZ2RHVnRjR3hoZEdWY2NseHVJQ0FnSUNBZ0lDQjJZWElnY0hKbGRtbGxkMDV2WkdVZ1BTQmtjbTl3ZW05dVpTNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxtUnliM0I2YjI1bExXbDBaVzFjSWlrN1hISmNiaUFnSUNBZ0lDQWdjSEpsZG1sbGQwNXZaR1V1YVdRZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3Y21WMmFXVjNWR1Z0Y0d4aGRHVWdQU0J3Y21WMmFXVjNUbTlrWlM1d1lYSmxiblJPYjJSbExtbHVibVZ5U0ZSTlREdGNjbHh1SUNBZ0lDQWdJQ0J3Y21WMmFXVjNUbTlrWlM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSEJ5WlhacFpYZE9iMlJsS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMTVSSEp2Y0hwdmJtVWdQU0J1WlhjZ1JISnZjSHB2Ym1Vb2FXUXNJSHNnTHk4Z1RXRnJaU0IwYUdVZ2QyaHZiR1VnWW05a2VTQmhJR1J5YjNCNmIyNWxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIVnliRG9nWENKb2RIUndjem92TDNCeVpYWnBaWGN1YTJWbGJuUm9aVzFsY3k1amIyMHZZWEJwTDJSeWIzQjZiMjVsTDNadmFXUXVjR2h3WENJc0lDOHZJRk5sZENCMGFHVWdkWEpzSUdadmNpQjViM1Z5SUhWd2JHOWhaQ0J6WTNKcGNIUWdiRzlqWVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZV3hzWld4VmNHeHZZV1J6T2lBeU1DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxkbWxsZDFSbGJYQnNZWFJsT2lCd2NtVjJhV1YzVkdWdGNHeGhkR1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUVacGJHVnphWHBsT2lBeExDQXZMeUJOWVhnZ1ptbHNaWE5wZW1VZ2FXNGdUVUpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWFYwYjFGMVpYVmxPaUJtWVd4elpTd2dMeThnVFdGclpTQnpkWEpsSUhSb1pTQm1hV3hsY3lCaGNtVnVKM1FnY1hWbGRXVmtJSFZ1ZEdsc0lHMWhiblZoYkd4NUlHRmtaR1ZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhacFpYZHpRMjl1ZEdGcGJtVnlPaUJwWkNBcklGd2lJQzVrY205d2VtOXVaUzFwZEdWdGMxd2lMQ0F2THlCRVpXWnBibVVnZEdobElHTnZiblJoYVc1bGNpQjBieUJrYVhOd2JHRjVJSFJvWlNCd2NtVjJhV1YzYzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdsamEyRmliR1U2SUdsa0lDc2dYQ0lnTG1SeWIzQjZiMjVsTFhObGJHVmpkRndpSUM4dklFUmxabWx1WlNCMGFHVWdaV3hsYldWdWRDQjBhR0YwSUhOb2IzVnNaQ0JpWlNCMWMyVmtJR0Z6SUdOc2FXTnJJSFJ5YVdkblpYSWdkRzhnYzJWc1pXTjBJR1pwYkdWekxseHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J0ZVVSeWIzQjZiMjVsTG05dUtGd2lZV1JrWldSbWFXeGxYQ0lzSUdaMWJtTjBhVzl1SUNobWFXeGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVodmIydDFjQ0IwYUdVZ2MzUmhjblFnWW5WMGRHOXVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1Y0hKbGRtbGxkMFZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2locFpDQXJJRndpSUM1a2NtOXdlbTl1WlMxemRHRnlkRndpS1M1dmJtTnNhV05ySUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ0ZVVSeWIzQjZiMjVsTG1WdWNYVmxkV1ZHYVd4bEtHWnBiR1VwT3lCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrY205d2VtOXVaVWwwWlcxeklEMGdaSEp2Y0hwdmJtVXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbVJ5YjNCNmIyNWxMV2wwWlcwbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pISnZjSHB2Ym1WSmRHVnRjeTVtYjNKRllXTm9LR1J5YjNCNmIyNWxTWFJsYlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrY205d2VtOXVaVWwwWlcwdWMzUjViR1V1WkdsemNHeGhlU0E5SUNjbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pISnZjSHB2Ym1VdWNYVmxjbmxUWld4bFkzUnZjaWduTG1SeWIzQjZiMjVsTFhWd2JHOWhaQ2NwTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW1sdWJHbHVaUzFpYkc5amExd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtjbTl3ZW05dVpTNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdVpISnZjSHB2Ym1VdGNtVnRiM1psTFdGc2JDY3BMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQmNJbWx1YkdsdVpTMWliRzlqYTF3aU8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCVmNHUmhkR1VnZEdobElIUnZkR0ZzSUhCeWIyZHlaWE56SUdKaGNseHlYRzRnSUNBZ0lDQWdJRzE1UkhKdmNIcHZibVV1YjI0b1hDSjBiM1JoYkhWd2JHOWhaSEJ5YjJkeVpYTnpYQ0lzSUdaMWJtTjBhVzl1SUNod2NtOW5jbVZ6Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205bmNtVnpjMEpoY25NZ1BTQmtjbTl3ZW05dVpTNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VjSEp2WjNKbGMzTXRZbUZ5SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWIyZHlaWE56UW1GeWN5NW1iM0pGWVdOb0tIQnliMmR5WlhOelFtRnlJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliMmR5WlhOelFtRnlMbk4wZVd4bExuZHBaSFJvSUQwZ2NISnZaM0psYzNNZ0t5QmNJaVZjSWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRzE1UkhKdmNIcHZibVV1YjI0b1hDSnpaVzVrYVc1blhDSXNJR1oxYm1OMGFXOXVJQ2htYVd4bEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYjNjZ2RHaGxJSFJ2ZEdGc0lIQnliMmR5WlhOeklHSmhjaUIzYUdWdUlIVndiRzloWkNCemRHRnlkSE5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISnZaM0psYzNOQ1lYSnpJRDBnWkhKdmNIcHZibVV1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG5CeWIyZHlaWE56TFdKaGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTluY21WemMwSmhjbk11Wm05eVJXRmphQ2h3Y205bmNtVnpjMEpoY2lBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjMEpoY2k1emRIbHNaUzV2Y0dGamFYUjVJRDBnWENJeFhDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCYm1RZ1pHbHpZV0pzWlNCMGFHVWdjM1JoY25RZ1luVjBkRzl1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWNISmxkbWxsZDBWc1pXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaHBaQ0FySUZ3aUlDNWtjbTl3ZW05dVpTMXpkR0Z5ZEZ3aUtTNXpaWFJCZEhSeWFXSjFkR1VvWENKa2FYTmhZbXhsWkZ3aUxDQmNJbVJwYzJGaWJHVmtYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJJYVdSbElIUm9aU0IwYjNSaGJDQndjbTluY21WemN5QmlZWElnZDJobGJpQnViM1JvYVc1bkozTWdkWEJzYjJGa2FXNW5JR0Z1ZVcxdmNtVmNjbHh1SUNBZ0lDQWdJQ0J0ZVVSeWIzQjZiMjVsTG05dUtGd2lZMjl0Y0d4bGRHVmNJaXdnWm5WdVkzUnBiMjRnS0hCeWIyZHlaWE56S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5YjJkeVpYTnpRbUZ5Y3lBOUlHUnliM0I2YjI1bExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NWtlaTFqYjIxd2JHVjBaU2NwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOW5jbVZ6YzBKaGNuTXVabTl5UldGamFDaHdjbTluY21WemMwSmhjaUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlozSmxjM05DWVhJdWNYVmxjbmxUWld4bFkzUnZjaWduTG5CeWIyZHlaWE56TFdKaGNpY3BMbk4wZVd4bExtOXdZV05wZEhrZ1BTQmNJakJjSWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjMEpoY2k1eGRXVnllVk5sYkdWamRHOXlLQ2N1Y0hKdlozSmxjM01uS1M1emRIbHNaUzV2Y0dGamFYUjVJRDBnWENJd1hDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZaM0psYzNOQ1lYSXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtUnliM0I2YjI1bExYTjBZWEowSnlrdWMzUjViR1V1YjNCaFkybDBlU0E5SUZ3aU1Gd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lETXdNQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZEhWd0lIUm9aU0JpZFhSMGIyNXpJR1p2Y2lCaGJHd2dkSEpoYm5ObVpYSnpYSEpjYmlBZ0lDQWdJQ0FnWkhKdmNIcHZibVV1Y1hWbGNubFRaV3hsWTNSdmNpaGNJaTVrY205d2VtOXVaUzExY0d4dllXUmNJaWt1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxNVJISnZjSHB2Ym1VdVpXNXhkV1YxWlVacGJHVnpLRzE1UkhKdmNIcHZibVV1WjJWMFJtbHNaWE5YYVhSb1UzUmhkSFZ6S0VSeWIzQjZiMjVsTGtGRVJFVkVLU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZEhWd0lIUm9aU0JpZFhSMGIyNGdabTl5SUhKbGJXOTJaU0JoYkd3Z1ptbHNaWE5jY2x4dUlDQWdJQ0FnSUNCa2NtOXdlbTl1WlM1eGRXVnllVk5sYkdWamRHOXlLRndpTG1SeWIzQjZiMjVsTFhKbGJXOTJaUzFoYkd4Y0lpa3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1J5YjNCNmIyNWxMbkYxWlhKNVUyVnNaV04wYjNJb0p5NWtjbTl3ZW05dVpTMTFjR3h2WVdRbktTNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ1hDSnViMjVsWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSeWIzQjZiMjVsTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVrY205d2VtOXVaUzF5WlcxdmRtVXRZV3hzSnlrdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0ZVVSeWIzQjZiMjVsTG5KbGJXOTJaVUZzYkVacGJHVnpLSFJ5ZFdVcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCUGJpQmhiR3dnWm1sc1pYTWdZMjl0Y0d4bGRHVmtJSFZ3Ykc5aFpGeHlYRzRnSUNBZ0lDQWdJRzE1UkhKdmNIcHZibVV1YjI0b1hDSnhkV1YxWldOdmJYQnNaWFJsWENJc0lHWjFibU4wYVc5dUlDaHdjbTluY21WemN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNHeHZZV1JKWTI5dWN5QTlJR1J5YjNCNmIyNWxMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTVrY205d2VtOXVaUzExY0d4dllXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkWEJzYjJGa1NXTnZibk11Wm05eVJXRmphQ2gxY0d4dllXUkpZMjl1SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3Ykc5aFpFbGpiMjR1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJRndpYm05dVpWd2lPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdUMjRnWVd4c0lHWnBiR1Z6SUhKbGJXOTJaV1JjY2x4dUlDQWdJQ0FnSUNCdGVVUnliM0I2YjI1bExtOXVLRndpY21WdGIzWmxaR1pwYkdWY0lpd2dablZ1WTNScGIyNGdLR1pwYkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzE1UkhKdmNIcHZibVV1Wm1sc1pYTXViR1Z1WjNSb0lEd2dNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISnZjSHB2Ym1VdWNYVmxjbmxUWld4bFkzUnZjaWduTG1SeWIzQjZiMjVsTFhWd2JHOWhaQ2NwTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0JjSW01dmJtVmNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSeWIzQjZiMjVsTG5GMVpYSjVVMlZzWldOMGIzSW9KeTVrY205d2VtOXVaUzF5WlcxdmRtVXRZV3hzSnlrdWMzUjViR1V1WkdsemNHeGhlU0E5SUZ3aWJtOXVaVndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZG1GeUlHVjRZVzF3YkdWUmRXVjFaVUYxZEc5VmNHeHZZV1FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2MyVjBJSFJvWlNCa2NtOXdlbTl1WlNCamIyNTBZV2x1WlhJZ2FXUmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBaQ0E5SUZ3aUkydDBYMlJ5YjNCNmIyNWxhbk5mWlhoaGJYQnNaVjh6WENJN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pISnZjSHB2Ym1VZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dsa0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhSb1pTQndjbVYyYVdWM0lHVnNaVzFsYm5RZ2RHVnRjR3hoZEdWY2NseHVJQ0FnSUNBZ0lDQjJZWElnY0hKbGRtbGxkMDV2WkdVZ1BTQmtjbTl3ZW05dVpTNXhkV1Z5ZVZObGJHVmpkRzl5S0Z3aUxtUnliM0I2YjI1bExXbDBaVzFjSWlrN1hISmNiaUFnSUNBZ0lDQWdjSEpsZG1sbGQwNXZaR1V1YVdRZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3Y21WMmFXVjNWR1Z0Y0d4aGRHVWdQU0J3Y21WMmFXVjNUbTlrWlM1d1lYSmxiblJPYjJSbExtbHVibVZ5U0ZSTlREdGNjbHh1SUNBZ0lDQWdJQ0J3Y21WMmFXVjNUbTlrWlM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSEJ5WlhacFpYZE9iMlJsS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMTVSSEp2Y0hwdmJtVWdQU0J1WlhjZ1JISnZjSHB2Ym1Vb2FXUXNJSHNnTHk4Z1RXRnJaU0IwYUdVZ2QyaHZiR1VnWW05a2VTQmhJR1J5YjNCNmIyNWxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIVnliRG9nWENKb2RIUndjem92TDNCeVpYWnBaWGN1YTJWbGJuUm9aVzFsY3k1amIyMHZZWEJwTDJSeWIzQjZiMjVsTDNadmFXUXVjR2h3WENJc0lDOHZJRk5sZENCMGFHVWdkWEpzSUdadmNpQjViM1Z5SUhWd2JHOWhaQ0J6WTNKcGNIUWdiRzlqWVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRnlZV3hzWld4VmNHeHZZV1J6T2lBeU1DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRjRSbWxzWlhOcGVtVTZJREVzSUM4dklFMWhlQ0JtYVd4bGMybDZaU0JwYmlCTlFseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhV1YzVkdWdGNHeGhkR1U2SUhCeVpYWnBaWGRVWlcxd2JHRjBaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjSEpsZG1sbGQzTkRiMjUwWVdsdVpYSTZJR2xrSUNzZ1hDSWdMbVJ5YjNCNmIyNWxMV2wwWlcxelhDSXNJQzh2SUVSbFptbHVaU0IwYUdVZ1kyOXVkR0ZwYm1WeUlIUnZJR1JwYzNCc1lYa2dkR2hsSUhCeVpYWnBaWGR6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zYVdOcllXSnNaVG9nYVdRZ0t5QmNJaUF1WkhKdmNIcHZibVV0YzJWc1pXTjBYQ0lnTHk4Z1JHVm1hVzVsSUhSb1pTQmxiR1Z0Wlc1MElIUm9ZWFFnYzJodmRXeGtJR0psSUhWelpXUWdZWE1nWTJ4cFkyc2dkSEpwWjJkbGNpQjBieUJ6Wld4bFkzUWdabWxzWlhNdVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnSUNCdGVVUnliM0I2YjI1bExtOXVLRndpWVdSa1pXUm1hV3hsWENJc0lHWjFibU4wYVc5dUlDaG1hV3hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFaHZiMnQxY0NCMGFHVWdjM1JoY25RZ1luVjBkRzl1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUnliM0I2YjI1bFNYUmxiWE1nUFNCa2NtOXdlbTl1WlM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdVpISnZjSHB2Ym1VdGFYUmxiU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrY205d2VtOXVaVWwwWlcxekxtWnZja1ZoWTJnb1pISnZjSHB2Ym1WSmRHVnRJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnliM0I2YjI1bFNYUmxiUzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKeWM3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhSdmRHRnNJSEJ5YjJkeVpYTnpJR0poY2x4eVhHNGdJQ0FnSUNBZ0lHMTVSSEp2Y0hwdmJtVXViMjRvWENKMGIzUmhiSFZ3Ykc5aFpIQnliMmR5WlhOelhDSXNJR1oxYm1OMGFXOXVJQ2h3Y205bmNtVnpjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbTluY21WemMwSmhjbk1nUFNCa2NtOXdlbTl1WlM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWNISnZaM0psYzNNdFltRnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJkeVpYTnpRbUZ5Y3k1bWIzSkZZV05vS0hCeWIyZHlaWE56UW1GeUlEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIyZHlaWE56UW1GeUxuTjBlV3hsTG5kcFpIUm9JRDBnY0hKdlozSmxjM01nS3lCY0lpVmNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHMTVSSEp2Y0hwdmJtVXViMjRvWENKelpXNWthVzVuWENJc0lHWjFibU4wYVc5dUlDaG1hV3hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTm9iM2NnZEdobElIUnZkR0ZzSUhCeWIyZHlaWE56SUdKaGNpQjNhR1Z1SUhWd2JHOWhaQ0J6ZEdGeWRITmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKdlozSmxjM05DWVhKeklEMGdaSEp2Y0hwdmJtVXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbkJ5YjJkeVpYTnpMV0poY2ljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOW5jbVZ6YzBKaGNuTXVabTl5UldGamFDaHdjbTluY21WemMwSmhjaUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTluY21WemMwSmhjaTV6ZEhsc1pTNXZjR0ZqYVhSNUlEMGdYQ0l4WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCSWFXUmxJSFJvWlNCMGIzUmhiQ0J3Y205bmNtVnpjeUJpWVhJZ2QyaGxiaUJ1YjNSb2FXNW5YQ0p6SUhWd2JHOWhaR2x1WnlCaGJubHRiM0psWEhKY2JpQWdJQ0FnSUNBZ2JYbEVjbTl3ZW05dVpTNXZiaWhjSW1OdmJYQnNaWFJsWENJc0lHWjFibU4wYVc5dUlDaHdjbTluY21WemN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtOW5jbVZ6YzBKaGNuTWdQU0JrY205d2VtOXVaUzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1WkhvdFkyOXRjR3hsZEdVbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2WjNKbGMzTkNZWEp6TG1admNrVmhZMmdvY0hKdlozSmxjM05DWVhJZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliMmR5WlhOelFtRnlMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdjbTluY21WemN5MWlZWEluS1M1emRIbHNaUzV2Y0dGamFYUjVJRDBnWENJd1hDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZaM0psYzNOQ1lYSXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQnliMmR5WlhOekp5a3VjM1I1YkdVdWIzQmhZMmwwZVNBOUlGd2lNRndpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJRE13TUNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJRZFdKc2FXTWdSblZ1WTNScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnYVc1cGREb2dablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhoYlhCc1pVSmhjMmxqS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWNFlXMXdiR1ZSZFdWMVpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlR0Z0Y0d4bFVYVmxkV1ZCZFhSdlZYQnNiMkZrS0NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dWZTZ3BPMXh5WEc1Y2NseHVMeThnVDI0Z1pHOWpkVzFsYm5RZ2NtVmhaSGxjY2x4dVMxUlZkR2xzTG05dVJFOU5RMjl1ZEdWdWRFeHZZV1JsWkNobWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQkxWRVp2Y20xelJISnZjSHB2Ym1WS1UwUmxiVzl6TG1sdWFYUW9LVHRjY2x4dWZTazdYSEpjYmlKZExDSnVZVzFsY3lJNld5SkxWRVp2Y20xelJISnZjSHB2Ym1WS1UwUmxiVzl6SWl3aVpYaGhiWEJzWlVKaGMybGpJaXdpYlhsRWNtOXdlbTl1WlNJc0lrUnliM0I2YjI1bElpd2lkWEpzSWl3aWNHRnlZVzFPWVcxbElpd2liV0Y0Um1sc1pYTWlMQ0p0WVhoR2FXeGxjMmw2WlNJc0ltRmtaRkpsYlc5MlpVeHBibXR6SWl3aVlXTmpaWEIwSWl3aVptbHNaU0lzSW1SdmJtVWlMQ0p1WVcxbElpd2laWGhoYlhCc1pWRjFaWFZsSWl3aWFXUWlMQ0prY205d2VtOXVaU0lzSW1SdlkzVnRaVzUwSWl3aWNYVmxjbmxUWld4bFkzUnZjaUlzSW5CeVpYWnBaWGRPYjJSbElpd2ljSEpsZG1sbGQxUmxiWEJzWVhSbElpd2ljR0Z5Wlc1MFRtOWtaU0lzSW1sdWJtVnlTRlJOVENJc0luSmxiVzkyWlVOb2FXeGtJaXdpY0dGeVlXeHNaV3hWY0d4dllXUnpJaXdpWVhWMGIxRjFaWFZsSWl3aWNISmxkbWxsZDNORGIyNTBZV2x1WlhJaUxDSmpiR2xqYTJGaWJHVWlMQ0p2YmlJc0luQnlaWFpwWlhkRmJHVnRaVzUwSWl3aWIyNWpiR2xqYXlJc0ltVnVjWFZsZFdWR2FXeGxJaXdpWkhKdmNIcHZibVZKZEdWdGN5SXNJbkYxWlhKNVUyVnNaV04wYjNKQmJHd2lMQ0ptYjNKRllXTm9JaXdpWkhKdmNIcHZibVZKZEdWdElpd2ljM1I1YkdVaUxDSmthWE53YkdGNUlpd2ljSEp2WjNKbGMzTWlMQ0p3Y205bmNtVnpjMEpoY25NaUxDSndjbTluY21WemMwSmhjaUlzSW5kcFpIUm9JaXdpYjNCaFkybDBlU0lzSW5ObGRFRjBkSEpwWW5WMFpTSXNJbk5sZEZScGJXVnZkWFFpTENKaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SWl3aVpXNXhkV1YxWlVacGJHVnpJaXdpWjJWMFJtbHNaWE5YYVhSb1UzUmhkSFZ6SWl3aVFVUkVSVVFpTENKeVpXMXZkbVZCYkd4R2FXeGxjeUlzSW5Wd2JHOWhaRWxqYjI1eklpd2lkWEJzYjJGa1NXTnZiaUlzSW1acGJHVnpJaXdpYkdWdVozUm9JaXdpWlhoaGJYQnNaVkYxWlhWbFFYVjBiMVZ3Ykc5aFpDSXNJbWx1YVhRaUxDSmxiR1Z0Wlc1MElpd2lTMVJWZEdsc0lpd2liMjVFVDAxRGIyNTBaVzUwVEc5aFpHVmtJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL2Ryb3B6b25lanMuanNcXG5cIik7XHJcblxyXG4vKioqLyB9KVxyXG5cclxuLyoqKioqKi8gXHR9KTtcclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyBzdGFydHVwXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgY2FuJ3QgYmUgaW5saW5lZCBiZWNhdXNlIHRoZSBldmFsLXNvdXJjZS1tYXAgZGV2dG9vbCBpcyB1c2VkLlxyXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XHJcbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1tcIi4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL2Ryb3B6b25lanMuanNcIl0oKTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gfSkoKVxyXG47Il0sImZpbGUiOiIuL3Jlc291cmNlcy9zcmMvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvZHJvcHpvbmVqcy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/forms/dropzonejs.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/forms/dropzonejs.js"]();
/******/ 	
/******/ })()
;