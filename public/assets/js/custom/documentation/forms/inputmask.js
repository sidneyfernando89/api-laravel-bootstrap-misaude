/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/forms/inputmask.js":
/*!******************************************************************!*\
  !*** ./resources/src/js/custom/documentation/forms/inputmask.js ***!
  \******************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/forms/inputmask.js\":\n    /*!**************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/forms/inputmask.js ***!\r\n      \\**************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationFormsInputmaskJs() {\n      eval(\" // Class definition\\n\\nvar KTFormsInputmaskDemos = function () {\\n  // Private functions\\n  var _examples = function _examples() {\\n    // Date\\n    Inputmask({\\n      \\\"mask\\\": \\\"99/99/9999\\\"\\n    }).mask(\\\"#kt_inputmask_1\\\"); // Phone \\n\\n    Inputmask({\\n      \\\"mask\\\": \\\"(999) 999-9999\\\"\\n    }).mask(\\\"#kt_inputmask_2\\\"); // Placeholder \\n\\n    Inputmask({\\n      \\\"mask\\\": \\\"(999) 999-9999\\\",\\n      \\\"placeholder\\\": \\\"(999) 999-9999\\\"\\n    }).mask(\\\"#kt_inputmask_3\\\"); // Repeating \\n\\n    Inputmask({\\n      \\\"mask\\\": \\\"9\\\",\\n      \\\"repeat\\\": 10,\\n      \\\"greedy\\\": false\\n    }).mask(\\\"#kt_inputmask_4\\\"); // Right aligned \\n\\n    Inputmask(\\\"decimal\\\", {\\n      \\\"rightAlignNumerics\\\": false\\n    }).mask(\\\"#kt_inputmask_5\\\"); // Currency\\n\\n    Inputmask(\\\"â‚¬ 999.999.999,99\\\", {\\n      \\\"numericInput\\\": true\\n    }).mask(\\\"#kt_inputmask_6\\\"); // Ip address\\n\\n    Inputmask({\\n      \\\"mask\\\": \\\"999.999.999.999\\\"\\n    }).mask(\\\"#kt_inputmask_7\\\"); // Email address\\n\\n    Inputmask({\\n      mask: \\\"*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]\\\",\\n      greedy: false,\\n      onBeforePaste: function onBeforePaste(pastedValue, opts) {\\n        pastedValue = pastedValue.toLowerCase();\\n        return pastedValue.replace(\\\"mailto:\\\", \\\"\\\");\\n      },\\n      definitions: {\\n        \\\"*\\\": {\\n          validator: '[0-9A-Za-z!#$%&\\\"*+/=?^_`{|}~\\\\-]',\\n          cardinality: 1,\\n          casing: \\\"lower\\\"\\n        }\\n      }\\n    }).mask(\\\"#kt_inputmask_8\\\");\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init(element) {\\n      _examples();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFormsInputmaskDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2RvY3VtZW50YXRpb24vZm9ybXMvaW5wdXRtYXNrLmpzLmpzIiwibWFwcGluZ3MiOiJDQUVBOztBQUNBLElBQUlBLHFCQUFxQixHQUFHLFlBQVc7QUFDbkM7QUFDQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFXO0FBQ3ZCO0FBQ0FDLElBQUFBLFNBQVMsQ0FBQztBQUNOLGNBQVM7QUFESCxLQUFELENBQVQsQ0FFR0MsSUFGSCxDQUVRLGlCQUZSLEVBRnVCLENBTXZCOztBQUNBRCxJQUFBQSxTQUFTLENBQUM7QUFDTixjQUFTO0FBREgsS0FBRCxDQUFULENBRUdDLElBRkgsQ0FFUSxpQkFGUixFQVB1QixDQVd2Qjs7QUFDQUQsSUFBQUEsU0FBUyxDQUFDO0FBQ04sY0FBUyxnQkFESDtBQUVOLHFCQUFlO0FBRlQsS0FBRCxDQUFULENBR0dDLElBSEgsQ0FHUSxpQkFIUixFQVp1QixDQWlCdkI7O0FBQ0FELElBQUFBLFNBQVMsQ0FBQztBQUNOLGNBQVEsR0FERjtBQUVOLGdCQUFVLEVBRko7QUFHTixnQkFBVTtBQUhKLEtBQUQsQ0FBVCxDQUlHQyxJQUpILENBSVEsaUJBSlIsRUFsQnVCLENBd0J2Qjs7QUFDQUQsSUFBQUEsU0FBUyxDQUFDLFNBQUQsRUFBWTtBQUNqQiw0QkFBc0I7QUFETCxLQUFaLENBQVQsQ0FFR0MsSUFGSCxDQUVRLGlCQUZSLEVBekJ1QixDQTZCdkI7O0FBQ0FELElBQUFBLFNBQVMsQ0FBQyxrQkFBRCxFQUFxQjtBQUMxQixzQkFBZ0I7QUFEVSxLQUFyQixDQUFULENBRUdDLElBRkgsQ0FFUSxpQkFGUixFQTlCdUIsQ0FrQ3ZCOztBQUNBRCxJQUFBQSxTQUFTLENBQUM7QUFDTixjQUFRO0FBREYsS0FBRCxDQUFULENBRUdDLElBRkgsQ0FFUSxpQkFGUixFQW5DdUIsQ0F1Q3ZCOztBQUNBRCxJQUFBQSxTQUFTLENBQUM7QUFDTkMsTUFBQUEsSUFBSSxFQUFFLGlFQURBO0FBRU5DLE1BQUFBLE1BQU0sRUFBRSxLQUZGO0FBR05DLE1BQUFBLGFBQWEsRUFBRSx1QkFBVUMsV0FBVixFQUF1QkMsSUFBdkIsRUFBNkI7QUFDeENELFFBQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRSxXQUFaLEVBQWQ7QUFDQSxlQUFPRixXQUFXLENBQUNHLE9BQVosQ0FBb0IsU0FBcEIsRUFBK0IsRUFBL0IsQ0FBUDtBQUNILE9BTks7QUFPTkMsTUFBQUEsV0FBVyxFQUFFO0FBQ1QsYUFBSztBQUNEQyxVQUFBQSxTQUFTLEVBQUUsaUNBRFY7QUFFREMsVUFBQUEsV0FBVyxFQUFFLENBRlo7QUFHREMsVUFBQUEsTUFBTSxFQUFFO0FBSFA7QUFESTtBQVBQLEtBQUQsQ0FBVCxDQWNHVixJQWRILENBY1EsaUJBZFI7QUFlSCxHQXZERDs7QUF5REEsU0FBTztBQUNIO0FBQ0FXLElBQUFBLElBQUksRUFBRSxjQUFTQyxPQUFULEVBQWtCO0FBQ3BCZCxNQUFBQSxTQUFTO0FBQ1o7QUFKRSxHQUFQO0FBTUgsQ0FqRTJCLEVBQTVCLEMsQ0FtRUE7OztBQUNBZSxNQUFNLENBQUNDLGtCQUFQLENBQTBCLFlBQVc7QUFDakNqQixFQUFBQSxxQkFBcUIsQ0FBQ2MsSUFBdEI7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9jb3JlL2pzL2N1c3RvbS9kb2N1bWVudGF0aW9uL2Zvcm1zL2lucHV0bWFzay5qcz8wMDFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ2xhc3MgZGVmaW5pdGlvblxyXG52YXIgS1RGb3Jtc0lucHV0bWFza0RlbW9zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9leGFtcGxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIERhdGVcclxuICAgICAgICBJbnB1dG1hc2soe1xyXG4gICAgICAgICAgICBcIm1hc2tcIiA6IFwiOTkvOTkvOTk5OVwiXHJcbiAgICAgICAgfSkubWFzayhcIiNrdF9pbnB1dG1hc2tfMVwiKTtcclxuXHJcbiAgICAgICAgLy8gUGhvbmUgXHJcbiAgICAgICAgSW5wdXRtYXNrKHtcclxuICAgICAgICAgICAgXCJtYXNrXCIgOiBcIig5OTkpIDk5OS05OTk5XCJcclxuICAgICAgICB9KS5tYXNrKFwiI2t0X2lucHV0bWFza18yXCIpO1xyXG5cclxuICAgICAgICAvLyBQbGFjZWhvbGRlciBcclxuICAgICAgICBJbnB1dG1hc2soe1xyXG4gICAgICAgICAgICBcIm1hc2tcIiA6IFwiKDk5OSkgOTk5LTk5OTlcIixcclxuICAgICAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIig5OTkpIDk5OS05OTk5XCIsXHJcbiAgICAgICAgfSkubWFzayhcIiNrdF9pbnB1dG1hc2tfM1wiKTtcclxuXHJcbiAgICAgICAgLy8gUmVwZWF0aW5nIFxyXG4gICAgICAgIElucHV0bWFzayh7XHJcbiAgICAgICAgICAgIFwibWFza1wiOiBcIjlcIixcclxuICAgICAgICAgICAgXCJyZXBlYXRcIjogMTAsXHJcbiAgICAgICAgICAgIFwiZ3JlZWR5XCI6IGZhbHNlXHJcbiAgICAgICAgfSkubWFzayhcIiNrdF9pbnB1dG1hc2tfNFwiKTtcclxuXHJcbiAgICAgICAgLy8gUmlnaHQgYWxpZ25lZCBcclxuICAgICAgICBJbnB1dG1hc2soXCJkZWNpbWFsXCIsIHtcclxuICAgICAgICAgICAgXCJyaWdodEFsaWduTnVtZXJpY3NcIjogZmFsc2VcclxuICAgICAgICB9KS5tYXNrKFwiI2t0X2lucHV0bWFza181XCIpO1xyXG5cclxuICAgICAgICAvLyBDdXJyZW5jeVxyXG4gICAgICAgIElucHV0bWFzayhcIuKCrCA5OTkuOTk5Ljk5OSw5OVwiLCB7XHJcbiAgICAgICAgICAgIFwibnVtZXJpY0lucHV0XCI6IHRydWVcclxuICAgICAgICB9KS5tYXNrKFwiI2t0X2lucHV0bWFza182XCIpO1xyXG5cclxuICAgICAgICAvLyBJcCBhZGRyZXNzXHJcbiAgICAgICAgSW5wdXRtYXNrKHtcclxuICAgICAgICAgICAgXCJtYXNrXCI6IFwiOTk5Ljk5OS45OTkuOTk5XCJcclxuICAgICAgICB9KS5tYXNrKFwiI2t0X2lucHV0bWFza183XCIpO1xyXG5cclxuICAgICAgICAvLyBFbWFpbCBhZGRyZXNzXHJcbiAgICAgICAgSW5wdXRtYXNrKHtcclxuICAgICAgICAgICAgbWFzazogXCIqezEsMjB9Wy4qezEsMjB9XVsuKnsxLDIwfV1bLip7MSwyMH1dQCp7MSwyMH1bLip7Miw2fV1bLip7MSwyfV1cIixcclxuICAgICAgICAgICAgZ3JlZWR5OiBmYWxzZSxcclxuICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24gKHBhc3RlZFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZWRWYWx1ZSA9IHBhc3RlZFZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFzdGVkVmFsdWUucmVwbGFjZShcIm1haWx0bzpcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBcIipcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogJ1swLTlBLVphLXohIyQlJlwiKisvPT9eX2B7fH1+XFwtXScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLm1hc2soXCIja3RfaW5wdXRtYXNrXzhcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICBfZXhhbXBsZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xyXG4gICAgS1RGb3Jtc0lucHV0bWFza0RlbW9zLmluaXQoKTtcclxufSk7XHJcbiJdLCJuYW1lcyI6WyJLVEZvcm1zSW5wdXRtYXNrRGVtb3MiLCJfZXhhbXBsZXMiLCJJbnB1dG1hc2siLCJtYXNrIiwiZ3JlZWR5Iiwib25CZWZvcmVQYXN0ZSIsInBhc3RlZFZhbHVlIiwib3B0cyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImRlZmluaXRpb25zIiwidmFsaWRhdG9yIiwiY2FyZGluYWxpdHkiLCJjYXNpbmciLCJpbml0IiwiZWxlbWVudCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/inputmask.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/forms/inputmask.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/forms/inputmask.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/forms/inputmask.js"]();
/******/ 	
/******/ })()
;