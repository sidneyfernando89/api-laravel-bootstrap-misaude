/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/forms/nouislider.js":
/*!*******************************************************************!*\
  !*** ./resources/src/js/custom/documentation/forms/nouislider.js ***!
  \*******************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/forms/nouislider.js\":\n    /*!***************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/forms/nouislider.js ***!\r\n      \\***************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationFormsNouisliderJs() {\n      eval(\" // Class definition\\n\\nvar KTFormsNouisliderDemos = function () {\\n  // Private functions\\n  var _exampleBasic = function _exampleBasic() {\\n    var slider = document.querySelector(\\\"#kt_slider_basic\\\");\\n    var valueMin = document.querySelector(\\\"#kt_slider_basic_min\\\");\\n    var valueMax = document.querySelector(\\\"#kt_slider_basic_max\\\");\\n    noUiSlider.create(slider, {\\n      start: [20, 80],\\n      connect: true,\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 100\\n      }\\n    });\\n    slider.noUiSlider.on(\\\"update\\\", function (values, handle) {\\n      if (handle) {\\n        valueMax.innerHTML = values[handle];\\n      } else {\\n        valueMin.innerHTML = values[handle];\\n      }\\n    });\\n  };\\n\\n  var _exampleSizes = function _exampleSizes() {\\n    var slider1 = document.querySelector(\\\"#kt_slider_sizes_sm\\\");\\n    var slider2 = document.querySelector(\\\"#kt_slider_sizes_default\\\");\\n    var slider3 = document.querySelector(\\\"#kt_slider_sizes_lg\\\");\\n    noUiSlider.create(slider1, {\\n      start: [20, 80],\\n      connect: true,\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 100\\n      }\\n    });\\n    noUiSlider.create(slider2, {\\n      start: [20, 80],\\n      connect: true,\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 100\\n      }\\n    });\\n    noUiSlider.create(slider3, {\\n      start: [20, 80],\\n      connect: true,\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 100\\n      }\\n    });\\n  };\\n\\n  var _exampleVertical = function _exampleVertical() {\\n    var slider = document.querySelector(\\\"#kt_slider_vertical\\\");\\n    noUiSlider.create(slider, {\\n      start: [60, 160],\\n      connect: true,\\n      orientation: \\\"vertical\\\",\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 200\\n      }\\n    });\\n  };\\n\\n  var _exampleTooltip = function _exampleTooltip() {\\n    var slider = document.querySelector(\\\"#kt_slider_tooltip\\\");\\n    noUiSlider.create(slider, {\\n      start: [20, 80, 120],\\n      tooltips: [false, wNumb({\\n        decimals: 1\\n      }), true],\\n      range: {\\n        \\\"min\\\": 0,\\n        \\\"max\\\": 200\\n      }\\n    });\\n  };\\n\\n  var _exampleSoftLimits = function _exampleSoftLimits() {\\n    var slider = document.querySelector(\\\"#kt_slider_soft_limits\\\");\\n    noUiSlider.create(slider, {\\n      start: 50,\\n      range: {\\n        min: 0,\\n        max: 100\\n      },\\n      pips: {\\n        mode: \\\"values\\\",\\n        values: [20, 80],\\n        density: 4\\n      }\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init(element) {\\n      _exampleBasic();\\n\\n      _exampleSizes();\\n\\n      _exampleVertical();\\n\\n      _exampleTooltip();\\n\\n      _exampleSoftLimits();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTFormsNouisliderDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/forms/nouislider.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/forms/nouislider.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/forms/nouislider.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/forms/nouislider.js"]();
/******/ 	
/******/ })()
;