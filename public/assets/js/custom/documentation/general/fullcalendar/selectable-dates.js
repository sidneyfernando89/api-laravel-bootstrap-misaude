/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/general/fullcalendar/selectable-dates.js":
/*!****************************************************************************************!*\
  !*** ./resources/src/js/custom/documentation/general/fullcalendar/selectable-dates.js ***!
  \****************************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/general/fullcalendar/selectable-dates.js\":\n    /*!************************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/general/fullcalendar/selectable-dates.js ***!\r\n      \\************************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationGeneralFullcalendarSelectableDatesJs() {\n      eval(\" // Class definition\\n\\nvar KTGeneralFullCalendarSelectDemos = function () {\\n  // Private functions\\n  var exampleSelect = function exampleSelect() {\\n    // Define variables\\n    var calendarEl = document.getElementById('kt_docs_fullcalendar_selectable');\\n    var calendar = new FullCalendar.Calendar(calendarEl, {\\n      headerToolbar: {\\n        left: 'prev,next today',\\n        center: 'title',\\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\\n      },\\n      initialDate: '2020-09-12',\\n      navLinks: true,\\n      // can click day/week names to navigate views\\n      selectable: true,\\n      selectMirror: true,\\n      // Create new event\\n      select: function select(arg) {\\n        Swal.fire({\\n          html: '<div class=\\\"mb-7\\\">Create new event?</div><div class=\\\"fw-bolder mb-5\\\">Event Name:</div><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"event_name\\\" />',\\n          icon: \\\"info\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, create it!\\\",\\n          cancelButtonText: \\\"No, return\\\",\\n          customClass: {\\n            confirmButton: \\\"btn btn-primary\\\",\\n            cancelButton: \\\"btn btn-active-light\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            var title = document.querySelector('input[name=\\\"event_name\\\"]').value;\\n\\n            if (title) {\\n              calendar.addEvent({\\n                title: title,\\n                start: arg.start,\\n                end: arg.end,\\n                allDay: arg.allDay\\n              });\\n            }\\n\\n            calendar.unselect();\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: \\\"Event creation was declined!.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      },\\n      // Delete event\\n      eventClick: function eventClick(arg) {\\n        Swal.fire({\\n          text: 'Are you sure you want to delete this event?',\\n          icon: \\\"warning\\\",\\n          showCancelButton: true,\\n          buttonsStyling: false,\\n          confirmButtonText: \\\"Yes, delete it!\\\",\\n          cancelButtonText: \\\"No, return\\\",\\n          customClass: {\\n            confirmButton: \\\"btn btn-primary\\\",\\n            cancelButton: \\\"btn btn-active-light\\\"\\n          }\\n        }).then(function (result) {\\n          if (result.value) {\\n            arg.event.remove();\\n          } else if (result.dismiss === 'cancel') {\\n            Swal.fire({\\n              text: \\\"Event was not deleted!.\\\",\\n              icon: \\\"error\\\",\\n              buttonsStyling: false,\\n              confirmButtonText: \\\"OK!\\\",\\n              customClass: {\\n                confirmButton: \\\"btn btn-primary\\\"\\n              }\\n            });\\n          }\\n        });\\n      },\\n      editable: true,\\n      dayMaxEvents: true,\\n      // allow \\\"more\\\" link when too many events\\n      events: [{\\n        title: 'All Day Event',\\n        start: '2020-09-01'\\n      }, {\\n        title: 'Long Event',\\n        start: '2020-09-07',\\n        end: '2020-09-10'\\n      }, {\\n        groupId: 999,\\n        title: 'Repeating Event',\\n        start: '2020-09-09T16:00:00'\\n      }, {\\n        groupId: 999,\\n        title: 'Repeating Event',\\n        start: '2020-09-16T16:00:00'\\n      }, {\\n        title: 'Conference',\\n        start: '2020-09-11',\\n        end: '2020-09-13'\\n      }, {\\n        title: 'Meeting',\\n        start: '2020-09-12T10:30:00',\\n        end: '2020-09-12T12:30:00'\\n      }, {\\n        title: 'Lunch',\\n        start: '2020-09-12T12:00:00'\\n      }, {\\n        title: 'Meeting',\\n        start: '2020-09-12T14:30:00'\\n      }, {\\n        title: 'Happy Hour',\\n        start: '2020-09-12T17:30:00'\\n      }, {\\n        title: 'Dinner',\\n        start: '2020-09-12T20:00:00'\\n      }, {\\n        title: 'Birthday Party',\\n        start: '2020-09-13T07:00:00'\\n      }, {\\n        title: 'Click for Google',\\n        url: 'http://google.com/',\\n        start: '2020-09-28'\\n      }]\\n    });\\n    calendar.render();\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      exampleSelect();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTGeneralFullCalendarSelectDemos.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/general/fullcalendar/selectable-dates.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/general/fullcalendar/selectable-dates.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/general/fullcalendar/selectable-dates.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/general/fullcalendar/selectable-dates.js"]();
/******/ 	
/******/ })()
;