/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/documentation/general/vis-timeline/group.js":
/*!*****************************************************************************!*\
  !*** ./resources/src/js/custom/documentation/general/vis-timeline/group.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\r\n */\n\n/******/\n(function () {\n  // webpackBootstrap\n\n  /******/\n  \"use strict\";\n  /******/\n\n  var __webpack_modules__ = {\n    /***/\n    \"./resources/assets/core/js/custom/documentation/general/vis-timeline/group.js\":\n    /*!*************************************************************************************!*\\\r\n      !*** ./resources/assets/core/js/custom/documentation/general/vis-timeline/group.js ***!\r\n      \\*************************************************************************************/\n\n    /***/\n    function resourcesAssetsCoreJsCustomDocumentationGeneralVisTimelineGroupJs() {\n      eval(\" // Class definition\\n\\nvar KTVisTimelineGroup = function () {\\n  // Private functions\\n  var exampleGroup = function exampleGroup() {\\n    var now = Date.now();\\n    var options = {\\n      stack: true,\\n      maxHeight: 640,\\n      horizontalScroll: false,\\n      verticalScroll: true,\\n      zoomKey: \\\"ctrlKey\\\",\\n      start: Date.now() - 1000 * 60 * 60 * 24 * 3,\\n      // minus 3 days\\n      end: Date.now() + 1000 * 60 * 60 * 24 * 21,\\n      // plus 1 months aprox.\\n      orientation: {\\n        axis: \\\"both\\\",\\n        item: \\\"top\\\"\\n      }\\n    };\\n    var groups = new vis.DataSet();\\n    var items = new vis.DataSet();\\n    var count = 300;\\n\\n    for (var i = 0; i < count; i++) {\\n      var start = now + 1000 * 60 * 60 * 24 * (i + Math.floor(Math.random() * 7));\\n      var end = start + 1000 * 60 * 60 * 24 * (1 + Math.floor(Math.random() * 5));\\n      groups.add({\\n        id: i,\\n        content: \\\"Task \\\" + i,\\n        order: i\\n      });\\n      items.add({\\n        id: i,\\n        group: i,\\n        start: start,\\n        end: end,\\n        type: \\\"range\\\",\\n        content: \\\"Item \\\" + i\\n      });\\n    } // create a Timeline\\n\\n\\n    var container = document.getElementById(\\\"kt_docs_vistimeline_group\\\");\\n    var timeline = new vis.Timeline(container, items, groups, options); //timeline = new vis.Timeline(container, null, options);\\n\\n    timeline.setGroups(groups);\\n    timeline.setItems(items);\\n\\n    function debounce(func) {\\n      var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\\n      var timeout;\\n      return function () {\\n        var _this = this;\\n\\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n          args[_key] = arguments[_key];\\n        }\\n\\n        clearTimeout(timeout);\\n        timeout = setTimeout(function () {\\n          func.apply(_this, args);\\n        }, wait);\\n      };\\n    }\\n\\n    var groupFocus = function groupFocus(e) {\\n      var vGroups = timeline.getVisibleGroups();\\n      var vItems = vGroups.reduce(function (res, groupId) {\\n        var group = timeline.itemSet.groups[groupId];\\n\\n        if (group.items) {\\n          res = res.concat(Object.keys(group.items));\\n        }\\n\\n        return res;\\n      }, []);\\n      timeline.focus(vItems);\\n    };\\n\\n    timeline.on(\\\"scroll\\\", debounce(groupFocus, 200)); // Enabling the next line leads to a continuous since calling focus might scroll vertically even if it shouldn't\\n    // this.timeline.on(\\\"scrollSide\\\", debounce(groupFocus, 200))        \\n    // Handle button click\\n\\n    var button = document.getElementById('kt_docs_vistimeline_group_button');\\n    button.addEventListener('click', function (e) {\\n      e.preventDefault();\\n      var a = timeline.getVisibleGroups();\\n      document.getElementById(\\\"visibleGroupsContainer\\\").innerHTML = \\\"\\\";\\n      document.getElementById(\\\"visibleGroupsContainer\\\").innerHTML += a;\\n    });\\n  };\\n\\n  return {\\n    // Public Functions\\n    init: function init() {\\n      exampleGroup();\\n    }\\n  };\\n}(); // On document ready\\n\\n\\nKTUtil.onDOMContentLoaded(function () {\\n  KTVisTimelineGroup.init();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/documentation/general/vis-timeline/group.js\\n\");\n      /***/\n    }\n    /******/\n\n  };\n  /************************************************************************/\n\n  /******/\n\n  /******/\n  // startup\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n  // This entry module can't be inlined because the eval-source-map devtool is used.\n\n  /******/\n\n  var __webpack_exports__ = {};\n  /******/\n\n  __webpack_modules__[\"./resources/assets/core/js/custom/documentation/general/vis-timeline/group.js\"]();\n  /******/\n\n  /******/\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/documentation/general/vis-timeline/group.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/documentation/general/vis-timeline/group.js"]();
/******/ 	
/******/ })()
;